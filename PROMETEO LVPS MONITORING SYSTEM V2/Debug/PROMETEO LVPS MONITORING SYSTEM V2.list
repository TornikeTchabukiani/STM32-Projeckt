
PROMETEO LVPS MONITORING SYSTEM V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078e8  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080079f8  080079f8  000179f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e54  08007e54  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e54  08007e54  00017e54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007e5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e4  08008040  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000338  08008040  00020338  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af4b  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a45  00000000  00000000  0002b158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002cba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002d5c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d56  00000000  00000000  0002df50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca76  00000000  00000000  00045ca6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086000  00000000  00000000  0005271c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d871c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bb0  00000000  00000000  000d876c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e4 	.word	0x200001e4
 800012c:	00000000 	.word	0x00000000
 8000130:	080079e0 	.word	0x080079e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e8 	.word	0x200001e8
 800014c:	080079e0 	.word	0x080079e0

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <main>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart);// UARD Tx ISR
void ADS1115(int ADS1115_ADDRESS);//reading data from ADCs

//Main function
int main(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eb0:	f000 ffec 	bl	8001e8c <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 8000eb4:	f000 fc6a 	bl	800178c <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eb8:	f000 fd34 	bl	8001924 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000ebc:	f000 fcac 	bl	8001818 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000ec0:	f000 fd06 	bl	80018d0 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8000ec4:	f000 fcd6 	bl	8001874 <MX_I2C2_Init>

  //Turn all 8 relayis to ON State
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	481f      	ldr	r0, [pc, #124]	; (8000f4c <main+0xa0>)
 8000ed0:	f001 fba6 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000eda:	481c      	ldr	r0, [pc, #112]	; (8000f4c <main+0xa0>)
 8000edc:	f001 fba0 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ee6:	4819      	ldr	r0, [pc, #100]	; (8000f4c <main+0xa0>)
 8000ee8:	f001 fb9a 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8000eec:	2201      	movs	r2, #1
 8000eee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ef2:	4816      	ldr	r0, [pc, #88]	; (8000f4c <main+0xa0>)
 8000ef4:	f001 fb94 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000efe:	4814      	ldr	r0, [pc, #80]	; (8000f50 <main+0xa4>)
 8000f00:	f001 fb8e 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8000f04:	2201      	movs	r2, #1
 8000f06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f0a:	4811      	ldr	r0, [pc, #68]	; (8000f50 <main+0xa4>)
 8000f0c:	f001 fb88 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8000f10:	2201      	movs	r2, #1
 8000f12:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f16:	480e      	ldr	r0, [pc, #56]	; (8000f50 <main+0xa4>)
 8000f18:	f001 fb82 	bl	8002620 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8000f1c:	2201      	movs	r2, #1
 8000f1e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f22:	480b      	ldr	r0, [pc, #44]	; (8000f50 <main+0xa4>)
 8000f24:	f001 fb7c 	bl	8002620 <HAL_GPIO_WritePin>

  //UART Rx Interrupt
  HAL_UART_Receive_IT(&huart2, Rx_Data, 2);
 8000f28:	2202      	movs	r2, #2
 8000f2a:	490a      	ldr	r1, [pc, #40]	; (8000f54 <main+0xa8>)
 8000f2c:	480a      	ldr	r0, [pc, #40]	; (8000f58 <main+0xac>)
 8000f2e:	f003 f8a6 	bl	800407e <HAL_UART_Receive_IT>


  while (1)
  {
	  //Reading all ADCs and Displaing data to 5 inch Nextion display
	  ADS1115(sideA_CurrentADC_Address);
 8000f32:	2048      	movs	r0, #72	; 0x48
 8000f34:	f000 f91c 	bl	8001170 <ADS1115>
	  ADS1115(sideA_VoltageADC_Address);
 8000f38:	2049      	movs	r0, #73	; 0x49
 8000f3a:	f000 f919 	bl	8001170 <ADS1115>
	  ADS1115(sideB_CurrentADC_Address);
 8000f3e:	204b      	movs	r0, #75	; 0x4b
 8000f40:	f000 f916 	bl	8001170 <ADS1115>
	  ADS1115(sideB_VoltageADC_Address);
 8000f44:	204a      	movs	r0, #74	; 0x4a
 8000f46:	f000 f913 	bl	8001170 <ADS1115>
	  ADS1115(sideA_CurrentADC_Address);
 8000f4a:	e7f2      	b.n	8000f32 <main+0x86>
 8000f4c:	40010800 	.word	0x40010800
 8000f50:	40010c00 	.word	0x40010c00
 8000f54:	200002f0 	.word	0x200002f0
 8000f58:	200002a8 	.word	0x200002a8

08000f5c <NEXTION_SendString>:

}


void NEXTION_SendString (char *ID, float string)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af02      	add	r7, sp, #8
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
	char buf[20];
	int len = sprintf (buf, "%s.txt=\"%.2f\"", ID, string);
 8000f66:	6838      	ldr	r0, [r7, #0]
 8000f68:	f7ff fb12 	bl	8000590 <__aeabi_f2d>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	f107 0008 	add.w	r0, r7, #8
 8000f74:	e9cd 2300 	strd	r2, r3, [sp]
 8000f78:	687a      	ldr	r2, [r7, #4]
 8000f7a:	490b      	ldr	r1, [pc, #44]	; (8000fa8 <NEXTION_SendString+0x4c>)
 8000f7c:	f004 fab6 	bl	80054ec <siprintf>
 8000f80:	61f8      	str	r0, [r7, #28]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 200);
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	b29a      	uxth	r2, r3
 8000f86:	f107 0108 	add.w	r1, r7, #8
 8000f8a:	23c8      	movs	r3, #200	; 0xc8
 8000f8c:	4807      	ldr	r0, [pc, #28]	; (8000fac <NEXTION_SendString+0x50>)
 8000f8e:	f002 fff3 	bl	8003f78 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000f92:	2364      	movs	r3, #100	; 0x64
 8000f94:	2203      	movs	r2, #3
 8000f96:	4906      	ldr	r1, [pc, #24]	; (8000fb0 <NEXTION_SendString+0x54>)
 8000f98:	4804      	ldr	r0, [pc, #16]	; (8000fac <NEXTION_SendString+0x50>)
 8000f9a:	f002 ffed 	bl	8003f78 <HAL_UART_Transmit>
}
 8000f9e:	bf00      	nop
 8000fa0:	3720      	adds	r7, #32
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	080079f8 	.word	0x080079f8
 8000fac:	200002a8 	.word	0x200002a8
 8000fb0:	20000000 	.word	0x20000000

08000fb4 <HAL_UART_RxCpltCallback>:

//UART RX ISR
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(huart, Rx_Data, 2);
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	4969      	ldr	r1, [pc, #420]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f003 f85c 	bl	800407e <HAL_UART_Receive_IT>

	  if (Rx_Data[0] == 0x02) // if the dual state button is pressed
 8000fc6:	4b67      	ldr	r3, [pc, #412]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	2b02      	cmp	r3, #2
 8000fcc:	d115      	bne.n	8000ffa <HAL_UART_RxCpltCallback+0x46>
	  {
		  // Get the value
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 8000fce:	4b65      	ldr	r3, [pc, #404]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fd0:	785b      	ldrb	r3, [r3, #1]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d105      	bne.n	8000fe2 <HAL_UART_RxCpltCallback+0x2e>
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000fdc:	4862      	ldr	r0, [pc, #392]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 8000fde:	f001 fb1f 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8000fe2:	4b60      	ldr	r3, [pc, #384]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8000fe4:	785b      	ldrb	r3, [r3, #1]
 8000fe6:	2b01      	cmp	r3, #1
 8000fe8:	f040 80b7 	bne.w	800115a <HAL_UART_RxCpltCallback+0x1a6>
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ff2:	485d      	ldr	r0, [pc, #372]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 8000ff4:	f001 fb14 	bl	8002620 <HAL_GPIO_WritePin>
	  {
		  // Get the value
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  }
}
 8000ff8:	e0af      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  } else if (Rx_Data[0] == 0x03) // if the dual state button is pressed
 8000ffa:	4b5a      	ldr	r3, [pc, #360]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	2b03      	cmp	r3, #3
 8001000:	d115      	bne.n	800102e <HAL_UART_RxCpltCallback+0x7a>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001002:	4b58      	ldr	r3, [pc, #352]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001004:	785b      	ldrb	r3, [r3, #1]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d105      	bne.n	8001016 <HAL_UART_RxCpltCallback+0x62>
 800100a:	2201      	movs	r2, #1
 800100c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001010:	4855      	ldr	r0, [pc, #340]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 8001012:	f001 fb05 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001016:	4b53      	ldr	r3, [pc, #332]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001018:	785b      	ldrb	r3, [r3, #1]
 800101a:	2b01      	cmp	r3, #1
 800101c:	f040 809d 	bne.w	800115a <HAL_UART_RxCpltCallback+0x1a6>
 8001020:	2200      	movs	r2, #0
 8001022:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001026:	4850      	ldr	r0, [pc, #320]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 8001028:	f001 fafa 	bl	8002620 <HAL_GPIO_WritePin>
}
 800102c:	e095      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x04) // if the dual state button is pressed
 800102e:	4b4d      	ldr	r3, [pc, #308]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	2b04      	cmp	r3, #4
 8001034:	d115      	bne.n	8001062 <HAL_UART_RxCpltCallback+0xae>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001036:	4b4b      	ldr	r3, [pc, #300]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001038:	785b      	ldrb	r3, [r3, #1]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d105      	bne.n	800104a <HAL_UART_RxCpltCallback+0x96>
 800103e:	2201      	movs	r2, #1
 8001040:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001044:	4848      	ldr	r0, [pc, #288]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 8001046:	f001 faeb 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 800104a:	4b46      	ldr	r3, [pc, #280]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 800104c:	785b      	ldrb	r3, [r3, #1]
 800104e:	2b01      	cmp	r3, #1
 8001050:	f040 8083 	bne.w	800115a <HAL_UART_RxCpltCallback+0x1a6>
 8001054:	2200      	movs	r2, #0
 8001056:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105a:	4843      	ldr	r0, [pc, #268]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 800105c:	f001 fae0 	bl	8002620 <HAL_GPIO_WritePin>
}
 8001060:	e07b      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x05) // if the dual state button is pressed
 8001062:	4b40      	ldr	r3, [pc, #256]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b05      	cmp	r3, #5
 8001068:	d114      	bne.n	8001094 <HAL_UART_RxCpltCallback+0xe0>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 800106a:	4b3e      	ldr	r3, [pc, #248]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 800106c:	785b      	ldrb	r3, [r3, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d105      	bne.n	800107e <HAL_UART_RxCpltCallback+0xca>
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001078:	483b      	ldr	r0, [pc, #236]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 800107a:	f001 fad1 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 800107e:	4b39      	ldr	r3, [pc, #228]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001080:	785b      	ldrb	r3, [r3, #1]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d169      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
 8001086:	2200      	movs	r2, #0
 8001088:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800108c:	4836      	ldr	r0, [pc, #216]	; (8001168 <HAL_UART_RxCpltCallback+0x1b4>)
 800108e:	f001 fac7 	bl	8002620 <HAL_GPIO_WritePin>
}
 8001092:	e062      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x06) // if the dual state button is pressed
 8001094:	4b33      	ldr	r3, [pc, #204]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b06      	cmp	r3, #6
 800109a:	d114      	bne.n	80010c6 <HAL_UART_RxCpltCallback+0x112>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800109c:	4b31      	ldr	r3, [pc, #196]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 800109e:	785b      	ldrb	r3, [r3, #1]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d105      	bne.n	80010b0 <HAL_UART_RxCpltCallback+0xfc>
 80010a4:	2201      	movs	r2, #1
 80010a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010aa:	4830      	ldr	r0, [pc, #192]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 80010ac:	f001 fab8 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 80010b2:	785b      	ldrb	r3, [r3, #1]
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d150      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80010be:	482b      	ldr	r0, [pc, #172]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 80010c0:	f001 faae 	bl	8002620 <HAL_GPIO_WritePin>
}
 80010c4:	e049      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x07) // if the dual state button is pressed
 80010c6:	4b27      	ldr	r3, [pc, #156]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b07      	cmp	r3, #7
 80010cc:	d114      	bne.n	80010f8 <HAL_UART_RxCpltCallback+0x144>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 80010ce:	4b25      	ldr	r3, [pc, #148]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 80010d0:	785b      	ldrb	r3, [r3, #1]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d105      	bne.n	80010e2 <HAL_UART_RxCpltCallback+0x12e>
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010dc:	4823      	ldr	r0, [pc, #140]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 80010de:	f001 fa9f 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 80010e4:	785b      	ldrb	r3, [r3, #1]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d137      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010f0:	481e      	ldr	r0, [pc, #120]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 80010f2:	f001 fa95 	bl	8002620 <HAL_GPIO_WritePin>
}
 80010f6:	e030      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x08) // if the dual state button is pressed
 80010f8:	4b1a      	ldr	r3, [pc, #104]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b08      	cmp	r3, #8
 80010fe:	d114      	bne.n	800112a <HAL_UART_RxCpltCallback+0x176>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001100:	4b18      	ldr	r3, [pc, #96]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001102:	785b      	ldrb	r3, [r3, #1]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d105      	bne.n	8001114 <HAL_UART_RxCpltCallback+0x160>
 8001108:	2201      	movs	r2, #1
 800110a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800110e:	4817      	ldr	r0, [pc, #92]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 8001110:	f001 fa86 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d11e      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001122:	4812      	ldr	r0, [pc, #72]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 8001124:	f001 fa7c 	bl	8002620 <HAL_GPIO_WritePin>
}
 8001128:	e017      	b.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x09) // if the dual state button is pressed
 800112a:	4b0e      	ldr	r3, [pc, #56]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	2b09      	cmp	r3, #9
 8001130:	d113      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001132:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001134:	785b      	ldrb	r3, [r3, #1]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d105      	bne.n	8001146 <HAL_UART_RxCpltCallback+0x192>
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001140:	480a      	ldr	r0, [pc, #40]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 8001142:	f001 fa6d 	bl	8002620 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 8001146:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_UART_RxCpltCallback+0x1b0>)
 8001148:	785b      	ldrb	r3, [r3, #1]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d105      	bne.n	800115a <HAL_UART_RxCpltCallback+0x1a6>
 800114e:	2200      	movs	r2, #0
 8001150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001154:	4805      	ldr	r0, [pc, #20]	; (800116c <HAL_UART_RxCpltCallback+0x1b8>)
 8001156:	f001 fa63 	bl	8002620 <HAL_GPIO_WritePin>
}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200002f0 	.word	0x200002f0
 8001168:	40010800 	.word	0x40010800
 800116c:	40010c00 	.word	0x40010c00

08001170 <ADS1115>:

//reading and display data from four ADS1115s
void ADS1115(int ADS1115_ADDRESS){
 8001170:	b5b0      	push	{r4, r5, r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af02      	add	r7, sp, #8
 8001176:	6078      	str	r0, [r7, #4]

	for(int i=0; i< 4; i++){
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	e13c      	b.n	80013f8 <ADS1115+0x288>
				ADSwrite[0] = 0x01;
 800117e:	4bb8      	ldr	r3, [pc, #736]	; (8001460 <ADS1115+0x2f0>)
 8001180:	2201      	movs	r2, #1
 8001182:	701a      	strb	r2, [r3, #0]

				switch(i){
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	2b03      	cmp	r3, #3
 8001188:	d81a      	bhi.n	80011c0 <ADS1115+0x50>
 800118a:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <ADS1115+0x20>)
 800118c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001190:	080011a1 	.word	0x080011a1
 8001194:	080011a9 	.word	0x080011a9
 8001198:	080011b1 	.word	0x080011b1
 800119c:	080011b9 	.word	0x080011b9
					case(0):
						ADSwrite[1] = 0xC1;
 80011a0:	4baf      	ldr	r3, [pc, #700]	; (8001460 <ADS1115+0x2f0>)
 80011a2:	22c1      	movs	r2, #193	; 0xc1
 80011a4:	705a      	strb	r2, [r3, #1]
					break;
 80011a6:	e00b      	b.n	80011c0 <ADS1115+0x50>
					case(1):
						ADSwrite[1] = 0xD1;
 80011a8:	4bad      	ldr	r3, [pc, #692]	; (8001460 <ADS1115+0x2f0>)
 80011aa:	22d1      	movs	r2, #209	; 0xd1
 80011ac:	705a      	strb	r2, [r3, #1]
					break;
 80011ae:	e007      	b.n	80011c0 <ADS1115+0x50>
					case(2):
						ADSwrite[1] = 0xE1;
 80011b0:	4bab      	ldr	r3, [pc, #684]	; (8001460 <ADS1115+0x2f0>)
 80011b2:	22e1      	movs	r2, #225	; 0xe1
 80011b4:	705a      	strb	r2, [r3, #1]
					break;
 80011b6:	e003      	b.n	80011c0 <ADS1115+0x50>
					case(3):
						ADSwrite[1] = 0xF1;
 80011b8:	4ba9      	ldr	r3, [pc, #676]	; (8001460 <ADS1115+0x2f0>)
 80011ba:	22f1      	movs	r2, #241	; 0xf1
 80011bc:	705a      	strb	r2, [r3, #1]
					break;
 80011be:	bf00      	nop
				}
				ADSwrite[2] = 0x83;
 80011c0:	4ba7      	ldr	r3, [pc, #668]	; (8001460 <ADS1115+0x2f0>)
 80011c2:	2283      	movs	r2, #131	; 0x83
 80011c4:	709a      	strb	r2, [r3, #2]

				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	b299      	uxth	r1, r3
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2303      	movs	r3, #3
 80011d4:	4aa2      	ldr	r2, [pc, #648]	; (8001460 <ADS1115+0x2f0>)
 80011d6:	48a3      	ldr	r0, [pc, #652]	; (8001464 <ADS1115+0x2f4>)
 80011d8:	f001 fb7e 	bl	80028d8 <HAL_I2C_Master_Transmit>
				ADSwrite[0] = 0x00;
 80011dc:	4ba0      	ldr	r3, [pc, #640]	; (8001460 <ADS1115+0x2f0>)
 80011de:	2200      	movs	r2, #0
 80011e0:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	005b      	lsls	r3, r3, #1
 80011e8:	b299      	uxth	r1, r3
 80011ea:	2364      	movs	r3, #100	; 0x64
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	4a9b      	ldr	r2, [pc, #620]	; (8001460 <ADS1115+0x2f0>)
 80011f2:	489c      	ldr	r0, [pc, #624]	; (8001464 <ADS1115+0x2f4>)
 80011f4:	f001 fb70 	bl	80028d8 <HAL_I2C_Master_Transmit>
				HAL_Delay(20);
 80011f8:	2014      	movs	r0, #20
 80011fa:	f000 fea9 	bl	8001f50 <HAL_Delay>

				HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	b29b      	uxth	r3, r3
 8001202:	005b      	lsls	r3, r3, #1
 8001204:	b299      	uxth	r1, r3
 8001206:	2364      	movs	r3, #100	; 0x64
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2302      	movs	r3, #2
 800120c:	4a94      	ldr	r2, [pc, #592]	; (8001460 <ADS1115+0x2f0>)
 800120e:	4895      	ldr	r0, [pc, #596]	; (8001464 <ADS1115+0x2f4>)
 8001210:	f001 fc60 	bl	8002ad4 <HAL_I2C_Master_Receive>
				reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <ADS1115+0x2f0>)
 8001216:	781b      	ldrb	r3, [r3, #0]
 8001218:	021b      	lsls	r3, r3, #8
 800121a:	b21a      	sxth	r2, r3
 800121c:	4b90      	ldr	r3, [pc, #576]	; (8001460 <ADS1115+0x2f0>)
 800121e:	785b      	ldrb	r3, [r3, #1]
 8001220:	b21b      	sxth	r3, r3
 8001222:	4313      	orrs	r3, r2
 8001224:	b21a      	sxth	r2, r3
 8001226:	4b90      	ldr	r3, [pc, #576]	; (8001468 <ADS1115+0x2f8>)
 8001228:	801a      	strh	r2, [r3, #0]
				if(reading < 0) {
 800122a:	4b8f      	ldr	r3, [pc, #572]	; (8001468 <ADS1115+0x2f8>)
 800122c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da02      	bge.n	800123a <ADS1115+0xca>
					reading = 0;
 8001234:	4b8c      	ldr	r3, [pc, #560]	; (8001468 <ADS1115+0x2f8>)
 8001236:	2200      	movs	r2, #0
 8001238:	801a      	strh	r2, [r3, #0]
				}
				voltage[i] = reading * voltageConv;
 800123a:	4b8b      	ldr	r3, [pc, #556]	; (8001468 <ADS1115+0x2f8>)
 800123c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff fddf 	bl	8000e04 <__aeabi_i2f>
 8001246:	4603      	mov	r3, r0
 8001248:	4a88      	ldr	r2, [pc, #544]	; (800146c <ADS1115+0x2fc>)
 800124a:	4611      	mov	r1, r2
 800124c:	4618      	mov	r0, r3
 800124e:	f7fe ff87 	bl	8000160 <__aeabi_fmul>
 8001252:	4603      	mov	r3, r0
 8001254:	4619      	mov	r1, r3
 8001256:	4a86      	ldr	r2, [pc, #536]	; (8001470 <ADS1115+0x300>)
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				if(ADS1115_ADDRESS == 0x48 ){
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b48      	cmp	r3, #72	; 0x48
 8001262:	d11e      	bne.n	80012a2 <ADS1115+0x132>
					current[i]=(voltage[i]-CurrentSensorOffSet)/0.185;
 8001264:	4a82      	ldr	r2, [pc, #520]	; (8001470 <ADS1115+0x300>)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800126c:	4a81      	ldr	r2, [pc, #516]	; (8001474 <ADS1115+0x304>)
 800126e:	6812      	ldr	r2, [r2, #0]
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff fd10 	bl	8000c98 <__aeabi_fsub>
 8001278:	4603      	mov	r3, r0
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff f988 	bl	8000590 <__aeabi_f2d>
 8001280:	a36d      	add	r3, pc, #436	; (adr r3, 8001438 <ADS1115+0x2c8>)
 8001282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001286:	f7ff fb05 	bl	8000894 <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	f7ff fcad 	bl	8000bf0 <__aeabi_d2f>
 8001296:	4602      	mov	r2, r0
 8001298:	4977      	ldr	r1, [pc, #476]	; (8001478 <ADS1115+0x308>)
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80012a0:	e0a7      	b.n	80013f2 <ADS1115+0x282>
				}else if (ADS1115_ADDRESS == 0x4B){
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b4b      	cmp	r3, #75	; 0x4b
 80012a6:	f040 80a4 	bne.w	80013f2 <ADS1115+0x282>
					current[0]=(voltage[0]-(CurrentSensorOffSet+0.02))/0.185;
 80012aa:	4b71      	ldr	r3, [pc, #452]	; (8001470 <ADS1115+0x300>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff f96e 	bl	8000590 <__aeabi_f2d>
 80012b4:	4604      	mov	r4, r0
 80012b6:	460d      	mov	r5, r1
 80012b8:	4b6e      	ldr	r3, [pc, #440]	; (8001474 <ADS1115+0x304>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f967 	bl	8000590 <__aeabi_f2d>
 80012c2:	a35f      	add	r3, pc, #380	; (adr r3, 8001440 <ADS1115+0x2d0>)
 80012c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012c8:	f7ff f804 	bl	80002d4 <__adddf3>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	4620      	mov	r0, r4
 80012d2:	4629      	mov	r1, r5
 80012d4:	f7fe fffc 	bl	80002d0 <__aeabi_dsub>
 80012d8:	4602      	mov	r2, r0
 80012da:	460b      	mov	r3, r1
 80012dc:	4610      	mov	r0, r2
 80012de:	4619      	mov	r1, r3
 80012e0:	a355      	add	r3, pc, #340	; (adr r3, 8001438 <ADS1115+0x2c8>)
 80012e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012e6:	f7ff fad5 	bl	8000894 <__aeabi_ddiv>
 80012ea:	4602      	mov	r2, r0
 80012ec:	460b      	mov	r3, r1
 80012ee:	4610      	mov	r0, r2
 80012f0:	4619      	mov	r1, r3
 80012f2:	f7ff fc7d 	bl	8000bf0 <__aeabi_d2f>
 80012f6:	4603      	mov	r3, r0
 80012f8:	4a5f      	ldr	r2, [pc, #380]	; (8001478 <ADS1115+0x308>)
 80012fa:	6013      	str	r3, [r2, #0]
					current[1]=(voltage[1]-(CurrentSensorOffSet+0.02))/0.185;
 80012fc:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <ADS1115+0x300>)
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	4618      	mov	r0, r3
 8001302:	f7ff f945 	bl	8000590 <__aeabi_f2d>
 8001306:	4604      	mov	r4, r0
 8001308:	460d      	mov	r5, r1
 800130a:	4b5a      	ldr	r3, [pc, #360]	; (8001474 <ADS1115+0x304>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4618      	mov	r0, r3
 8001310:	f7ff f93e 	bl	8000590 <__aeabi_f2d>
 8001314:	a34a      	add	r3, pc, #296	; (adr r3, 8001440 <ADS1115+0x2d0>)
 8001316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131a:	f7fe ffdb 	bl	80002d4 <__adddf3>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4620      	mov	r0, r4
 8001324:	4629      	mov	r1, r5
 8001326:	f7fe ffd3 	bl	80002d0 <__aeabi_dsub>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	a341      	add	r3, pc, #260	; (adr r3, 8001438 <ADS1115+0x2c8>)
 8001334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001338:	f7ff faac 	bl	8000894 <__aeabi_ddiv>
 800133c:	4602      	mov	r2, r0
 800133e:	460b      	mov	r3, r1
 8001340:	4610      	mov	r0, r2
 8001342:	4619      	mov	r1, r3
 8001344:	f7ff fc54 	bl	8000bf0 <__aeabi_d2f>
 8001348:	4603      	mov	r3, r0
 800134a:	4a4b      	ldr	r2, [pc, #300]	; (8001478 <ADS1115+0x308>)
 800134c:	6053      	str	r3, [r2, #4]
					current[2]=(voltage[2]-(CurrentSensorOffSet+0.01))/0.185;
 800134e:	4b48      	ldr	r3, [pc, #288]	; (8001470 <ADS1115+0x300>)
 8001350:	689b      	ldr	r3, [r3, #8]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff f91c 	bl	8000590 <__aeabi_f2d>
 8001358:	4604      	mov	r4, r0
 800135a:	460d      	mov	r5, r1
 800135c:	4b45      	ldr	r3, [pc, #276]	; (8001474 <ADS1115+0x304>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff f915 	bl	8000590 <__aeabi_f2d>
 8001366:	a338      	add	r3, pc, #224	; (adr r3, 8001448 <ADS1115+0x2d8>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	f7fe ffb2 	bl	80002d4 <__adddf3>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4620      	mov	r0, r4
 8001376:	4629      	mov	r1, r5
 8001378:	f7fe ffaa 	bl	80002d0 <__aeabi_dsub>
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4610      	mov	r0, r2
 8001382:	4619      	mov	r1, r3
 8001384:	a32c      	add	r3, pc, #176	; (adr r3, 8001438 <ADS1115+0x2c8>)
 8001386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800138a:	f7ff fa83 	bl	8000894 <__aeabi_ddiv>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4610      	mov	r0, r2
 8001394:	4619      	mov	r1, r3
 8001396:	f7ff fc2b 	bl	8000bf0 <__aeabi_d2f>
 800139a:	4603      	mov	r3, r0
 800139c:	4a36      	ldr	r2, [pc, #216]	; (8001478 <ADS1115+0x308>)
 800139e:	6093      	str	r3, [r2, #8]
					current[3]=(voltage[3]-(CurrentSensorOffSet+0.03))/0.185;
 80013a0:	4b33      	ldr	r3, [pc, #204]	; (8001470 <ADS1115+0x300>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f7ff f8f3 	bl	8000590 <__aeabi_f2d>
 80013aa:	4604      	mov	r4, r0
 80013ac:	460d      	mov	r5, r1
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <ADS1115+0x304>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff f8ec 	bl	8000590 <__aeabi_f2d>
 80013b8:	a325      	add	r3, pc, #148	; (adr r3, 8001450 <ADS1115+0x2e0>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7fe ff89 	bl	80002d4 <__adddf3>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4620      	mov	r0, r4
 80013c8:	4629      	mov	r1, r5
 80013ca:	f7fe ff81 	bl	80002d0 <__aeabi_dsub>
 80013ce:	4602      	mov	r2, r0
 80013d0:	460b      	mov	r3, r1
 80013d2:	4610      	mov	r0, r2
 80013d4:	4619      	mov	r1, r3
 80013d6:	a318      	add	r3, pc, #96	; (adr r3, 8001438 <ADS1115+0x2c8>)
 80013d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013dc:	f7ff fa5a 	bl	8000894 <__aeabi_ddiv>
 80013e0:	4602      	mov	r2, r0
 80013e2:	460b      	mov	r3, r1
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	f7ff fc02 	bl	8000bf0 <__aeabi_d2f>
 80013ec:	4603      	mov	r3, r0
 80013ee:	4a22      	ldr	r2, [pc, #136]	; (8001478 <ADS1115+0x308>)
 80013f0:	60d3      	str	r3, [r2, #12]
	for(int i=0; i< 4; i++){
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	f77f aebf 	ble.w	800117e <ADS1115+0xe>
				}
			}
	if(ADS1115_ADDRESS == 0x48){
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2b48      	cmp	r3, #72	; 0x48
 8001404:	f040 80a9 	bne.w	800155a <ADS1115+0x3ea>
		if(current[0]<=0.2 ){
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <ADS1115+0x308>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff f8bf 	bl	8000590 <__aeabi_f2d>
 8001412:	a311      	add	r3, pc, #68	; (adr r3, 8001458 <ADS1115+0x2e8>)
 8001414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001418:	f7ff fb8e 	bl	8000b38 <__aeabi_dcmple>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d02e      	beq.n	8001480 <ADS1115+0x310>
			current[0]=0;
 8001422:	4b15      	ldr	r3, [pc, #84]	; (8001478 <ADS1115+0x308>)
 8001424:	f04f 0200 	mov.w	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
			NEXTION_SendString("t4", current[0]);
 800142a:	4b13      	ldr	r3, [pc, #76]	; (8001478 <ADS1115+0x308>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4619      	mov	r1, r3
 8001430:	4812      	ldr	r0, [pc, #72]	; (800147c <ADS1115+0x30c>)
 8001432:	f7ff fd93 	bl	8000f5c <NEXTION_SendString>
 8001436:	e029      	b.n	800148c <ADS1115+0x31c>
 8001438:	7ae147ae 	.word	0x7ae147ae
 800143c:	3fc7ae14 	.word	0x3fc7ae14
 8001440:	47ae147b 	.word	0x47ae147b
 8001444:	3f947ae1 	.word	0x3f947ae1
 8001448:	47ae147b 	.word	0x47ae147b
 800144c:	3f847ae1 	.word	0x3f847ae1
 8001450:	eb851eb8 	.word	0xeb851eb8
 8001454:	3f9eb851 	.word	0x3f9eb851
 8001458:	9999999a 	.word	0x9999999a
 800145c:	3fc99999 	.word	0x3fc99999
 8001460:	200002f8 	.word	0x200002f8
 8001464:	20000200 	.word	0x20000200
 8001468:	200002f6 	.word	0x200002f6
 800146c:	3943a5e3 	.word	0x3943a5e3
 8001470:	20000300 	.word	0x20000300
 8001474:	20000004 	.word	0x20000004
 8001478:	20000310 	.word	0x20000310
 800147c:	08007a08 	.word	0x08007a08
		}else{
			NEXTION_SendString("t4", current[0]);
 8001480:	4b95      	ldr	r3, [pc, #596]	; (80016d8 <ADS1115+0x568>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4619      	mov	r1, r3
 8001486:	4895      	ldr	r0, [pc, #596]	; (80016dc <ADS1115+0x56c>)
 8001488:	f7ff fd68 	bl	8000f5c <NEXTION_SendString>
		}
		if(current[1]<=0.2 ){
 800148c:	4b92      	ldr	r3, [pc, #584]	; (80016d8 <ADS1115+0x568>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f87d 	bl	8000590 <__aeabi_f2d>
 8001496:	a38e      	add	r3, pc, #568	; (adr r3, 80016d0 <ADS1115+0x560>)
 8001498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149c:	f7ff fb4c 	bl	8000b38 <__aeabi_dcmple>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d010      	beq.n	80014c8 <ADS1115+0x358>
			current[1]=0;
 80014a6:	4b8c      	ldr	r3, [pc, #560]	; (80016d8 <ADS1115+0x568>)
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
			NEXTION_SendString("t16", current[1]);
 80014ae:	4b8a      	ldr	r3, [pc, #552]	; (80016d8 <ADS1115+0x568>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4619      	mov	r1, r3
 80014b4:	488a      	ldr	r0, [pc, #552]	; (80016e0 <ADS1115+0x570>)
 80014b6:	f7ff fd51 	bl	8000f5c <NEXTION_SendString>
			NEXTION_SendString("t5", current[1]);
 80014ba:	4b87      	ldr	r3, [pc, #540]	; (80016d8 <ADS1115+0x568>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4619      	mov	r1, r3
 80014c0:	4888      	ldr	r0, [pc, #544]	; (80016e4 <ADS1115+0x574>)
 80014c2:	f7ff fd4b 	bl	8000f5c <NEXTION_SendString>
 80014c6:	e00b      	b.n	80014e0 <ADS1115+0x370>

		}else{
			NEXTION_SendString("t16", current[1]);
 80014c8:	4b83      	ldr	r3, [pc, #524]	; (80016d8 <ADS1115+0x568>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4619      	mov	r1, r3
 80014ce:	4884      	ldr	r0, [pc, #528]	; (80016e0 <ADS1115+0x570>)
 80014d0:	f7ff fd44 	bl	8000f5c <NEXTION_SendString>
			NEXTION_SendString("t5", current[1]);
 80014d4:	4b80      	ldr	r3, [pc, #512]	; (80016d8 <ADS1115+0x568>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4619      	mov	r1, r3
 80014da:	4882      	ldr	r0, [pc, #520]	; (80016e4 <ADS1115+0x574>)
 80014dc:	f7ff fd3e 	bl	8000f5c <NEXTION_SendString>
		}
		if(current[2]<=0.2 ){
 80014e0:	4b7d      	ldr	r3, [pc, #500]	; (80016d8 <ADS1115+0x568>)
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	4618      	mov	r0, r3
 80014e6:	f7ff f853 	bl	8000590 <__aeabi_f2d>
 80014ea:	a379      	add	r3, pc, #484	; (adr r3, 80016d0 <ADS1115+0x560>)
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	f7ff fb22 	bl	8000b38 <__aeabi_dcmple>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00a      	beq.n	8001510 <ADS1115+0x3a0>
			current[2]=0;
 80014fa:	4b77      	ldr	r3, [pc, #476]	; (80016d8 <ADS1115+0x568>)
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
			NEXTION_SendString("t6", current[2]);
 8001502:	4b75      	ldr	r3, [pc, #468]	; (80016d8 <ADS1115+0x568>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	4619      	mov	r1, r3
 8001508:	4877      	ldr	r0, [pc, #476]	; (80016e8 <ADS1115+0x578>)
 800150a:	f7ff fd27 	bl	8000f5c <NEXTION_SendString>
 800150e:	e005      	b.n	800151c <ADS1115+0x3ac>

		}else{
			NEXTION_SendString("t6", current[2]);
 8001510:	4b71      	ldr	r3, [pc, #452]	; (80016d8 <ADS1115+0x568>)
 8001512:	689b      	ldr	r3, [r3, #8]
 8001514:	4619      	mov	r1, r3
 8001516:	4874      	ldr	r0, [pc, #464]	; (80016e8 <ADS1115+0x578>)
 8001518:	f7ff fd20 	bl	8000f5c <NEXTION_SendString>
		}
		if(current[3]<=0.2 ){
 800151c:	4b6e      	ldr	r3, [pc, #440]	; (80016d8 <ADS1115+0x568>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff f835 	bl	8000590 <__aeabi_f2d>
 8001526:	a36a      	add	r3, pc, #424	; (adr r3, 80016d0 <ADS1115+0x560>)
 8001528:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152c:	f7ff fb04 	bl	8000b38 <__aeabi_dcmple>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d00a      	beq.n	800154c <ADS1115+0x3dc>
			current[3]=0;
 8001536:	4b68      	ldr	r3, [pc, #416]	; (80016d8 <ADS1115+0x568>)
 8001538:	f04f 0200 	mov.w	r2, #0
 800153c:	60da      	str	r2, [r3, #12]
			NEXTION_SendString("t7", current[3]);
 800153e:	4b66      	ldr	r3, [pc, #408]	; (80016d8 <ADS1115+0x568>)
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	4619      	mov	r1, r3
 8001544:	4869      	ldr	r0, [pc, #420]	; (80016ec <ADS1115+0x57c>)
 8001546:	f7ff fd09 	bl	8000f5c <NEXTION_SendString>

		}else{
			NEXTION_SendString("t15", current[3]);
		}
	}
}
 800154a:	e10f      	b.n	800176c <ADS1115+0x5fc>
			NEXTION_SendString("t7", current[3]);
 800154c:	4b62      	ldr	r3, [pc, #392]	; (80016d8 <ADS1115+0x568>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	4619      	mov	r1, r3
 8001552:	4866      	ldr	r0, [pc, #408]	; (80016ec <ADS1115+0x57c>)
 8001554:	f7ff fd02 	bl	8000f5c <NEXTION_SendString>
}
 8001558:	e108      	b.n	800176c <ADS1115+0x5fc>
	} else if (ADS1115_ADDRESS == 0x49){
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b49      	cmp	r3, #73	; 0x49
 800155e:	d12c      	bne.n	80015ba <ADS1115+0x44a>
		NEXTION_SendString("t0", voltage[0]*3.0);
 8001560:	4b63      	ldr	r3, [pc, #396]	; (80016f0 <ADS1115+0x580>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4963      	ldr	r1, [pc, #396]	; (80016f4 <ADS1115+0x584>)
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe fdfa 	bl	8000160 <__aeabi_fmul>
 800156c:	4603      	mov	r3, r0
 800156e:	4619      	mov	r1, r3
 8001570:	4861      	ldr	r0, [pc, #388]	; (80016f8 <ADS1115+0x588>)
 8001572:	f7ff fcf3 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t1", voltage[1]*3.0);
 8001576:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <ADS1115+0x580>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	495e      	ldr	r1, [pc, #376]	; (80016f4 <ADS1115+0x584>)
 800157c:	4618      	mov	r0, r3
 800157e:	f7fe fdef 	bl	8000160 <__aeabi_fmul>
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	485d      	ldr	r0, [pc, #372]	; (80016fc <ADS1115+0x58c>)
 8001588:	f7ff fce8 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t2", voltage[2]*3.0);
 800158c:	4b58      	ldr	r3, [pc, #352]	; (80016f0 <ADS1115+0x580>)
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	4958      	ldr	r1, [pc, #352]	; (80016f4 <ADS1115+0x584>)
 8001592:	4618      	mov	r0, r3
 8001594:	f7fe fde4 	bl	8000160 <__aeabi_fmul>
 8001598:	4603      	mov	r3, r0
 800159a:	4619      	mov	r1, r3
 800159c:	4858      	ldr	r0, [pc, #352]	; (8001700 <ADS1115+0x590>)
 800159e:	f7ff fcdd 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t3", voltage[3]*3.0);
 80015a2:	4b53      	ldr	r3, [pc, #332]	; (80016f0 <ADS1115+0x580>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	4953      	ldr	r1, [pc, #332]	; (80016f4 <ADS1115+0x584>)
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7fe fdd9 	bl	8000160 <__aeabi_fmul>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4619      	mov	r1, r3
 80015b2:	4854      	ldr	r0, [pc, #336]	; (8001704 <ADS1115+0x594>)
 80015b4:	f7ff fcd2 	bl	8000f5c <NEXTION_SendString>
}
 80015b8:	e0d8      	b.n	800176c <ADS1115+0x5fc>
	}else if (ADS1115_ADDRESS == 0x4A){
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2b4a      	cmp	r3, #74	; 0x4a
 80015be:	d12c      	bne.n	800161a <ADS1115+0x4aa>
		NEXTION_SendString("t8", voltage[0]*3.0);
 80015c0:	4b4b      	ldr	r3, [pc, #300]	; (80016f0 <ADS1115+0x580>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	494b      	ldr	r1, [pc, #300]	; (80016f4 <ADS1115+0x584>)
 80015c6:	4618      	mov	r0, r3
 80015c8:	f7fe fdca 	bl	8000160 <__aeabi_fmul>
 80015cc:	4603      	mov	r3, r0
 80015ce:	4619      	mov	r1, r3
 80015d0:	484d      	ldr	r0, [pc, #308]	; (8001708 <ADS1115+0x598>)
 80015d2:	f7ff fcc3 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t9", voltage[1]*3.0);
 80015d6:	4b46      	ldr	r3, [pc, #280]	; (80016f0 <ADS1115+0x580>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4946      	ldr	r1, [pc, #280]	; (80016f4 <ADS1115+0x584>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe fdbf 	bl	8000160 <__aeabi_fmul>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4619      	mov	r1, r3
 80015e6:	4849      	ldr	r0, [pc, #292]	; (800170c <ADS1115+0x59c>)
 80015e8:	f7ff fcb8 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t10", voltage[2]*3.0);
 80015ec:	4b40      	ldr	r3, [pc, #256]	; (80016f0 <ADS1115+0x580>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	4940      	ldr	r1, [pc, #256]	; (80016f4 <ADS1115+0x584>)
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7fe fdb4 	bl	8000160 <__aeabi_fmul>
 80015f8:	4603      	mov	r3, r0
 80015fa:	4619      	mov	r1, r3
 80015fc:	4844      	ldr	r0, [pc, #272]	; (8001710 <ADS1115+0x5a0>)
 80015fe:	f7ff fcad 	bl	8000f5c <NEXTION_SendString>
		NEXTION_SendString("t11", voltage[3]*3.0);
 8001602:	4b3b      	ldr	r3, [pc, #236]	; (80016f0 <ADS1115+0x580>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	493b      	ldr	r1, [pc, #236]	; (80016f4 <ADS1115+0x584>)
 8001608:	4618      	mov	r0, r3
 800160a:	f7fe fda9 	bl	8000160 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	4619      	mov	r1, r3
 8001612:	4840      	ldr	r0, [pc, #256]	; (8001714 <ADS1115+0x5a4>)
 8001614:	f7ff fca2 	bl	8000f5c <NEXTION_SendString>
}
 8001618:	e0a8      	b.n	800176c <ADS1115+0x5fc>
	}else if(ADS1115_ADDRESS == 0x4B){
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b4b      	cmp	r3, #75	; 0x4b
 800161e:	f040 80a5 	bne.w	800176c <ADS1115+0x5fc>
		if(current[0]<=0.2 ){
 8001622:	4b2d      	ldr	r3, [pc, #180]	; (80016d8 <ADS1115+0x568>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe ffb2 	bl	8000590 <__aeabi_f2d>
 800162c:	a328      	add	r3, pc, #160	; (adr r3, 80016d0 <ADS1115+0x560>)
 800162e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001632:	f7ff fa81 	bl	8000b38 <__aeabi_dcmple>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d00a      	beq.n	8001652 <ADS1115+0x4e2>
			current[0]=0;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <ADS1115+0x568>)
 800163e:	f04f 0200 	mov.w	r2, #0
 8001642:	601a      	str	r2, [r3, #0]
			NEXTION_SendString("t12", current[0]);
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <ADS1115+0x568>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4619      	mov	r1, r3
 800164a:	4833      	ldr	r0, [pc, #204]	; (8001718 <ADS1115+0x5a8>)
 800164c:	f7ff fc86 	bl	8000f5c <NEXTION_SendString>
 8001650:	e005      	b.n	800165e <ADS1115+0x4ee>
			NEXTION_SendString("t12", current[0]);
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <ADS1115+0x568>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4619      	mov	r1, r3
 8001658:	482f      	ldr	r0, [pc, #188]	; (8001718 <ADS1115+0x5a8>)
 800165a:	f7ff fc7f 	bl	8000f5c <NEXTION_SendString>
		if(current[1]<=0.2 ){
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <ADS1115+0x568>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	4618      	mov	r0, r3
 8001664:	f7fe ff94 	bl	8000590 <__aeabi_f2d>
 8001668:	a319      	add	r3, pc, #100	; (adr r3, 80016d0 <ADS1115+0x560>)
 800166a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166e:	f7ff fa63 	bl	8000b38 <__aeabi_dcmple>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d00a      	beq.n	800168e <ADS1115+0x51e>
			current[1]=0;
 8001678:	4b17      	ldr	r3, [pc, #92]	; (80016d8 <ADS1115+0x568>)
 800167a:	f04f 0200 	mov.w	r2, #0
 800167e:	605a      	str	r2, [r3, #4]
			NEXTION_SendString("t13", current[1]);
 8001680:	4b15      	ldr	r3, [pc, #84]	; (80016d8 <ADS1115+0x568>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	4619      	mov	r1, r3
 8001686:	4825      	ldr	r0, [pc, #148]	; (800171c <ADS1115+0x5ac>)
 8001688:	f7ff fc68 	bl	8000f5c <NEXTION_SendString>
 800168c:	e005      	b.n	800169a <ADS1115+0x52a>
			NEXTION_SendString("t13", current[1]);
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <ADS1115+0x568>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	4619      	mov	r1, r3
 8001694:	4821      	ldr	r0, [pc, #132]	; (800171c <ADS1115+0x5ac>)
 8001696:	f7ff fc61 	bl	8000f5c <NEXTION_SendString>
		if(current[2]<=0.2 ){
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <ADS1115+0x568>)
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	4618      	mov	r0, r3
 80016a0:	f7fe ff76 	bl	8000590 <__aeabi_f2d>
 80016a4:	a30a      	add	r3, pc, #40	; (adr r3, 80016d0 <ADS1115+0x560>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff fa45 	bl	8000b38 <__aeabi_dcmple>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d037      	beq.n	8001724 <ADS1115+0x5b4>
			current[2]=0;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <ADS1115+0x568>)
 80016b6:	f04f 0200 	mov.w	r2, #0
 80016ba:	609a      	str	r2, [r3, #8]
			NEXTION_SendString("t14", current[2]);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <ADS1115+0x568>)
 80016be:	689b      	ldr	r3, [r3, #8]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4817      	ldr	r0, [pc, #92]	; (8001720 <ADS1115+0x5b0>)
 80016c4:	f7ff fc4a 	bl	8000f5c <NEXTION_SendString>
 80016c8:	e032      	b.n	8001730 <ADS1115+0x5c0>
 80016ca:	bf00      	nop
 80016cc:	f3af 8000 	nop.w
 80016d0:	9999999a 	.word	0x9999999a
 80016d4:	3fc99999 	.word	0x3fc99999
 80016d8:	20000310 	.word	0x20000310
 80016dc:	08007a08 	.word	0x08007a08
 80016e0:	08007a0c 	.word	0x08007a0c
 80016e4:	08007a10 	.word	0x08007a10
 80016e8:	08007a14 	.word	0x08007a14
 80016ec:	08007a18 	.word	0x08007a18
 80016f0:	20000300 	.word	0x20000300
 80016f4:	40400000 	.word	0x40400000
 80016f8:	08007a1c 	.word	0x08007a1c
 80016fc:	08007a20 	.word	0x08007a20
 8001700:	08007a24 	.word	0x08007a24
 8001704:	08007a28 	.word	0x08007a28
 8001708:	08007a2c 	.word	0x08007a2c
 800170c:	08007a30 	.word	0x08007a30
 8001710:	08007a34 	.word	0x08007a34
 8001714:	08007a38 	.word	0x08007a38
 8001718:	08007a3c 	.word	0x08007a3c
 800171c:	08007a40 	.word	0x08007a40
 8001720:	08007a44 	.word	0x08007a44
			NEXTION_SendString("t14", current[2]);
 8001724:	4b16      	ldr	r3, [pc, #88]	; (8001780 <ADS1115+0x610>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	4619      	mov	r1, r3
 800172a:	4816      	ldr	r0, [pc, #88]	; (8001784 <ADS1115+0x614>)
 800172c:	f7ff fc16 	bl	8000f5c <NEXTION_SendString>
		if(current[3]<=0.2 ){
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <ADS1115+0x610>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff2b 	bl	8000590 <__aeabi_f2d>
 800173a:	a30f      	add	r3, pc, #60	; (adr r3, 8001778 <ADS1115+0x608>)
 800173c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001740:	f7ff f9fa 	bl	8000b38 <__aeabi_dcmple>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00a      	beq.n	8001760 <ADS1115+0x5f0>
			current[3]=0;
 800174a:	4b0d      	ldr	r3, [pc, #52]	; (8001780 <ADS1115+0x610>)
 800174c:	f04f 0200 	mov.w	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
			NEXTION_SendString("t15", current[3]);
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <ADS1115+0x610>)
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	4619      	mov	r1, r3
 8001758:	480b      	ldr	r0, [pc, #44]	; (8001788 <ADS1115+0x618>)
 800175a:	f7ff fbff 	bl	8000f5c <NEXTION_SendString>
}
 800175e:	e005      	b.n	800176c <ADS1115+0x5fc>
			NEXTION_SendString("t15", current[3]);
 8001760:	4b07      	ldr	r3, [pc, #28]	; (8001780 <ADS1115+0x610>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4619      	mov	r1, r3
 8001766:	4808      	ldr	r0, [pc, #32]	; (8001788 <ADS1115+0x618>)
 8001768:	f7ff fbf8 	bl	8000f5c <NEXTION_SendString>
}
 800176c:	bf00      	nop
 800176e:	3710      	adds	r7, #16
 8001770:	46bd      	mov	sp, r7
 8001772:	bdb0      	pop	{r4, r5, r7, pc}
 8001774:	f3af 8000 	nop.w
 8001778:	9999999a 	.word	0x9999999a
 800177c:	3fc99999 	.word	0x3fc99999
 8001780:	20000310 	.word	0x20000310
 8001784:	08007a44 	.word	0x08007a44
 8001788:	08007a48 	.word	0x08007a48

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b090      	sub	sp, #64	; 0x40
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0318 	add.w	r3, r7, #24
 8001796:	2228      	movs	r2, #40	; 0x28
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f003 fa3e 	bl	8004c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	1d3b      	adds	r3, r7, #4
 80017a2:	2200      	movs	r2, #0
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	605a      	str	r2, [r3, #4]
 80017a8:	609a      	str	r2, [r3, #8]
 80017aa:	60da      	str	r2, [r3, #12]
 80017ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017ae:	2301      	movs	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017bc:	2301      	movs	r3, #1
 80017be:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c0:	2302      	movs	r3, #2
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017d0:	f107 0318 	add.w	r3, r7, #24
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 ff6f 	bl	80036b8 <HAL_RCC_OscConfig>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80017e0:	f000 f940 	bl	8001a64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017e4:	230f      	movs	r3, #15
 80017e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017e8:	2302      	movs	r3, #2
 80017ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017fa:	1d3b      	adds	r3, r7, #4
 80017fc:	2102      	movs	r1, #2
 80017fe:	4618      	mov	r0, r3
 8001800:	f002 f9dc 	bl	8003bbc <HAL_RCC_ClockConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800180a:	f000 f92b 	bl	8001a64 <Error_Handler>
  }
}
 800180e:	bf00      	nop
 8001810:	3740      	adds	r7, #64	; 0x40
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <MX_I2C1_Init+0x50>)
 800181e:	4a13      	ldr	r2, [pc, #76]	; (800186c <MX_I2C1_Init+0x54>)
 8001820:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001822:	4b11      	ldr	r3, [pc, #68]	; (8001868 <MX_I2C1_Init+0x50>)
 8001824:	4a12      	ldr	r2, [pc, #72]	; (8001870 <MX_I2C1_Init+0x58>)
 8001826:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001828:	4b0f      	ldr	r3, [pc, #60]	; (8001868 <MX_I2C1_Init+0x50>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800182e:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <MX_I2C1_Init+0x50>)
 8001830:	2200      	movs	r2, #0
 8001832:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001834:	4b0c      	ldr	r3, [pc, #48]	; (8001868 <MX_I2C1_Init+0x50>)
 8001836:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800183c:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <MX_I2C1_Init+0x50>)
 800183e:	2200      	movs	r2, #0
 8001840:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <MX_I2C1_Init+0x50>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001848:	4b07      	ldr	r3, [pc, #28]	; (8001868 <MX_I2C1_Init+0x50>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800184e:	4b06      	ldr	r3, [pc, #24]	; (8001868 <MX_I2C1_Init+0x50>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001854:	4804      	ldr	r0, [pc, #16]	; (8001868 <MX_I2C1_Init+0x50>)
 8001856:	f000 fefb 	bl	8002650 <HAL_I2C_Init>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001860:	f000 f900 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001864:	bf00      	nop
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000200 	.word	0x20000200
 800186c:	40005400 	.word	0x40005400
 8001870:	000186a0 	.word	0x000186a0

08001874 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <MX_I2C2_Init+0x50>)
 800187a:	4a13      	ldr	r2, [pc, #76]	; (80018c8 <MX_I2C2_Init+0x54>)
 800187c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800187e:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001880:	4a12      	ldr	r2, [pc, #72]	; (80018cc <MX_I2C2_Init+0x58>)
 8001882:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001884:	4b0f      	ldr	r3, [pc, #60]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 60;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_I2C2_Init+0x50>)
 800188c:	223c      	movs	r2, #60	; 0x3c
 800188e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_I2C2_Init+0x50>)
 8001892:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001896:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001898:	4b0a      	ldr	r3, [pc, #40]	; (80018c4 <MX_I2C2_Init+0x50>)
 800189a:	2200      	movs	r2, #0
 800189c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80018a4:	4b07      	ldr	r3, [pc, #28]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018a6:	2240      	movs	r2, #64	; 0x40
 80018a8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018aa:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80018b0:	4804      	ldr	r0, [pc, #16]	; (80018c4 <MX_I2C2_Init+0x50>)
 80018b2:	f000 fecd 	bl	8002650 <HAL_I2C_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80018bc:	f000 f8d2 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80018c0:	bf00      	nop
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	20000254 	.word	0x20000254
 80018c8:	40005800 	.word	0x40005800
 80018cc:	000186a0 	.word	0x000186a0

080018d0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018d4:	4b11      	ldr	r3, [pc, #68]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018d6:	4a12      	ldr	r2, [pc, #72]	; (8001920 <MX_USART2_UART_Init+0x50>)
 80018d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018e2:	4b0e      	ldr	r3, [pc, #56]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ee:	4b0b      	ldr	r3, [pc, #44]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018f4:	4b09      	ldr	r3, [pc, #36]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018f6:	220c      	movs	r2, #12
 80018f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fa:	4b08      	ldr	r3, [pc, #32]	; (800191c <MX_USART2_UART_Init+0x4c>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <MX_USART2_UART_Init+0x4c>)
 8001902:	2200      	movs	r2, #0
 8001904:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001906:	4805      	ldr	r0, [pc, #20]	; (800191c <MX_USART2_UART_Init+0x4c>)
 8001908:	f002 fae6 	bl	8003ed8 <HAL_UART_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001912:	f000 f8a7 	bl	8001a64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	200002a8 	.word	0x200002a8
 8001920:	40004400 	.word	0x40004400

08001924 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b088      	sub	sp, #32
 8001928:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192a:	f107 0310 	add.w	r3, r7, #16
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001938:	4b46      	ldr	r3, [pc, #280]	; (8001a54 <MX_GPIO_Init+0x130>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	4a45      	ldr	r2, [pc, #276]	; (8001a54 <MX_GPIO_Init+0x130>)
 800193e:	f043 0310 	orr.w	r3, r3, #16
 8001942:	6193      	str	r3, [r2, #24]
 8001944:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	f003 0310 	and.w	r3, r3, #16
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001950:	4b40      	ldr	r3, [pc, #256]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	4a3f      	ldr	r2, [pc, #252]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001956:	f043 0320 	orr.w	r3, r3, #32
 800195a:	6193      	str	r3, [r2, #24]
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <MX_GPIO_Init+0x130>)
 800195e:	699b      	ldr	r3, [r3, #24]
 8001960:	f003 0320 	and.w	r3, r3, #32
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	4b3a      	ldr	r3, [pc, #232]	; (8001a54 <MX_GPIO_Init+0x130>)
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	4a39      	ldr	r2, [pc, #228]	; (8001a54 <MX_GPIO_Init+0x130>)
 800196e:	f043 0304 	orr.w	r3, r3, #4
 8001972:	6193      	str	r3, [r2, #24]
 8001974:	4b37      	ldr	r3, [pc, #220]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	f003 0304 	and.w	r3, r3, #4
 800197c:	607b      	str	r3, [r7, #4]
 800197e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	4a33      	ldr	r2, [pc, #204]	; (8001a54 <MX_GPIO_Init+0x130>)
 8001986:	f043 0308 	orr.w	r3, r3, #8
 800198a:	6193      	str	r3, [r2, #24]
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <MX_GPIO_Init+0x130>)
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	603b      	str	r3, [r7, #0]
 8001996:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001998:	2200      	movs	r2, #0
 800199a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199e:	482e      	ldr	r0, [pc, #184]	; (8001a58 <MX_GPIO_Init+0x134>)
 80019a0:	f000 fe3e 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80019a4:	2200      	movs	r2, #0
 80019a6:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80019aa:	482c      	ldr	r0, [pc, #176]	; (8001a5c <MX_GPIO_Init+0x138>)
 80019ac:	f000 fe38 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80019b0:	2200      	movs	r2, #0
 80019b2:	f44f 4119 	mov.w	r1, #39168	; 0x9900
 80019b6:	482a      	ldr	r0, [pc, #168]	; (8001a60 <MX_GPIO_Init+0x13c>)
 80019b8:	f000 fe32 	bl	8002620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c2:	2301      	movs	r3, #1
 80019c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ca:	2302      	movs	r3, #2
 80019cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ce:	f107 0310 	add.w	r3, r7, #16
 80019d2:	4619      	mov	r1, r3
 80019d4:	4820      	ldr	r0, [pc, #128]	; (8001a58 <MX_GPIO_Init+0x134>)
 80019d6:	f000 fc9f 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019da:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80019de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e0:	2301      	movs	r3, #1
 80019e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e8:	2302      	movs	r3, #2
 80019ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ec:	f107 0310 	add.w	r3, r7, #16
 80019f0:	4619      	mov	r1, r3
 80019f2:	481a      	ldr	r0, [pc, #104]	; (8001a5c <MX_GPIO_Init+0x138>)
 80019f4:	f000 fc90 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 80019f8:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 80019fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019fe:	2301      	movs	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a06:	2302      	movs	r3, #2
 8001a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a0a:	f107 0310 	add.w	r3, r7, #16
 8001a0e:	4619      	mov	r1, r3
 8001a10:	4813      	ldr	r0, [pc, #76]	; (8001a60 <MX_GPIO_Init+0x13c>)
 8001a12:	f000 fc81 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_GPIO_Init+0x13c>)
 8001a2c:	f000 fc74 	bl	8002318 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3e:	f107 0310 	add.w	r3, r7, #16
 8001a42:	4619      	mov	r1, r3
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <MX_GPIO_Init+0x13c>)
 8001a46:	f000 fc67 	bl	8002318 <HAL_GPIO_Init>

}
 8001a4a:	bf00      	nop
 8001a4c:	3720      	adds	r7, #32
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40021000 	.word	0x40021000
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40010c00 	.word	0x40010c00
 8001a60:	40010800 	.word	0x40010800

08001a64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a68:	b672      	cpsid	i
}
 8001a6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <Error_Handler+0x8>
	...

08001a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	; (8001acc <HAL_MspInit+0x5c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	; (8001acc <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <HAL_MspInit+0x5c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <HAL_MspInit+0x60>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4a04      	ldr	r2, [pc, #16]	; (8001ad0 <HAL_MspInit+0x60>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0318 	add.w	r3, r7, #24
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <HAL_I2C_MspInit+0xc8>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d124      	bne.n	8001b3e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af4:	4b2a      	ldr	r3, [pc, #168]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a29      	ldr	r2, [pc, #164]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001afa:	f043 0308 	orr.w	r3, r3, #8
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b27      	ldr	r3, [pc, #156]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f003 0308 	and.w	r3, r3, #8
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b0c:	23c0      	movs	r3, #192	; 0xc0
 8001b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b14:	2303      	movs	r3, #3
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b18:	f107 0318 	add.w	r3, r7, #24
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4821      	ldr	r0, [pc, #132]	; (8001ba4 <HAL_I2C_MspInit+0xd0>)
 8001b20:	f000 fbfa 	bl	8002318 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b24:	4b1e      	ldr	r3, [pc, #120]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b26:	69db      	ldr	r3, [r3, #28]
 8001b28:	4a1d      	ldr	r2, [pc, #116]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2e:	61d3      	str	r3, [r2, #28]
 8001b30:	4b1b      	ldr	r3, [pc, #108]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b32:	69db      	ldr	r3, [r3, #28]
 8001b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001b3c:	e029      	b.n	8001b92 <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a19      	ldr	r2, [pc, #100]	; (8001ba8 <HAL_I2C_MspInit+0xd4>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d124      	bne.n	8001b92 <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b48:	4b15      	ldr	r3, [pc, #84]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b4a:	699b      	ldr	r3, [r3, #24]
 8001b4c:	4a14      	ldr	r2, [pc, #80]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b4e:	f043 0308 	orr.w	r3, r3, #8
 8001b52:	6193      	str	r3, [r2, #24]
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b56:	699b      	ldr	r3, [r3, #24]
 8001b58:	f003 0308 	and.w	r3, r3, #8
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001b60:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001b64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b66:	2312      	movs	r3, #18
 8001b68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6e:	f107 0318 	add.w	r3, r7, #24
 8001b72:	4619      	mov	r1, r3
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <HAL_I2C_MspInit+0xd0>)
 8001b76:	f000 fbcf 	bl	8002318 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001b7a:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	4a08      	ldr	r2, [pc, #32]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b84:	61d3      	str	r3, [r2, #28]
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_I2C_MspInit+0xcc>)
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
}
 8001b92:	bf00      	nop
 8001b94:	3728      	adds	r7, #40	; 0x28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	40005400 	.word	0x40005400
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	40010c00 	.word	0x40010c00
 8001ba8:	40005800 	.word	0x40005800

08001bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b088      	sub	sp, #32
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2200      	movs	r2, #0
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	605a      	str	r2, [r3, #4]
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1f      	ldr	r2, [pc, #124]	; (8001c44 <HAL_UART_MspInit+0x98>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d137      	bne.n	8001c3c <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001bce:	69db      	ldr	r3, [r3, #28]
 8001bd0:	4a1d      	ldr	r2, [pc, #116]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd6:	61d3      	str	r3, [r2, #28]
 8001bd8:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001bda:	69db      	ldr	r3, [r3, #28]
 8001bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be4:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001be6:	699b      	ldr	r3, [r3, #24]
 8001be8:	4a17      	ldr	r2, [pc, #92]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001bea:	f043 0304 	orr.w	r3, r3, #4
 8001bee:	6193      	str	r3, [r2, #24]
 8001bf0:	4b15      	ldr	r3, [pc, #84]	; (8001c48 <HAL_UART_MspInit+0x9c>)
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0304 	and.w	r3, r3, #4
 8001bf8:	60bb      	str	r3, [r7, #8]
 8001bfa:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001bfc:	2304      	movs	r3, #4
 8001bfe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c04:	2303      	movs	r3, #3
 8001c06:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c08:	f107 0310 	add.w	r3, r7, #16
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	480f      	ldr	r0, [pc, #60]	; (8001c4c <HAL_UART_MspInit+0xa0>)
 8001c10:	f000 fb82 	bl	8002318 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001c14:	2308      	movs	r3, #8
 8001c16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c20:	f107 0310 	add.w	r3, r7, #16
 8001c24:	4619      	mov	r1, r3
 8001c26:	4809      	ldr	r0, [pc, #36]	; (8001c4c <HAL_UART_MspInit+0xa0>)
 8001c28:	f000 fb76 	bl	8002318 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	2100      	movs	r1, #0
 8001c30:	2026      	movs	r0, #38	; 0x26
 8001c32:	f000 fa88 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c36:	2026      	movs	r0, #38	; 0x26
 8001c38:	f000 faa1 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c3c:	bf00      	nop
 8001c3e:	3720      	adds	r7, #32
 8001c40:	46bd      	mov	sp, r7
 8001c42:	bd80      	pop	{r7, pc}
 8001c44:	40004400 	.word	0x40004400
 8001c48:	40021000 	.word	0x40021000
 8001c4c:	40010800 	.word	0x40010800

08001c50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <NMI_Handler+0x4>

08001c56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c5a:	e7fe      	b.n	8001c5a <HardFault_Handler+0x4>

08001c5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c60:	e7fe      	b.n	8001c60 <MemManage_Handler+0x4>

08001c62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c62:	b480      	push	{r7}
 8001c64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <BusFault_Handler+0x4>

08001c68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c6c:	e7fe      	b.n	8001c6c <UsageFault_Handler+0x4>

08001c6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bc80      	pop	{r7}
 8001c78:	4770      	bx	lr

08001c7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bc80      	pop	{r7}
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c92:	b580      	push	{r7, lr}
 8001c94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c96:	f000 f93f 	bl	8001f18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <USART2_IRQHandler+0x10>)
 8001ca6:	f002 fa0f 	bl	80040c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200002a8 	.word	0x200002a8

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr

08001cc2 <_kill>:

int _kill(int pid, int sig)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ccc:	f002 ff7c 	bl	8004bc8 <__errno>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2216      	movs	r2, #22
 8001cd4:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3708      	adds	r7, #8
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <_exit>:

void _exit (int status)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cea:	f04f 31ff 	mov.w	r1, #4294967295
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ffe7 	bl	8001cc2 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf4:	e7fe      	b.n	8001cf4 <_exit+0x12>

08001cf6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	e00a      	b.n	8001d1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d08:	f3af 8000 	nop.w
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1c5a      	adds	r2, r3, #1
 8001d12:	60ba      	str	r2, [r7, #8]
 8001d14:	b2ca      	uxtb	r2, r1
 8001d16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	3301      	adds	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	dbf0      	blt.n	8001d08 <_read+0x12>
  }

  return len;
 8001d26:	687b      	ldr	r3, [r7, #4]
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3718      	adds	r7, #24
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e009      	b.n	8001d56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d42:	68bb      	ldr	r3, [r7, #8]
 8001d44:	1c5a      	adds	r2, r3, #1
 8001d46:	60ba      	str	r2, [r7, #8]
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	697a      	ldr	r2, [r7, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	dbf1      	blt.n	8001d42 <_write+0x12>
  }
  return len;
 8001d5e:	687b      	ldr	r3, [r7, #4]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_close>:

int _close(int file)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr

08001d7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	370c      	adds	r7, #12
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bc80      	pop	{r7}
 8001d9a:	4770      	bx	lr

08001d9c <_isatty>:

int _isatty(int file)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001da4:	2301      	movs	r3, #1
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001dd0:	4a14      	ldr	r2, [pc, #80]	; (8001e24 <_sbrk+0x5c>)
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <_sbrk+0x60>)
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ddc:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <_sbrk+0x64>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <_sbrk+0x64>)
 8001de6:	4a12      	ldr	r2, [pc, #72]	; (8001e30 <_sbrk+0x68>)
 8001de8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dea:	4b10      	ldr	r3, [pc, #64]	; (8001e2c <_sbrk+0x64>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4413      	add	r3, r2
 8001df2:	693a      	ldr	r2, [r7, #16]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d207      	bcs.n	8001e08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001df8:	f002 fee6 	bl	8004bc8 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	220c      	movs	r2, #12
 8001e00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
 8001e06:	e009      	b.n	8001e1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <_sbrk+0x64>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e0e:	4b07      	ldr	r3, [pc, #28]	; (8001e2c <_sbrk+0x64>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4413      	add	r3, r2
 8001e16:	4a05      	ldr	r2, [pc, #20]	; (8001e2c <_sbrk+0x64>)
 8001e18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
}
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	3718      	adds	r7, #24
 8001e20:	46bd      	mov	sp, r7
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	20005000 	.word	0x20005000
 8001e28:	00000400 	.word	0x00000400
 8001e2c:	20000320 	.word	0x20000320
 8001e30:	20000338 	.word	0x20000338

08001e34 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e38:	bf00      	nop
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e40:	f7ff fff8 	bl	8001e34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001e46:	490c      	ldr	r1, [pc, #48]	; (8001e78 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001e4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e4c:	e002      	b.n	8001e54 <LoopCopyDataInit>

08001e4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e52:	3304      	adds	r3, #4

08001e54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e58:	d3f9      	bcc.n	8001e4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e5a:	4a09      	ldr	r2, [pc, #36]	; (8001e80 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001e5c:	4c09      	ldr	r4, [pc, #36]	; (8001e84 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e60:	e001      	b.n	8001e66 <LoopFillZerobss>

08001e62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e64:	3204      	adds	r2, #4

08001e66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e68:	d3fb      	bcc.n	8001e62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e6a:	f002 feb3 	bl	8004bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e6e:	f7ff f81d 	bl	8000eac <main>
  bx lr
 8001e72:	4770      	bx	lr
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8001e7c:	08007e5c 	.word	0x08007e5c
  ldr r2, =_sbss
 8001e80:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001e84:	20000338 	.word	0x20000338

08001e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_2_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x28>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x28>)
 8001e96:	f043 0310 	orr.w	r3, r3, #16
 8001e9a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f947 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	200f      	movs	r0, #15
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fde2 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40022000 	.word	0x40022000

08001eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f95f 	bl	800219a <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ef4:	f000 f927 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000008 	.word	0x20000008
 8001f10:	20000010 	.word	0x20000010
 8001f14:	2000000c 	.word	0x2000000c

08001f18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b05      	ldr	r3, [pc, #20]	; (8001f34 <HAL_IncTick+0x1c>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b05      	ldr	r3, [pc, #20]	; (8001f38 <HAL_IncTick+0x20>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a03      	ldr	r2, [pc, #12]	; (8001f38 <HAL_IncTick+0x20>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bc80      	pop	{r7}
 8001f32:	4770      	bx	lr
 8001f34:	20000010 	.word	0x20000010
 8001f38:	20000324 	.word	0x20000324

08001f3c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f40:	4b02      	ldr	r3, [pc, #8]	; (8001f4c <HAL_GetTick+0x10>)
 8001f42:	681b      	ldr	r3, [r3, #0]
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr
 8001f4c:	20000324 	.word	0x20000324

08001f50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f58:	f7ff fff0 	bl	8001f3c <HAL_GetTick>
 8001f5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f68:	d005      	beq.n	8001f76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f6a:	4b0a      	ldr	r3, [pc, #40]	; (8001f94 <HAL_Delay+0x44>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4413      	add	r3, r2
 8001f74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f76:	bf00      	nop
 8001f78:	f7ff ffe0 	bl	8001f3c <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	68fa      	ldr	r2, [r7, #12]
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d8f7      	bhi.n	8001f78 <HAL_Delay+0x28>
  {
  }
}
 8001f88:	bf00      	nop
 8001f8a:	bf00      	nop
 8001f8c:	3710      	adds	r7, #16
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000010 	.word	0x20000010

08001f98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f003 0307 	and.w	r3, r3, #7
 8001fa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa8:	4b0c      	ldr	r3, [pc, #48]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fca:	4a04      	ldr	r2, [pc, #16]	; (8001fdc <__NVIC_SetPriorityGrouping+0x44>)
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	60d3      	str	r3, [r2, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	3714      	adds	r7, #20
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	e000ed00 	.word	0xe000ed00

08001fe0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe4:	4b04      	ldr	r3, [pc, #16]	; (8001ff8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	f003 0307 	and.w	r3, r3, #7
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bc80      	pop	{r7}
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	e000ed00 	.word	0xe000ed00

08001ffc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	2b00      	cmp	r3, #0
 800200c:	db0b      	blt.n	8002026 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800200e:	79fb      	ldrb	r3, [r7, #7]
 8002010:	f003 021f 	and.w	r2, r3, #31
 8002014:	4906      	ldr	r1, [pc, #24]	; (8002030 <__NVIC_EnableIRQ+0x34>)
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	2001      	movs	r0, #1
 800201e:	fa00 f202 	lsl.w	r2, r0, r2
 8002022:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	bc80      	pop	{r7}
 800202e:	4770      	bx	lr
 8002030:	e000e100 	.word	0xe000e100

08002034 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002040:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002044:	2b00      	cmp	r3, #0
 8002046:	db0a      	blt.n	800205e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	b2da      	uxtb	r2, r3
 800204c:	490c      	ldr	r1, [pc, #48]	; (8002080 <__NVIC_SetPriority+0x4c>)
 800204e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002052:	0112      	lsls	r2, r2, #4
 8002054:	b2d2      	uxtb	r2, r2
 8002056:	440b      	add	r3, r1
 8002058:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800205c:	e00a      	b.n	8002074 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	b2da      	uxtb	r2, r3
 8002062:	4908      	ldr	r1, [pc, #32]	; (8002084 <__NVIC_SetPriority+0x50>)
 8002064:	79fb      	ldrb	r3, [r7, #7]
 8002066:	f003 030f 	and.w	r3, r3, #15
 800206a:	3b04      	subs	r3, #4
 800206c:	0112      	lsls	r2, r2, #4
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	440b      	add	r3, r1
 8002072:	761a      	strb	r2, [r3, #24]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000e100 	.word	0xe000e100
 8002084:	e000ed00 	.word	0xe000ed00

08002088 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002088:	b480      	push	{r7}
 800208a:	b089      	sub	sp, #36	; 0x24
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	f1c3 0307 	rsb	r3, r3, #7
 80020a2:	2b04      	cmp	r3, #4
 80020a4:	bf28      	it	cs
 80020a6:	2304      	movcs	r3, #4
 80020a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	3304      	adds	r3, #4
 80020ae:	2b06      	cmp	r3, #6
 80020b0:	d902      	bls.n	80020b8 <NVIC_EncodePriority+0x30>
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3b03      	subs	r3, #3
 80020b6:	e000      	b.n	80020ba <NVIC_EncodePriority+0x32>
 80020b8:	2300      	movs	r3, #0
 80020ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020bc:	f04f 32ff 	mov.w	r2, #4294967295
 80020c0:	69bb      	ldr	r3, [r7, #24]
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43da      	mvns	r2, r3
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	401a      	ands	r2, r3
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d0:	f04f 31ff 	mov.w	r1, #4294967295
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	fa01 f303 	lsl.w	r3, r1, r3
 80020da:	43d9      	mvns	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e0:	4313      	orrs	r3, r2
         );
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3724      	adds	r7, #36	; 0x24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bc80      	pop	{r7}
 80020ea:	4770      	bx	lr

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff90 	bl	8002034 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff2d 	bl	8001f98 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff42 	bl	8001fe0 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff90 	bl	8002088 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5f 	bl	8002034 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff35 	bl	8001ffc <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b085      	sub	sp, #20
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b02      	cmp	r3, #2
 80021c8:	d008      	beq.n	80021dc <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2204      	movs	r2, #4
 80021ce:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e020      	b.n	800221e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f022 020e 	bic.w	r2, r2, #14
 80021ea:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002204:	2101      	movs	r1, #1
 8002206:	fa01 f202 	lsl.w	r2, r1, r2
 800220a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800221c:	7bfb      	ldrb	r3, [r7, #15]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3714      	adds	r7, #20
 8002222:	46bd      	mov	sp, r7
 8002224:	bc80      	pop	{r7}
 8002226:	4770      	bx	lr

08002228 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d005      	beq.n	800224c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2204      	movs	r2, #4
 8002244:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
 800224a:	e051      	b.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 020e 	bic.w	r2, r2, #14
 800225a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0201 	bic.w	r2, r2, #1
 800226a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	; (80022fc <HAL_DMA_Abort_IT+0xd4>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d029      	beq.n	80022ca <HAL_DMA_Abort_IT+0xa2>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a21      	ldr	r2, [pc, #132]	; (8002300 <HAL_DMA_Abort_IT+0xd8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d022      	beq.n	80022c6 <HAL_DMA_Abort_IT+0x9e>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a1f      	ldr	r2, [pc, #124]	; (8002304 <HAL_DMA_Abort_IT+0xdc>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d01a      	beq.n	80022c0 <HAL_DMA_Abort_IT+0x98>
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a1e      	ldr	r2, [pc, #120]	; (8002308 <HAL_DMA_Abort_IT+0xe0>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d012      	beq.n	80022ba <HAL_DMA_Abort_IT+0x92>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a1c      	ldr	r2, [pc, #112]	; (800230c <HAL_DMA_Abort_IT+0xe4>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d00a      	beq.n	80022b4 <HAL_DMA_Abort_IT+0x8c>
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_DMA_Abort_IT+0xe8>)
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d102      	bne.n	80022ae <HAL_DMA_Abort_IT+0x86>
 80022a8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80022ac:	e00e      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022b2:	e00b      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80022b8:	e008      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022be:	e005      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022c4:	e002      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022c6:	2310      	movs	r3, #16
 80022c8:	e000      	b.n	80022cc <HAL_DMA_Abort_IT+0xa4>
 80022ca:	2301      	movs	r3, #1
 80022cc:	4a11      	ldr	r2, [pc, #68]	; (8002314 <HAL_DMA_Abort_IT+0xec>)
 80022ce:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d003      	beq.n	80022f0 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	4798      	blx	r3
    } 
  }
  return status;
 80022f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40020008 	.word	0x40020008
 8002300:	4002001c 	.word	0x4002001c
 8002304:	40020030 	.word	0x40020030
 8002308:	40020044 	.word	0x40020044
 800230c:	40020058 	.word	0x40020058
 8002310:	4002006c 	.word	0x4002006c
 8002314:	40020000 	.word	0x40020000

08002318 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002318:	b480      	push	{r7}
 800231a:	b08b      	sub	sp, #44	; 0x2c
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e169      	b.n	8002600 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800232c:	2201      	movs	r2, #1
 800232e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002330:	fa02 f303 	lsl.w	r3, r2, r3
 8002334:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	429a      	cmp	r2, r3
 8002346:	f040 8158 	bne.w	80025fa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	4a9a      	ldr	r2, [pc, #616]	; (80025b8 <HAL_GPIO_Init+0x2a0>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d05e      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
 8002354:	4a98      	ldr	r2, [pc, #608]	; (80025b8 <HAL_GPIO_Init+0x2a0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d875      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 800235a:	4a98      	ldr	r2, [pc, #608]	; (80025bc <HAL_GPIO_Init+0x2a4>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d058      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
 8002360:	4a96      	ldr	r2, [pc, #600]	; (80025bc <HAL_GPIO_Init+0x2a4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d86f      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 8002366:	4a96      	ldr	r2, [pc, #600]	; (80025c0 <HAL_GPIO_Init+0x2a8>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d052      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
 800236c:	4a94      	ldr	r2, [pc, #592]	; (80025c0 <HAL_GPIO_Init+0x2a8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d869      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 8002372:	4a94      	ldr	r2, [pc, #592]	; (80025c4 <HAL_GPIO_Init+0x2ac>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d04c      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
 8002378:	4a92      	ldr	r2, [pc, #584]	; (80025c4 <HAL_GPIO_Init+0x2ac>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d863      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 800237e:	4a92      	ldr	r2, [pc, #584]	; (80025c8 <HAL_GPIO_Init+0x2b0>)
 8002380:	4293      	cmp	r3, r2
 8002382:	d046      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
 8002384:	4a90      	ldr	r2, [pc, #576]	; (80025c8 <HAL_GPIO_Init+0x2b0>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d85d      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 800238a:	2b12      	cmp	r3, #18
 800238c:	d82a      	bhi.n	80023e4 <HAL_GPIO_Init+0xcc>
 800238e:	2b12      	cmp	r3, #18
 8002390:	d859      	bhi.n	8002446 <HAL_GPIO_Init+0x12e>
 8002392:	a201      	add	r2, pc, #4	; (adr r2, 8002398 <HAL_GPIO_Init+0x80>)
 8002394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002398:	08002413 	.word	0x08002413
 800239c:	080023ed 	.word	0x080023ed
 80023a0:	080023ff 	.word	0x080023ff
 80023a4:	08002441 	.word	0x08002441
 80023a8:	08002447 	.word	0x08002447
 80023ac:	08002447 	.word	0x08002447
 80023b0:	08002447 	.word	0x08002447
 80023b4:	08002447 	.word	0x08002447
 80023b8:	08002447 	.word	0x08002447
 80023bc:	08002447 	.word	0x08002447
 80023c0:	08002447 	.word	0x08002447
 80023c4:	08002447 	.word	0x08002447
 80023c8:	08002447 	.word	0x08002447
 80023cc:	08002447 	.word	0x08002447
 80023d0:	08002447 	.word	0x08002447
 80023d4:	08002447 	.word	0x08002447
 80023d8:	08002447 	.word	0x08002447
 80023dc:	080023f5 	.word	0x080023f5
 80023e0:	08002409 	.word	0x08002409
 80023e4:	4a79      	ldr	r2, [pc, #484]	; (80025cc <HAL_GPIO_Init+0x2b4>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d013      	beq.n	8002412 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80023ea:	e02c      	b.n	8002446 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	623b      	str	r3, [r7, #32]
          break;
 80023f2:	e029      	b.n	8002448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	3304      	adds	r3, #4
 80023fa:	623b      	str	r3, [r7, #32]
          break;
 80023fc:	e024      	b.n	8002448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	3308      	adds	r3, #8
 8002404:	623b      	str	r3, [r7, #32]
          break;
 8002406:	e01f      	b.n	8002448 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	330c      	adds	r3, #12
 800240e:	623b      	str	r3, [r7, #32]
          break;
 8002410:	e01a      	b.n	8002448 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d102      	bne.n	8002420 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800241a:	2304      	movs	r3, #4
 800241c:	623b      	str	r3, [r7, #32]
          break;
 800241e:	e013      	b.n	8002448 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d105      	bne.n	8002434 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002428:	2308      	movs	r3, #8
 800242a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69fa      	ldr	r2, [r7, #28]
 8002430:	611a      	str	r2, [r3, #16]
          break;
 8002432:	e009      	b.n	8002448 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002434:	2308      	movs	r3, #8
 8002436:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69fa      	ldr	r2, [r7, #28]
 800243c:	615a      	str	r2, [r3, #20]
          break;
 800243e:	e003      	b.n	8002448 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
          break;
 8002444:	e000      	b.n	8002448 <HAL_GPIO_Init+0x130>
          break;
 8002446:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2bff      	cmp	r3, #255	; 0xff
 800244c:	d801      	bhi.n	8002452 <HAL_GPIO_Init+0x13a>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	e001      	b.n	8002456 <HAL_GPIO_Init+0x13e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	3304      	adds	r3, #4
 8002456:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	2bff      	cmp	r3, #255	; 0xff
 800245c:	d802      	bhi.n	8002464 <HAL_GPIO_Init+0x14c>
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	e002      	b.n	800246a <HAL_GPIO_Init+0x152>
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	3b08      	subs	r3, #8
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	210f      	movs	r1, #15
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	fa01 f303 	lsl.w	r3, r1, r3
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	6a39      	ldr	r1, [r7, #32]
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	fa01 f303 	lsl.w	r3, r1, r3
 8002484:	431a      	orrs	r2, r3
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80b1 	beq.w	80025fa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002498:	4b4d      	ldr	r3, [pc, #308]	; (80025d0 <HAL_GPIO_Init+0x2b8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a4c      	ldr	r2, [pc, #304]	; (80025d0 <HAL_GPIO_Init+0x2b8>)
 800249e:	f043 0301 	orr.w	r3, r3, #1
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b4a      	ldr	r3, [pc, #296]	; (80025d0 <HAL_GPIO_Init+0x2b8>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80024b0:	4a48      	ldr	r2, [pc, #288]	; (80025d4 <HAL_GPIO_Init+0x2bc>)
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	089b      	lsrs	r3, r3, #2
 80024b6:	3302      	adds	r3, #2
 80024b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024bc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	220f      	movs	r2, #15
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a40      	ldr	r2, [pc, #256]	; (80025d8 <HAL_GPIO_Init+0x2c0>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d013      	beq.n	8002504 <HAL_GPIO_Init+0x1ec>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a3f      	ldr	r2, [pc, #252]	; (80025dc <HAL_GPIO_Init+0x2c4>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d00d      	beq.n	8002500 <HAL_GPIO_Init+0x1e8>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a3e      	ldr	r2, [pc, #248]	; (80025e0 <HAL_GPIO_Init+0x2c8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d007      	beq.n	80024fc <HAL_GPIO_Init+0x1e4>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a3d      	ldr	r2, [pc, #244]	; (80025e4 <HAL_GPIO_Init+0x2cc>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <HAL_GPIO_Init+0x1e0>
 80024f4:	2303      	movs	r3, #3
 80024f6:	e006      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024f8:	2304      	movs	r3, #4
 80024fa:	e004      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 80024fc:	2302      	movs	r3, #2
 80024fe:	e002      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 8002500:	2301      	movs	r3, #1
 8002502:	e000      	b.n	8002506 <HAL_GPIO_Init+0x1ee>
 8002504:	2300      	movs	r3, #0
 8002506:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002508:	f002 0203 	and.w	r2, r2, #3
 800250c:	0092      	lsls	r2, r2, #2
 800250e:	4093      	lsls	r3, r2
 8002510:	68fa      	ldr	r2, [r7, #12]
 8002512:	4313      	orrs	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002516:	492f      	ldr	r1, [pc, #188]	; (80025d4 <HAL_GPIO_Init+0x2bc>)
 8002518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251a:	089b      	lsrs	r3, r3, #2
 800251c:	3302      	adds	r3, #2
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d006      	beq.n	800253e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002532:	689a      	ldr	r2, [r3, #8]
 8002534:	492c      	ldr	r1, [pc, #176]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	608b      	str	r3, [r1, #8]
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800253e:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002540:	689a      	ldr	r2, [r3, #8]
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	43db      	mvns	r3, r3
 8002546:	4928      	ldr	r1, [pc, #160]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002548:	4013      	ands	r3, r2
 800254a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002558:	4b23      	ldr	r3, [pc, #140]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 800255a:	68da      	ldr	r2, [r3, #12]
 800255c:	4922      	ldr	r1, [pc, #136]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	60cb      	str	r3, [r1, #12]
 8002564:	e006      	b.n	8002574 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002566:	4b20      	ldr	r3, [pc, #128]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	43db      	mvns	r3, r3
 800256e:	491e      	ldr	r1, [pc, #120]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002570:	4013      	ands	r3, r2
 8002572:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d006      	beq.n	800258e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002580:	4b19      	ldr	r3, [pc, #100]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002582:	685a      	ldr	r2, [r3, #4]
 8002584:	4918      	ldr	r1, [pc, #96]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	4313      	orrs	r3, r2
 800258a:	604b      	str	r3, [r1, #4]
 800258c:	e006      	b.n	800259c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800258e:	4b16      	ldr	r3, [pc, #88]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	43db      	mvns	r3, r3
 8002596:	4914      	ldr	r1, [pc, #80]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 8002598:	4013      	ands	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d021      	beq.n	80025ec <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80025a8:	4b0f      	ldr	r3, [pc, #60]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	490e      	ldr	r1, [pc, #56]	; (80025e8 <HAL_GPIO_Init+0x2d0>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]
 80025b4:	e021      	b.n	80025fa <HAL_GPIO_Init+0x2e2>
 80025b6:	bf00      	nop
 80025b8:	10320000 	.word	0x10320000
 80025bc:	10310000 	.word	0x10310000
 80025c0:	10220000 	.word	0x10220000
 80025c4:	10210000 	.word	0x10210000
 80025c8:	10120000 	.word	0x10120000
 80025cc:	10110000 	.word	0x10110000
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	40010800 	.word	0x40010800
 80025dc:	40010c00 	.word	0x40010c00
 80025e0:	40011000 	.word	0x40011000
 80025e4:	40011400 	.word	0x40011400
 80025e8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025ec:	4b0b      	ldr	r3, [pc, #44]	; (800261c <HAL_GPIO_Init+0x304>)
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	4909      	ldr	r1, [pc, #36]	; (800261c <HAL_GPIO_Init+0x304>)
 80025f6:	4013      	ands	r3, r2
 80025f8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	3301      	adds	r3, #1
 80025fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002606:	fa22 f303 	lsr.w	r3, r2, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	f47f ae8e 	bne.w	800232c <HAL_GPIO_Init+0x14>
  }
}
 8002610:	bf00      	nop
 8002612:	bf00      	nop
 8002614:	372c      	adds	r7, #44	; 0x2c
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr
 800261c:	40010400 	.word	0x40010400

08002620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]
 800262c:	4613      	mov	r3, r2
 800262e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002630:	787b      	ldrb	r3, [r7, #1]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002636:	887a      	ldrh	r2, [r7, #2]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800263c:	e003      	b.n	8002646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	041a      	lsls	r2, r3, #16
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	611a      	str	r2, [r3, #16]
}
 8002646:	bf00      	nop
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e12b      	b.n	80028ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002668:	b2db      	uxtb	r3, r3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d106      	bne.n	800267c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7ff fa2c 	bl	8001ad4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2224      	movs	r2, #36	; 0x24
 8002680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f022 0201 	bic.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80026b4:	f001 fbca 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 80026b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	4a81      	ldr	r2, [pc, #516]	; (80028c4 <HAL_I2C_Init+0x274>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d807      	bhi.n	80026d4 <HAL_I2C_Init+0x84>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	4a80      	ldr	r2, [pc, #512]	; (80028c8 <HAL_I2C_Init+0x278>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	bf94      	ite	ls
 80026cc:	2301      	movls	r3, #1
 80026ce:	2300      	movhi	r3, #0
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	e006      	b.n	80026e2 <HAL_I2C_Init+0x92>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a7d      	ldr	r2, [pc, #500]	; (80028cc <HAL_I2C_Init+0x27c>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	bf94      	ite	ls
 80026dc:	2301      	movls	r3, #1
 80026de:	2300      	movhi	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e0e7      	b.n	80028ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	4a78      	ldr	r2, [pc, #480]	; (80028d0 <HAL_I2C_Init+0x280>)
 80026ee:	fba2 2303 	umull	r2, r3, r2, r3
 80026f2:	0c9b      	lsrs	r3, r3, #18
 80026f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68ba      	ldr	r2, [r7, #8]
 8002706:	430a      	orrs	r2, r1
 8002708:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	6a1b      	ldr	r3, [r3, #32]
 8002710:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	4a6a      	ldr	r2, [pc, #424]	; (80028c4 <HAL_I2C_Init+0x274>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d802      	bhi.n	8002724 <HAL_I2C_Init+0xd4>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	3301      	adds	r3, #1
 8002722:	e009      	b.n	8002738 <HAL_I2C_Init+0xe8>
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800272a:	fb02 f303 	mul.w	r3, r2, r3
 800272e:	4a69      	ldr	r2, [pc, #420]	; (80028d4 <HAL_I2C_Init+0x284>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	3301      	adds	r3, #1
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6812      	ldr	r2, [r2, #0]
 800273c:	430b      	orrs	r3, r1
 800273e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	69db      	ldr	r3, [r3, #28]
 8002746:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800274a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	495c      	ldr	r1, [pc, #368]	; (80028c4 <HAL_I2C_Init+0x274>)
 8002754:	428b      	cmp	r3, r1
 8002756:	d819      	bhi.n	800278c <HAL_I2C_Init+0x13c>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	1e59      	subs	r1, r3, #1
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	fbb1 f3f3 	udiv	r3, r1, r3
 8002766:	1c59      	adds	r1, r3, #1
 8002768:	f640 73fc 	movw	r3, #4092	; 0xffc
 800276c:	400b      	ands	r3, r1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00a      	beq.n	8002788 <HAL_I2C_Init+0x138>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	1e59      	subs	r1, r3, #1
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002780:	3301      	adds	r3, #1
 8002782:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002786:	e051      	b.n	800282c <HAL_I2C_Init+0x1dc>
 8002788:	2304      	movs	r3, #4
 800278a:	e04f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d111      	bne.n	80027b8 <HAL_I2C_Init+0x168>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	1e58      	subs	r0, r3, #1
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6859      	ldr	r1, [r3, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	440b      	add	r3, r1
 80027a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80027a6:	3301      	adds	r3, #1
 80027a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	bf0c      	ite	eq
 80027b0:	2301      	moveq	r3, #1
 80027b2:	2300      	movne	r3, #0
 80027b4:	b2db      	uxtb	r3, r3
 80027b6:	e012      	b.n	80027de <HAL_I2C_Init+0x18e>
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	1e58      	subs	r0, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	460b      	mov	r3, r1
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	440b      	add	r3, r1
 80027c6:	0099      	lsls	r1, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	bf0c      	ite	eq
 80027d8:	2301      	moveq	r3, #1
 80027da:	2300      	movne	r3, #0
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d001      	beq.n	80027e6 <HAL_I2C_Init+0x196>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_I2C_Init+0x1dc>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d10e      	bne.n	800280c <HAL_I2C_Init+0x1bc>
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1e58      	subs	r0, r3, #1
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	460b      	mov	r3, r1
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	440b      	add	r3, r1
 80027fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8002800:	3301      	adds	r3, #1
 8002802:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002806:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800280a:	e00f      	b.n	800282c <HAL_I2C_Init+0x1dc>
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	1e58      	subs	r0, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6859      	ldr	r1, [r3, #4]
 8002814:	460b      	mov	r3, r1
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	0099      	lsls	r1, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002822:	3301      	adds	r3, #1
 8002824:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002828:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282c:	6879      	ldr	r1, [r7, #4]
 800282e:	6809      	ldr	r1, [r1, #0]
 8002830:	4313      	orrs	r3, r2
 8002832:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	69da      	ldr	r2, [r3, #28]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	431a      	orrs	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	430a      	orrs	r2, r1
 800284e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800285a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	6911      	ldr	r1, [r2, #16]
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	68d2      	ldr	r2, [r2, #12]
 8002866:	4311      	orrs	r1, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	6812      	ldr	r2, [r2, #0]
 800286c:	430b      	orrs	r3, r1
 800286e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	430a      	orrs	r2, r1
 800288a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	000186a0 	.word	0x000186a0
 80028c8:	001e847f 	.word	0x001e847f
 80028cc:	003d08ff 	.word	0x003d08ff
 80028d0:	431bde83 	.word	0x431bde83
 80028d4:	10624dd3 	.word	0x10624dd3

080028d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b088      	sub	sp, #32
 80028dc:	af02      	add	r7, sp, #8
 80028de:	60f8      	str	r0, [r7, #12]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	817b      	strh	r3, [r7, #10]
 80028e8:	4613      	mov	r3, r2
 80028ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80028ec:	f7ff fb26 	bl	8001f3c <HAL_GetTick>
 80028f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	f040 80e0 	bne.w	8002ac0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	2319      	movs	r3, #25
 8002906:	2201      	movs	r2, #1
 8002908:	4970      	ldr	r1, [pc, #448]	; (8002acc <HAL_I2C_Master_Transmit+0x1f4>)
 800290a:	68f8      	ldr	r0, [r7, #12]
 800290c:	f000 fc9e 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002916:	2302      	movs	r3, #2
 8002918:	e0d3      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002920:	2b01      	cmp	r3, #1
 8002922:	d101      	bne.n	8002928 <HAL_I2C_Master_Transmit+0x50>
 8002924:	2302      	movs	r3, #2
 8002926:	e0cc      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b01      	cmp	r3, #1
 800293c:	d007      	beq.n	800294e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f042 0201 	orr.w	r2, r2, #1
 800294c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800295c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2221      	movs	r2, #33	; 0x21
 8002962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2210      	movs	r2, #16
 800296a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	893a      	ldrh	r2, [r7, #8]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29a      	uxth	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4a50      	ldr	r2, [pc, #320]	; (8002ad0 <HAL_I2C_Master_Transmit+0x1f8>)
 800298e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002990:	8979      	ldrh	r1, [r7, #10]
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	6a3a      	ldr	r2, [r7, #32]
 8002996:	68f8      	ldr	r0, [r7, #12]
 8002998:	f000 fb08 	bl	8002fac <I2C_MasterRequestWrite>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e08d      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029a6:	2300      	movs	r3, #0
 80029a8:	613b      	str	r3, [r7, #16]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	613b      	str	r3, [r7, #16]
 80029ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80029bc:	e066      	b.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029be:	697a      	ldr	r2, [r7, #20]
 80029c0:	6a39      	ldr	r1, [r7, #32]
 80029c2:	68f8      	ldr	r0, [r7, #12]
 80029c4:	f000 fd5c 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d00d      	beq.n	80029ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	2b04      	cmp	r3, #4
 80029d4:	d107      	bne.n	80029e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e06b      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	781a      	ldrb	r2, [r3, #0]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	3b01      	subs	r3, #1
 8002a08:	b29a      	uxth	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a12:	3b01      	subs	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	f003 0304 	and.w	r3, r3, #4
 8002a24:	2b04      	cmp	r3, #4
 8002a26:	d11b      	bne.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d017      	beq.n	8002a60 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a40:	1c5a      	adds	r2, r3, #1
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a60:	697a      	ldr	r2, [r7, #20]
 8002a62:	6a39      	ldr	r1, [r7, #32]
 8002a64:	68f8      	ldr	r0, [r7, #12]
 8002a66:	f000 fd53 	bl	8003510 <I2C_WaitOnBTFFlagUntilTimeout>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d00d      	beq.n	8002a8c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d107      	bne.n	8002a88 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a86:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e01a      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d194      	bne.n	80029be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	2220      	movs	r2, #32
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002abc:	2300      	movs	r3, #0
 8002abe:	e000      	b.n	8002ac2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
  }
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	00100002 	.word	0x00100002
 8002ad0:	ffff0000 	.word	0xffff0000

08002ad4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b08c      	sub	sp, #48	; 0x30
 8002ad8:	af02      	add	r7, sp, #8
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	607a      	str	r2, [r7, #4]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	817b      	strh	r3, [r7, #10]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002aec:	f7ff fa26 	bl	8001f3c <HAL_GetTick>
 8002af0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	f040 824b 	bne.w	8002f96 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	2319      	movs	r3, #25
 8002b06:	2201      	movs	r2, #1
 8002b08:	497f      	ldr	r1, [pc, #508]	; (8002d08 <HAL_I2C_Master_Receive+0x234>)
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fb9e 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d001      	beq.n	8002b1a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002b16:	2302      	movs	r3, #2
 8002b18:	e23e      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d101      	bne.n	8002b28 <HAL_I2C_Master_Receive+0x54>
 8002b24:	2302      	movs	r3, #2
 8002b26:	e237      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f003 0301 	and.w	r3, r3, #1
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d007      	beq.n	8002b4e <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 0201 	orr.w	r2, r2, #1
 8002b4c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b5c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2222      	movs	r2, #34	; 0x22
 8002b62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2210      	movs	r2, #16
 8002b6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	893a      	ldrh	r2, [r7, #8]
 8002b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	4a5f      	ldr	r2, [pc, #380]	; (8002d0c <HAL_I2C_Master_Receive+0x238>)
 8002b8e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b90:	8979      	ldrh	r1, [r7, #10]
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 fa8a 	bl	80030b0 <I2C_MasterRequestRead>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e1f8      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d113      	bne.n	8002bd6 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	61fb      	str	r3, [r7, #28]
 8002bc2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002bd2:	601a      	str	r2, [r3, #0]
 8002bd4:	e1cc      	b.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d11e      	bne.n	8002c1c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bec:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bee:	b672      	cpsid	i
}
 8002bf0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	61bb      	str	r3, [r7, #24]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	61bb      	str	r3, [r7, #24]
 8002c06:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c18:	b662      	cpsie	i
}
 8002c1a:	e035      	b.n	8002c88 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c20:	2b02      	cmp	r3, #2
 8002c22:	d11e      	bne.n	8002c62 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c32:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002c34:	b672      	cpsid	i
}
 8002c36:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c5c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002c5e:	b662      	cpsie	i
}
 8002c60:	e012      	b.n	8002c88 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c70:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c72:	2300      	movs	r3, #0
 8002c74:	613b      	str	r3, [r7, #16]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695b      	ldr	r3, [r3, #20]
 8002c7c:	613b      	str	r3, [r7, #16]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002c88:	e172      	b.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	f200 811f 	bhi.w	8002ed2 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d123      	bne.n	8002ce4 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c9e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fc7d 	bl	80035a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e173      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce2:	e145      	b.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d152      	bne.n	8002d92 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	9300      	str	r3, [sp, #0]
 8002cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	4906      	ldr	r1, [pc, #24]	; (8002d10 <HAL_I2C_Master_Receive+0x23c>)
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f000 faa8 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d008      	beq.n	8002d14 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e148      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
 8002d06:	bf00      	nop
 8002d08:	00100002 	.word	0x00100002
 8002d0c:	ffff0000 	.word	0xffff0000
 8002d10:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002d14:	b672      	cpsid	i
}
 8002d16:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	691a      	ldr	r2, [r3, #16]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	1c5a      	adds	r2, r3, #1
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d44:	3b01      	subs	r3, #1
 8002d46:	b29a      	uxth	r2, r3
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	3b01      	subs	r3, #1
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002d5a:	b662      	cpsie	i
}
 8002d5c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	1c5a      	adds	r2, r3, #1
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	b29a      	uxth	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d90:	e0ee      	b.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d94:	9300      	str	r3, [sp, #0]
 8002d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d98:	2200      	movs	r2, #0
 8002d9a:	4981      	ldr	r1, [pc, #516]	; (8002fa0 <HAL_I2C_Master_Receive+0x4cc>)
 8002d9c:	68f8      	ldr	r0, [r7, #12]
 8002d9e:	f000 fa55 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8002da2:	4603      	mov	r3, r0
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d001      	beq.n	8002dac <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e0f5      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dbc:	b672      	cpsid	i
}
 8002dbe:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	b2d2      	uxtb	r2, r2
 8002dcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd2:	1c5a      	adds	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ddc:	3b01      	subs	r3, #1
 8002dde:	b29a      	uxth	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29b      	uxth	r3, r3
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002df2:	4b6c      	ldr	r3, [pc, #432]	; (8002fa4 <HAL_I2C_Master_Receive+0x4d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	08db      	lsrs	r3, r3, #3
 8002df8:	4a6b      	ldr	r2, [pc, #428]	; (8002fa8 <HAL_I2C_Master_Receive+0x4d4>)
 8002dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfe:	0a1a      	lsrs	r2, r3, #8
 8002e00:	4613      	mov	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4413      	add	r3, r2
 8002e06:	00da      	lsls	r2, r3, #3
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002e12:	6a3b      	ldr	r3, [r7, #32]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d118      	bne.n	8002e4a <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2220      	movs	r2, #32
 8002e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f043 0220 	orr.w	r2, r3, #32
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002e3a:	b662      	cpsie	i
}
 8002e3c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2200      	movs	r2, #0
 8002e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e0a6      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0304 	and.w	r3, r3, #4
 8002e54:	2b04      	cmp	r3, #4
 8002e56:	d1d9      	bne.n	8002e0c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002e9a:	b662      	cpsie	i
}
 8002e9c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691a      	ldr	r2, [r3, #16]
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	1c5a      	adds	r2, r3, #1
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	b29a      	uxth	r2, r3
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	3b01      	subs	r3, #1
 8002eca:	b29a      	uxth	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ed0:	e04e      	b.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ed2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ed4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fb62 	bl	80035a0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e058      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	691a      	ldr	r2, [r3, #16]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	b2d2      	uxtb	r2, r2
 8002ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	695b      	ldr	r3, [r3, #20]
 8002f1e:	f003 0304 	and.w	r3, r3, #4
 8002f22:	2b04      	cmp	r3, #4
 8002f24:	d124      	bne.n	8002f70 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d107      	bne.n	8002f3e <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	1c5a      	adds	r2, r3, #1
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29a      	uxth	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	3b01      	subs	r3, #1
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f47f ae88 	bne.w	8002c8a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2220      	movs	r2, #32
 8002f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	e000      	b.n	8002f98 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002f96:	2302      	movs	r3, #2
  }
}
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3728      	adds	r7, #40	; 0x28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	00010004 	.word	0x00010004
 8002fa4:	20000008 	.word	0x20000008
 8002fa8:	14f8b589 	.word	0x14f8b589

08002fac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b088      	sub	sp, #32
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	607a      	str	r2, [r7, #4]
 8002fb6:	603b      	str	r3, [r7, #0]
 8002fb8:	460b      	mov	r3, r1
 8002fba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	2b08      	cmp	r3, #8
 8002fc6:	d006      	beq.n	8002fd6 <I2C_MasterRequestWrite+0x2a>
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d003      	beq.n	8002fd6 <I2C_MasterRequestWrite+0x2a>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002fd4:	d108      	bne.n	8002fe8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e00b      	b.n	8003000 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fec:	2b12      	cmp	r3, #18
 8002fee:	d107      	bne.n	8003000 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ffe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f91d 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8003012:	4603      	mov	r3, r0
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00d      	beq.n	8003034 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003026:	d103      	bne.n	8003030 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800302e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003030:	2303      	movs	r3, #3
 8003032:	e035      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	691b      	ldr	r3, [r3, #16]
 8003038:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800303c:	d108      	bne.n	8003050 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]
 800304e:	e01b      	b.n	8003088 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003050:	897b      	ldrh	r3, [r7, #10]
 8003052:	11db      	asrs	r3, r3, #7
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f003 0306 	and.w	r3, r3, #6
 800305a:	b2db      	uxtb	r3, r3
 800305c:	f063 030f 	orn	r3, r3, #15
 8003060:	b2da      	uxtb	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	687a      	ldr	r2, [r7, #4]
 800306c:	490e      	ldr	r1, [pc, #56]	; (80030a8 <I2C_MasterRequestWrite+0xfc>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f966 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e010      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800307e:	897b      	ldrh	r3, [r7, #10]
 8003080:	b2da      	uxtb	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4907      	ldr	r1, [pc, #28]	; (80030ac <I2C_MasterRequestWrite+0x100>)
 800308e:	68f8      	ldr	r0, [r7, #12]
 8003090:	f000 f956 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e000      	b.n	80030a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800309e:	2300      	movs	r3, #0
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3718      	adds	r7, #24
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	00010008 	.word	0x00010008
 80030ac:	00010002 	.word	0x00010002

080030b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b088      	sub	sp, #32
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	60f8      	str	r0, [r7, #12]
 80030b8:	607a      	str	r2, [r7, #4]
 80030ba:	603b      	str	r3, [r7, #0]
 80030bc:	460b      	mov	r3, r1
 80030be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d006      	beq.n	80030ea <I2C_MasterRequestRead+0x3a>
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d003      	beq.n	80030ea <I2C_MasterRequestRead+0x3a>
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80030e8:	d108      	bne.n	80030fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	e00b      	b.n	8003114 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003100:	2b11      	cmp	r3, #17
 8003102:	d107      	bne.n	8003114 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003112:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 f893 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 8003126:	4603      	mov	r3, r0
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00d      	beq.n	8003148 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800313a:	d103      	bne.n	8003144 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003142:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003144:	2303      	movs	r3, #3
 8003146:	e079      	b.n	800323c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	691b      	ldr	r3, [r3, #16]
 800314c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003150:	d108      	bne.n	8003164 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003152:	897b      	ldrh	r3, [r7, #10]
 8003154:	b2db      	uxtb	r3, r3
 8003156:	f043 0301 	orr.w	r3, r3, #1
 800315a:	b2da      	uxtb	r2, r3
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	611a      	str	r2, [r3, #16]
 8003162:	e05f      	b.n	8003224 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003164:	897b      	ldrh	r3, [r7, #10]
 8003166:	11db      	asrs	r3, r3, #7
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 0306 	and.w	r3, r3, #6
 800316e:	b2db      	uxtb	r3, r3
 8003170:	f063 030f 	orn	r3, r3, #15
 8003174:	b2da      	uxtb	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	4930      	ldr	r1, [pc, #192]	; (8003244 <I2C_MasterRequestRead+0x194>)
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 f8dc 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	2b00      	cmp	r3, #0
 800318c:	d001      	beq.n	8003192 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e054      	b.n	800323c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003192:	897b      	ldrh	r3, [r7, #10]
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	4929      	ldr	r1, [pc, #164]	; (8003248 <I2C_MasterRequestRead+0x198>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8cc 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e044      	b.n	800323c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b2:	2300      	movs	r3, #0
 80031b4:	613b      	str	r3, [r7, #16]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	695b      	ldr	r3, [r3, #20]
 80031bc:	613b      	str	r3, [r7, #16]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	613b      	str	r3, [r7, #16]
 80031c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80031d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2200      	movs	r2, #0
 80031e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f831 	bl	800324c <I2C_WaitOnFlagUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d00d      	beq.n	800320c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031fe:	d103      	bne.n	8003208 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003206:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e017      	b.n	800323c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800320c:	897b      	ldrh	r3, [r7, #10]
 800320e:	11db      	asrs	r3, r3, #7
 8003210:	b2db      	uxtb	r3, r3
 8003212:	f003 0306 	and.w	r3, r3, #6
 8003216:	b2db      	uxtb	r3, r3
 8003218:	f063 030e 	orn	r3, r3, #14
 800321c:	b2da      	uxtb	r2, r3
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	4907      	ldr	r1, [pc, #28]	; (8003248 <I2C_MasterRequestRead+0x198>)
 800322a:	68f8      	ldr	r0, [r7, #12]
 800322c:	f000 f888 	bl	8003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003230:	4603      	mov	r3, r0
 8003232:	2b00      	cmp	r3, #0
 8003234:	d001      	beq.n	800323a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	e000      	b.n	800323c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3718      	adds	r7, #24
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	00010008 	.word	0x00010008
 8003248:	00010002 	.word	0x00010002

0800324c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	4613      	mov	r3, r2
 800325a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800325c:	e048      	b.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003264:	d044      	beq.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003266:	f7fe fe69 	bl	8001f3c <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d302      	bcc.n	800327c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d139      	bne.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	0c1b      	lsrs	r3, r3, #16
 8003280:	b2db      	uxtb	r3, r3
 8003282:	2b01      	cmp	r3, #1
 8003284:	d10d      	bne.n	80032a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	43da      	mvns	r2, r3
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	4013      	ands	r3, r2
 8003292:	b29b      	uxth	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	bf0c      	ite	eq
 8003298:	2301      	moveq	r3, #1
 800329a:	2300      	movne	r3, #0
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	e00c      	b.n	80032bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699b      	ldr	r3, [r3, #24]
 80032a8:	43da      	mvns	r2, r3
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	4013      	ands	r3, r2
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	bf0c      	ite	eq
 80032b4:	2301      	moveq	r3, #1
 80032b6:	2300      	movne	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	461a      	mov	r2, r3
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d116      	bne.n	80032f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	f043 0220 	orr.w	r2, r3, #32
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e023      	b.n	8003338 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	0c1b      	lsrs	r3, r3, #16
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d10d      	bne.n	8003316 <I2C_WaitOnFlagUntilTimeout+0xca>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	43da      	mvns	r2, r3
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	4013      	ands	r3, r2
 8003306:	b29b      	uxth	r3, r3
 8003308:	2b00      	cmp	r3, #0
 800330a:	bf0c      	ite	eq
 800330c:	2301      	moveq	r3, #1
 800330e:	2300      	movne	r3, #0
 8003310:	b2db      	uxtb	r3, r3
 8003312:	461a      	mov	r2, r3
 8003314:	e00c      	b.n	8003330 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	43da      	mvns	r2, r3
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	4013      	ands	r3, r2
 8003322:	b29b      	uxth	r3, r3
 8003324:	2b00      	cmp	r3, #0
 8003326:	bf0c      	ite	eq
 8003328:	2301      	moveq	r3, #1
 800332a:	2300      	movne	r3, #0
 800332c:	b2db      	uxtb	r3, r3
 800332e:	461a      	mov	r2, r3
 8003330:	79fb      	ldrb	r3, [r7, #7]
 8003332:	429a      	cmp	r2, r3
 8003334:	d093      	beq.n	800325e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3710      	adds	r7, #16
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
 800334c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800334e:	e071      	b.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800335e:	d123      	bne.n	80033a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800336e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003378:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2220      	movs	r2, #32
 8003384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003394:	f043 0204 	orr.w	r2, r3, #4
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e067      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ae:	d041      	beq.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033b0:	f7fe fdc4 	bl	8001f3c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d302      	bcc.n	80033c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d136      	bne.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	0c1b      	lsrs	r3, r3, #16
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d10c      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	695b      	ldr	r3, [r3, #20]
 80033d6:	43da      	mvns	r2, r3
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	4013      	ands	r3, r2
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e00b      	b.n	8003402 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf14      	ite	ne
 80033fc:	2301      	movne	r3, #1
 80033fe:	2300      	moveq	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d016      	beq.n	8003434 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e021      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	0c1b      	lsrs	r3, r3, #16
 8003438:	b2db      	uxtb	r3, r3
 800343a:	2b01      	cmp	r3, #1
 800343c:	d10c      	bne.n	8003458 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	695b      	ldr	r3, [r3, #20]
 8003444:	43da      	mvns	r2, r3
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	4013      	ands	r3, r2
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b00      	cmp	r3, #0
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	e00b      	b.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	43da      	mvns	r2, r3
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	4013      	ands	r3, r2
 8003464:	b29b      	uxth	r3, r3
 8003466:	2b00      	cmp	r3, #0
 8003468:	bf14      	ite	ne
 800346a:	2301      	movne	r3, #1
 800346c:	2300      	moveq	r3, #0
 800346e:	b2db      	uxtb	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	f47f af6d 	bne.w	8003350 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348c:	e034      	b.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f8e3 	bl	800365a <I2C_IsAcknowledgeFailed>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e034      	b.n	8003508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d028      	beq.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fd49 	bl	8001f3c <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11d      	bne.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c6:	2b80      	cmp	r3, #128	; 0x80
 80034c8:	d016      	beq.n	80034f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2220      	movs	r2, #32
 80034d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	f043 0220 	orr.w	r2, r3, #32
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e007      	b.n	8003508 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b80      	cmp	r3, #128	; 0x80
 8003504:	d1c3      	bne.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003506:	2300      	movs	r3, #0
}
 8003508:	4618      	mov	r0, r3
 800350a:	3710      	adds	r7, #16
 800350c:	46bd      	mov	sp, r7
 800350e:	bd80      	pop	{r7, pc}

08003510 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800351c:	e034      	b.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 f89b 	bl	800365a <I2C_IsAcknowledgeFailed>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e034      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003534:	d028      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003536:	f7fe fd01 	bl	8001f3c <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	68ba      	ldr	r2, [r7, #8]
 8003542:	429a      	cmp	r2, r3
 8003544:	d302      	bcc.n	800354c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d11d      	bne.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	f003 0304 	and.w	r3, r3, #4
 8003556:	2b04      	cmp	r3, #4
 8003558:	d016      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003574:	f043 0220 	orr.w	r2, r3, #32
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e007      	b.n	8003598 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f003 0304 	and.w	r3, r3, #4
 8003592:	2b04      	cmp	r3, #4
 8003594:	d1c3      	bne.n	800351e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003596:	2300      	movs	r3, #0
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60f8      	str	r0, [r7, #12]
 80035a8:	60b9      	str	r1, [r7, #8]
 80035aa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80035ac:	e049      	b.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	695b      	ldr	r3, [r3, #20]
 80035b4:	f003 0310 	and.w	r3, r3, #16
 80035b8:	2b10      	cmp	r3, #16
 80035ba:	d119      	bne.n	80035f0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0210 	mvn.w	r2, #16
 80035c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2220      	movs	r2, #32
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e030      	b.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035f0:	f7fe fca4 	bl	8001f3c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	68ba      	ldr	r2, [r7, #8]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d302      	bcc.n	8003606 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d11d      	bne.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	695b      	ldr	r3, [r3, #20]
 800360c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d016      	beq.n	8003642 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2220      	movs	r2, #32
 800361e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f043 0220 	orr.w	r2, r3, #32
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e007      	b.n	8003652 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	695b      	ldr	r3, [r3, #20]
 8003648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364c:	2b40      	cmp	r3, #64	; 0x40
 800364e:	d1ae      	bne.n	80035ae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003650:	2300      	movs	r3, #0
}
 8003652:	4618      	mov	r0, r3
 8003654:	3710      	adds	r7, #16
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}

0800365a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	695b      	ldr	r3, [r3, #20]
 8003668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800366c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003670:	d11b      	bne.n	80036aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800367a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003696:	f043 0204 	orr.w	r2, r3, #4
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036aa:	2300      	movs	r3, #0
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bc80      	pop	{r7}
 80036b4:	4770      	bx	lr
	...

080036b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d101      	bne.n	80036ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e272      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	f000 8087 	beq.w	80037e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036d8:	4b92      	ldr	r3, [pc, #584]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036da:	685b      	ldr	r3, [r3, #4]
 80036dc:	f003 030c 	and.w	r3, r3, #12
 80036e0:	2b04      	cmp	r3, #4
 80036e2:	d00c      	beq.n	80036fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e4:	4b8f      	ldr	r3, [pc, #572]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d112      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
 80036f0:	4b8c      	ldr	r3, [pc, #560]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036fc:	d10b      	bne.n	8003716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036fe:	4b89      	ldr	r3, [pc, #548]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d06c      	beq.n	80037e4 <HAL_RCC_OscConfig+0x12c>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d168      	bne.n	80037e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e24c      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800371e:	d106      	bne.n	800372e <HAL_RCC_OscConfig+0x76>
 8003720:	4b80      	ldr	r3, [pc, #512]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a7f      	ldr	r2, [pc, #508]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800372a:	6013      	str	r3, [r2, #0]
 800372c:	e02e      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10c      	bne.n	8003750 <HAL_RCC_OscConfig+0x98>
 8003736:	4b7b      	ldr	r3, [pc, #492]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a7a      	ldr	r2, [pc, #488]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800373c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003740:	6013      	str	r3, [r2, #0]
 8003742:	4b78      	ldr	r3, [pc, #480]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a77      	ldr	r2, [pc, #476]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374c:	6013      	str	r3, [r2, #0]
 800374e:	e01d      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003758:	d10c      	bne.n	8003774 <HAL_RCC_OscConfig+0xbc>
 800375a:	4b72      	ldr	r3, [pc, #456]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a71      	ldr	r2, [pc, #452]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003764:	6013      	str	r3, [r2, #0]
 8003766:	4b6f      	ldr	r3, [pc, #444]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a6e      	ldr	r2, [pc, #440]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800376c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003770:	6013      	str	r3, [r2, #0]
 8003772:	e00b      	b.n	800378c <HAL_RCC_OscConfig+0xd4>
 8003774:	4b6b      	ldr	r3, [pc, #428]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a6a      	ldr	r2, [pc, #424]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800377a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800377e:	6013      	str	r3, [r2, #0]
 8003780:	4b68      	ldr	r3, [pc, #416]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a67      	ldr	r2, [pc, #412]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800378a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d013      	beq.n	80037bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003794:	f7fe fbd2 	bl	8001f3c <HAL_GetTick>
 8003798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800379a:	e008      	b.n	80037ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800379c:	f7fe fbce 	bl	8001f3c <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	2b64      	cmp	r3, #100	; 0x64
 80037a8:	d901      	bls.n	80037ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80037aa:	2303      	movs	r3, #3
 80037ac:	e200      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ae:	4b5d      	ldr	r3, [pc, #372]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d0f0      	beq.n	800379c <HAL_RCC_OscConfig+0xe4>
 80037ba:	e014      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037bc:	f7fe fbbe 	bl	8001f3c <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037c4:	f7fe fbba 	bl	8001f3c <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b64      	cmp	r3, #100	; 0x64
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e1ec      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037d6:	4b53      	ldr	r3, [pc, #332]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x10c>
 80037e2:	e000      	b.n	80037e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d063      	beq.n	80038ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037f2:	4b4c      	ldr	r3, [pc, #304]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f003 030c 	and.w	r3, r3, #12
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00b      	beq.n	8003816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037fe:	4b49      	ldr	r3, [pc, #292]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f003 030c 	and.w	r3, r3, #12
 8003806:	2b08      	cmp	r3, #8
 8003808:	d11c      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
 800380a:	4b46      	ldr	r3, [pc, #280]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d116      	bne.n	8003844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003816:	4b43      	ldr	r3, [pc, #268]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d005      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	691b      	ldr	r3, [r3, #16]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d001      	beq.n	800382e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e1c0      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	4939      	ldr	r1, [pc, #228]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800383e:	4313      	orrs	r3, r2
 8003840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003842:	e03a      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	691b      	ldr	r3, [r3, #16]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d020      	beq.n	800388e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <HAL_RCC_OscConfig+0x270>)
 800384e:	2201      	movs	r2, #1
 8003850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003852:	f7fe fb73 	bl	8001f3c <HAL_GetTick>
 8003856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003858:	e008      	b.n	800386c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800385a:	f7fe fb6f 	bl	8001f3c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d901      	bls.n	800386c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003868:	2303      	movs	r3, #3
 800386a:	e1a1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800386c:	4b2d      	ldr	r3, [pc, #180]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0302 	and.w	r3, r3, #2
 8003874:	2b00      	cmp	r3, #0
 8003876:	d0f0      	beq.n	800385a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003878:	4b2a      	ldr	r3, [pc, #168]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	695b      	ldr	r3, [r3, #20]
 8003884:	00db      	lsls	r3, r3, #3
 8003886:	4927      	ldr	r1, [pc, #156]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 8003888:	4313      	orrs	r3, r2
 800388a:	600b      	str	r3, [r1, #0]
 800388c:	e015      	b.n	80038ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800388e:	4b26      	ldr	r3, [pc, #152]	; (8003928 <HAL_RCC_OscConfig+0x270>)
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003894:	f7fe fb52 	bl	8001f3c <HAL_GetTick>
 8003898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800389a:	e008      	b.n	80038ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800389c:	f7fe fb4e 	bl	8001f3c <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d901      	bls.n	80038ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e180      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80038ae:	4b1d      	ldr	r3, [pc, #116]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0302 	and.w	r3, r3, #2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d1f0      	bne.n	800389c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f003 0308 	and.w	r3, r3, #8
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d03a      	beq.n	800393c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	699b      	ldr	r3, [r3, #24]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d019      	beq.n	8003902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038ce:	4b17      	ldr	r3, [pc, #92]	; (800392c <HAL_RCC_OscConfig+0x274>)
 80038d0:	2201      	movs	r2, #1
 80038d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038d4:	f7fe fb32 	bl	8001f3c <HAL_GetTick>
 80038d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038da:	e008      	b.n	80038ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038dc:	f7fe fb2e 	bl	8001f3c <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d901      	bls.n	80038ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e160      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038ee:	4b0d      	ldr	r3, [pc, #52]	; (8003924 <HAL_RCC_OscConfig+0x26c>)
 80038f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d0f0      	beq.n	80038dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038fa:	2001      	movs	r0, #1
 80038fc:	f000 face 	bl	8003e9c <RCC_Delay>
 8003900:	e01c      	b.n	800393c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003902:	4b0a      	ldr	r3, [pc, #40]	; (800392c <HAL_RCC_OscConfig+0x274>)
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003908:	f7fe fb18 	bl	8001f3c <HAL_GetTick>
 800390c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800390e:	e00f      	b.n	8003930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003910:	f7fe fb14 	bl	8001f3c <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d908      	bls.n	8003930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e146      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000
 8003928:	42420000 	.word	0x42420000
 800392c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003930:	4b92      	ldr	r3, [pc, #584]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	f003 0302 	and.w	r3, r3, #2
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e9      	bne.n	8003910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0304 	and.w	r3, r3, #4
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 80a6 	beq.w	8003a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800394a:	2300      	movs	r3, #0
 800394c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800394e:	4b8b      	ldr	r3, [pc, #556]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003950:	69db      	ldr	r3, [r3, #28]
 8003952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10d      	bne.n	8003976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	4a87      	ldr	r2, [pc, #540]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	61d3      	str	r3, [r2, #28]
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003968:	69db      	ldr	r3, [r3, #28]
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60bb      	str	r3, [r7, #8]
 8003970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003976:	4b82      	ldr	r3, [pc, #520]	; (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003982:	4b7f      	ldr	r3, [pc, #508]	; (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a7e      	ldr	r2, [pc, #504]	; (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fe fad5 	bl	8001f3c <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fe fad1 	bl	8001f3c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b64      	cmp	r3, #100	; 0x64
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e103      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039a8:	4b75      	ldr	r3, [pc, #468]	; (8003b80 <HAL_RCC_OscConfig+0x4c8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d106      	bne.n	80039ca <HAL_RCC_OscConfig+0x312>
 80039bc:	4b6f      	ldr	r3, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039be:	6a1b      	ldr	r3, [r3, #32]
 80039c0:	4a6e      	ldr	r2, [pc, #440]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039c2:	f043 0301 	orr.w	r3, r3, #1
 80039c6:	6213      	str	r3, [r2, #32]
 80039c8:	e02d      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d10c      	bne.n	80039ec <HAL_RCC_OscConfig+0x334>
 80039d2:	4b6a      	ldr	r3, [pc, #424]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d4:	6a1b      	ldr	r3, [r3, #32]
 80039d6:	4a69      	ldr	r2, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039d8:	f023 0301 	bic.w	r3, r3, #1
 80039dc:	6213      	str	r3, [r2, #32]
 80039de:	4b67      	ldr	r3, [pc, #412]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	4a66      	ldr	r2, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	6213      	str	r3, [r2, #32]
 80039ea:	e01c      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	2b05      	cmp	r3, #5
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x356>
 80039f4:	4b61      	ldr	r3, [pc, #388]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	4a60      	ldr	r2, [pc, #384]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 80039fa:	f043 0304 	orr.w	r3, r3, #4
 80039fe:	6213      	str	r3, [r2, #32]
 8003a00:	4b5e      	ldr	r3, [pc, #376]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a02:	6a1b      	ldr	r3, [r3, #32]
 8003a04:	4a5d      	ldr	r2, [pc, #372]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a06:	f043 0301 	orr.w	r3, r3, #1
 8003a0a:	6213      	str	r3, [r2, #32]
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x36e>
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	4a5a      	ldr	r2, [pc, #360]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	6213      	str	r3, [r2, #32]
 8003a1a:	4b58      	ldr	r3, [pc, #352]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	4a57      	ldr	r2, [pc, #348]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68db      	ldr	r3, [r3, #12]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d015      	beq.n	8003a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a2e:	f7fe fa85 	bl	8001f3c <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fe fa81 	bl	8001f3c <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e0b1      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a4c:	4b4b      	ldr	r3, [pc, #300]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a4e:	6a1b      	ldr	r3, [r3, #32]
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d0ee      	beq.n	8003a36 <HAL_RCC_OscConfig+0x37e>
 8003a58:	e014      	b.n	8003a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fa6f 	bl	8001f3c <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a60:	e00a      	b.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a62:	f7fe fa6b 	bl	8001f3c <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d901      	bls.n	8003a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a74:	2303      	movs	r3, #3
 8003a76:	e09b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a78:	4b40      	ldr	r3, [pc, #256]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	6a1b      	ldr	r3, [r3, #32]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1ee      	bne.n	8003a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a84:	7dfb      	ldrb	r3, [r7, #23]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d105      	bne.n	8003a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a8a:	4b3c      	ldr	r3, [pc, #240]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	69db      	ldr	r3, [r3, #28]
 8003a8e:	4a3b      	ldr	r2, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	69db      	ldr	r3, [r3, #28]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	f000 8087 	beq.w	8003bae <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aa0:	4b36      	ldr	r3, [pc, #216]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 030c 	and.w	r3, r3, #12
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d061      	beq.n	8003b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d146      	bne.n	8003b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ab4:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aba:	f7fe fa3f 	bl	8001f3c <HAL_GetTick>
 8003abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ac0:	e008      	b.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ac2:	f7fe fa3b 	bl	8001f3c <HAL_GetTick>
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	1ad3      	subs	r3, r2, r3
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	d901      	bls.n	8003ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ad0:	2303      	movs	r3, #3
 8003ad2:	e06d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ad4:	4b29      	ldr	r3, [pc, #164]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d1f0      	bne.n	8003ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae8:	d108      	bne.n	8003afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003aea:	4b24      	ldr	r3, [pc, #144]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4921      	ldr	r1, [pc, #132]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003afc:	4b1f      	ldr	r3, [pc, #124]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a19      	ldr	r1, [r3, #32]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	430b      	orrs	r3, r1
 8003b0e:	491b      	ldr	r1, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b14:	4b1b      	ldr	r3, [pc, #108]	; (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b16:	2201      	movs	r2, #1
 8003b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b1a:	f7fe fa0f 	bl	8001f3c <HAL_GetTick>
 8003b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b20:	e008      	b.n	8003b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b22:	f7fe fa0b 	bl	8001f3c <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	693b      	ldr	r3, [r7, #16]
 8003b2a:	1ad3      	subs	r3, r2, r3
 8003b2c:	2b02      	cmp	r3, #2
 8003b2e:	d901      	bls.n	8003b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e03d      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b34:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d0f0      	beq.n	8003b22 <HAL_RCC_OscConfig+0x46a>
 8003b40:	e035      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b42:	4b10      	ldr	r3, [pc, #64]	; (8003b84 <HAL_RCC_OscConfig+0x4cc>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b48:	f7fe f9f8 	bl	8001f3c <HAL_GetTick>
 8003b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fe f9f4 	bl	8001f3c <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e026      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b62:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <HAL_RCC_OscConfig+0x4c4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1f0      	bne.n	8003b50 <HAL_RCC_OscConfig+0x498>
 8003b6e:	e01e      	b.n	8003bae <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	69db      	ldr	r3, [r3, #28]
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d107      	bne.n	8003b88 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e019      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40007000 	.word	0x40007000
 8003b84:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b88:	4b0b      	ldr	r3, [pc, #44]	; (8003bb8 <HAL_RCC_OscConfig+0x500>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d106      	bne.n	8003baa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ba6:	429a      	cmp	r2, r3
 8003ba8:	d001      	beq.n	8003bae <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003bae:	2300      	movs	r3, #0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	40021000 	.word	0x40021000

08003bbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0307 	and.w	r3, r3, #7
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 0207 	bic.w	r2, r3, #7
 8003be6:	4965      	ldr	r1, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 0307 	and.w	r3, r3, #7
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003c3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d040      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e073      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4936      	ldr	r1, [pc, #216]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cac:	f7fe f946 	bl	8001f3c <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fe f942 	bl	8001f3c <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e053      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d210      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 0207 	bic.w	r2, r3, #7
 8003cf2:	4922      	ldr	r1, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1c0>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1c4>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1c8>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1cc>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1d0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe f8a4 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40022000 	.word	0x40022000
 8003d80:	40021000 	.word	0x40021000
 8003d84:	08007a4c 	.word	0x08007a4c
 8003d88:	20000008 	.word	0x20000008
 8003d8c:	2000000c 	.word	0x2000000c

08003d90 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	60bb      	str	r3, [r7, #8]
 8003d9e:	2300      	movs	r3, #0
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	2300      	movs	r3, #0
 8003da4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003daa:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f003 030c 	and.w	r3, r3, #12
 8003db6:	2b04      	cmp	r3, #4
 8003db8:	d002      	beq.n	8003dc0 <HAL_RCC_GetSysClockFreq+0x30>
 8003dba:	2b08      	cmp	r3, #8
 8003dbc:	d003      	beq.n	8003dc6 <HAL_RCC_GetSysClockFreq+0x36>
 8003dbe:	e027      	b.n	8003e10 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003dc0:	4b19      	ldr	r3, [pc, #100]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003dc2:	613b      	str	r3, [r7, #16]
      break;
 8003dc4:	e027      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	0c9b      	lsrs	r3, r3, #18
 8003dca:	f003 030f 	and.w	r3, r3, #15
 8003dce:	4a17      	ldr	r2, [pc, #92]	; (8003e2c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003dd0:	5cd3      	ldrb	r3, [r2, r3]
 8003dd2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d010      	beq.n	8003e00 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dde:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <HAL_RCC_GetSysClockFreq+0x94>)
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	0c5b      	lsrs	r3, r3, #17
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	4a11      	ldr	r2, [pc, #68]	; (8003e30 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dea:	5cd3      	ldrb	r3, [r2, r3]
 8003dec:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a0d      	ldr	r2, [pc, #52]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003df2:	fb03 f202 	mul.w	r2, r3, r2
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfc:	617b      	str	r3, [r7, #20]
 8003dfe:	e004      	b.n	8003e0a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	4a0c      	ldr	r2, [pc, #48]	; (8003e34 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003e04:	fb02 f303 	mul.w	r3, r2, r3
 8003e08:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	613b      	str	r3, [r7, #16]
      break;
 8003e0e:	e002      	b.n	8003e16 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003e10:	4b05      	ldr	r3, [pc, #20]	; (8003e28 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e12:	613b      	str	r3, [r7, #16]
      break;
 8003e14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e16:	693b      	ldr	r3, [r7, #16]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bc80      	pop	{r7}
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	40021000 	.word	0x40021000
 8003e28:	007a1200 	.word	0x007a1200
 8003e2c:	08007a64 	.word	0x08007a64
 8003e30:	08007a74 	.word	0x08007a74
 8003e34:	003d0900 	.word	0x003d0900

08003e38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e3c:	4b02      	ldr	r3, [pc, #8]	; (8003e48 <HAL_RCC_GetHCLKFreq+0x10>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	20000008 	.word	0x20000008

08003e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e50:	f7ff fff2 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e54:	4602      	mov	r2, r0
 8003e56:	4b05      	ldr	r3, [pc, #20]	; (8003e6c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	0a1b      	lsrs	r3, r3, #8
 8003e5c:	f003 0307 	and.w	r3, r3, #7
 8003e60:	4903      	ldr	r1, [pc, #12]	; (8003e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e62:	5ccb      	ldrb	r3, [r1, r3]
 8003e64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	08007a5c 	.word	0x08007a5c

08003e74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e78:	f7ff ffde 	bl	8003e38 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b05      	ldr	r3, [pc, #20]	; (8003e94 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	0adb      	lsrs	r3, r3, #11
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4903      	ldr	r1, [pc, #12]	; (8003e98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	bd80      	pop	{r7, pc}
 8003e94:	40021000 	.word	0x40021000
 8003e98:	08007a5c 	.word	0x08007a5c

08003e9c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <RCC_Delay+0x34>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a0a      	ldr	r2, [pc, #40]	; (8003ed4 <RCC_Delay+0x38>)
 8003eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8003eae:	0a5b      	lsrs	r3, r3, #9
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	fb02 f303 	mul.w	r3, r2, r3
 8003eb6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003eb8:	bf00      	nop
  }
  while (Delay --);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	1e5a      	subs	r2, r3, #1
 8003ebe:	60fa      	str	r2, [r7, #12]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1f9      	bne.n	8003eb8 <RCC_Delay+0x1c>
}
 8003ec4:	bf00      	nop
 8003ec6:	bf00      	nop
 8003ec8:	3714      	adds	r7, #20
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bc80      	pop	{r7}
 8003ece:	4770      	bx	lr
 8003ed0:	20000008 	.word	0x20000008
 8003ed4:	10624dd3 	.word	0x10624dd3

08003ed8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d101      	bne.n	8003eea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	e042      	b.n	8003f70 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d106      	bne.n	8003f04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7fd fe54 	bl	8001bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2224      	movs	r2, #36	; 0x24
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	68da      	ldr	r2, [r3, #12]
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fdc5 	bl	8004aac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	695a      	ldr	r2, [r3, #20]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68da      	ldr	r2, [r3, #12]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2220      	movs	r2, #32
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f6e:	2300      	movs	r3, #0
}
 8003f70:	4618      	mov	r0, r3
 8003f72:	3708      	adds	r7, #8
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}

08003f78 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af02      	add	r7, sp, #8
 8003f7e:	60f8      	str	r0, [r7, #12]
 8003f80:	60b9      	str	r1, [r7, #8]
 8003f82:	603b      	str	r3, [r7, #0]
 8003f84:	4613      	mov	r3, r2
 8003f86:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	2b20      	cmp	r3, #32
 8003f96:	d16d      	bne.n	8004074 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d002      	beq.n	8003fa4 <HAL_UART_Transmit+0x2c>
 8003f9e:	88fb      	ldrh	r3, [r7, #6]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e066      	b.n	8004076 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	2200      	movs	r2, #0
 8003fac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2221      	movs	r2, #33	; 0x21
 8003fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fb6:	f7fd ffc1 	bl	8001f3c <HAL_GetTick>
 8003fba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	88fa      	ldrh	r2, [r7, #6]
 8003fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	88fa      	ldrh	r2, [r7, #6]
 8003fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fd0:	d108      	bne.n	8003fe4 <HAL_UART_Transmit+0x6c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d104      	bne.n	8003fe4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	61bb      	str	r3, [r7, #24]
 8003fe2:	e003      	b.n	8003fec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fec:	e02a      	b.n	8004044 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	2180      	movs	r1, #128	; 0x80
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fb14 	bl	8004626 <UART_WaitOnFlagUntilTimeout>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2b00      	cmp	r3, #0
 8004002:	d001      	beq.n	8004008 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e036      	b.n	8004076 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d10b      	bne.n	8004026 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	461a      	mov	r2, r3
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800401c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	3302      	adds	r3, #2
 8004022:	61bb      	str	r3, [r7, #24]
 8004024:	e007      	b.n	8004036 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	781a      	ldrb	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004030:	69fb      	ldr	r3, [r7, #28]
 8004032:	3301      	adds	r3, #1
 8004034:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800403a:	b29b      	uxth	r3, r3
 800403c:	3b01      	subs	r3, #1
 800403e:	b29a      	uxth	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1cf      	bne.n	8003fee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2140      	movs	r1, #64	; 0x40
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fae4 	bl	8004626 <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e006      	b.n	8004076 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	e000      	b.n	8004076 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004074:	2302      	movs	r3, #2
  }
}
 8004076:	4618      	mov	r0, r3
 8004078:	3720      	adds	r7, #32
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}

0800407e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800407e:	b580      	push	{r7, lr}
 8004080:	b084      	sub	sp, #16
 8004082:	af00      	add	r7, sp, #0
 8004084:	60f8      	str	r0, [r7, #12]
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	4613      	mov	r3, r2
 800408a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b20      	cmp	r3, #32
 8004096:	d112      	bne.n	80040be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d002      	beq.n	80040a4 <HAL_UART_Receive_IT+0x26>
 800409e:	88fb      	ldrh	r3, [r7, #6]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d101      	bne.n	80040a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e00b      	b.n	80040c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	461a      	mov	r2, r3
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 fb24 	bl	8004702 <UART_Start_Receive_IT>
 80040ba:	4603      	mov	r3, r0
 80040bc:	e000      	b.n	80040c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80040be:	2302      	movs	r3, #2
  }
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3710      	adds	r7, #16
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b0ba      	sub	sp, #232	; 0xe8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80040f4:	2300      	movs	r3, #0
 80040f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004106:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10f      	bne.n	800412e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800410e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004112:	f003 0320 	and.w	r3, r3, #32
 8004116:	2b00      	cmp	r3, #0
 8004118:	d009      	beq.n	800412e <HAL_UART_IRQHandler+0x66>
 800411a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fc01 	bl	800492e <UART_Receive_IT>
      return;
 800412c:	e25b      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800412e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004132:	2b00      	cmp	r3, #0
 8004134:	f000 80de 	beq.w	80042f4 <HAL_UART_IRQHandler+0x22c>
 8004138:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b00      	cmp	r3, #0
 8004142:	d106      	bne.n	8004152 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004144:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004148:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80d1 	beq.w	80042f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00b      	beq.n	8004176 <HAL_UART_IRQHandler+0xae>
 800415e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004166:	2b00      	cmp	r3, #0
 8004168:	d005      	beq.n	8004176 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416e:	f043 0201 	orr.w	r2, r3, #1
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0304 	and.w	r3, r3, #4
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00b      	beq.n	800419a <HAL_UART_IRQHandler+0xd2>
 8004182:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	2b00      	cmp	r3, #0
 800418c:	d005      	beq.n	800419a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004192:	f043 0202 	orr.w	r2, r3, #2
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800419a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00b      	beq.n	80041be <HAL_UART_IRQHandler+0xf6>
 80041a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041aa:	f003 0301 	and.w	r3, r3, #1
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d005      	beq.n	80041be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b6:	f043 0204 	orr.w	r2, r3, #4
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80041be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041c2:	f003 0308 	and.w	r3, r3, #8
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d011      	beq.n	80041ee <HAL_UART_IRQHandler+0x126>
 80041ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d105      	bne.n	80041e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80041d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d005      	beq.n	80041ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041e6:	f043 0208 	orr.w	r2, r3, #8
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	f000 81f2 	beq.w	80045dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80041f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041fc:	f003 0320 	and.w	r3, r3, #32
 8004200:	2b00      	cmp	r3, #0
 8004202:	d008      	beq.n	8004216 <HAL_UART_IRQHandler+0x14e>
 8004204:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004208:	f003 0320 	and.w	r3, r3, #32
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 fb8c 	bl	800492e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004220:	2b00      	cmp	r3, #0
 8004222:	bf14      	ite	ne
 8004224:	2301      	movne	r3, #1
 8004226:	2300      	moveq	r3, #0
 8004228:	b2db      	uxtb	r3, r3
 800422a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d103      	bne.n	8004242 <HAL_UART_IRQHandler+0x17a>
 800423a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04f      	beq.n	80042e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f000 fa96 	bl	8004774 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d041      	beq.n	80042da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	3314      	adds	r3, #20
 800425c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004264:	e853 3f00 	ldrex	r3, [r3]
 8004268:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800426c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004270:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004274:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3314      	adds	r3, #20
 800427e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004282:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004286:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800428e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004292:	e841 2300 	strex	r3, r2, [r1]
 8004296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800429a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d1d9      	bne.n	8004256 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d013      	beq.n	80042d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042ae:	4a7e      	ldr	r2, [pc, #504]	; (80044a8 <HAL_UART_IRQHandler+0x3e0>)
 80042b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042b6:	4618      	mov	r0, r3
 80042b8:	f7fd ffb6 	bl	8002228 <HAL_DMA_Abort_IT>
 80042bc:	4603      	mov	r3, r0
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d016      	beq.n	80042f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80042cc:	4610      	mov	r0, r2
 80042ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d0:	e00e      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f000 f993 	bl	80045fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042d8:	e00a      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f98f 	bl	80045fe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042e0:	e006      	b.n	80042f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f98b 	bl	80045fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2200      	movs	r2, #0
 80042ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80042ee:	e175      	b.n	80045dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042f0:	bf00      	nop
    return;
 80042f2:	e173      	b.n	80045dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	f040 814f 	bne.w	800459c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80042fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b00      	cmp	r3, #0
 8004308:	f000 8148 	beq.w	800459c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800430c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004310:	f003 0310 	and.w	r3, r3, #16
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8141 	beq.w	800459c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800431a:	2300      	movs	r3, #0
 800431c:	60bb      	str	r3, [r7, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	60bb      	str	r3, [r7, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	60bb      	str	r3, [r7, #8]
 800432e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 80b6 	beq.w	80044ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800434c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 8145 	beq.w	80045e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800435a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800435e:	429a      	cmp	r2, r3
 8004360:	f080 813e 	bcs.w	80045e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800436a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	2b20      	cmp	r3, #32
 8004374:	f000 8088 	beq.w	8004488 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	330c      	adds	r3, #12
 800437e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004386:	e853 3f00 	ldrex	r3, [r3]
 800438a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800438e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004392:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004396:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	330c      	adds	r3, #12
 80043a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80043a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80043a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80043b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80043bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1d9      	bne.n	8004378 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	3314      	adds	r3, #20
 80043ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80043d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	3314      	adds	r3, #20
 80043e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80043e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80043ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80043f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e1      	bne.n	80043c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3314      	adds	r3, #20
 8004406:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004408:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800440a:	e853 3f00 	ldrex	r3, [r3]
 800440e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004410:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004412:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004416:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3314      	adds	r3, #20
 8004420:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004424:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004426:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004428:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800442a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800442c:	e841 2300 	strex	r3, r2, [r1]
 8004430:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004432:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004434:	2b00      	cmp	r3, #0
 8004436:	d1e3      	bne.n	8004400 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2220      	movs	r2, #32
 800443c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	330c      	adds	r3, #12
 800444c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004458:	f023 0310 	bic.w	r3, r3, #16
 800445c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	330c      	adds	r3, #12
 8004466:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800446a:	65ba      	str	r2, [r7, #88]	; 0x58
 800446c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004470:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004478:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e3      	bne.n	8004446 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004482:	4618      	mov	r0, r3
 8004484:	f7fd fe95 	bl	80021b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2202      	movs	r2, #2
 800448c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004496:	b29b      	uxth	r3, r3
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	b29b      	uxth	r3, r3
 800449c:	4619      	mov	r1, r3
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f000 f8b6 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044a4:	e09c      	b.n	80045e0 <HAL_UART_IRQHandler+0x518>
 80044a6:	bf00      	nop
 80044a8:	08004839 	.word	0x08004839
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	1ad3      	subs	r3, r2, r3
 80044b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	f000 808e 	beq.w	80045e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80044c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	f000 8089 	beq.w	80045e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80044e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	330c      	adds	r3, #12
 80044f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80044f6:	647a      	str	r2, [r7, #68]	; 0x44
 80044f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004504:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d1e3      	bne.n	80044d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	3314      	adds	r3, #20
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	e853 3f00 	ldrex	r3, [r3]
 8004518:	623b      	str	r3, [r7, #32]
   return(result);
 800451a:	6a3b      	ldr	r3, [r7, #32]
 800451c:	f023 0301 	bic.w	r3, r3, #1
 8004520:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	3314      	adds	r3, #20
 800452a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800452e:	633a      	str	r2, [r7, #48]	; 0x30
 8004530:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004534:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800453c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e3      	bne.n	800450a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2220      	movs	r2, #32
 8004546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	330c      	adds	r3, #12
 8004556:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 0310 	bic.w	r3, r3, #16
 8004566:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	330c      	adds	r3, #12
 8004570:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004574:	61fa      	str	r2, [r7, #28]
 8004576:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004578:	69b9      	ldr	r1, [r7, #24]
 800457a:	69fa      	ldr	r2, [r7, #28]
 800457c:	e841 2300 	strex	r3, r2, [r1]
 8004580:	617b      	str	r3, [r7, #20]
   return(result);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1e3      	bne.n	8004550 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2202      	movs	r2, #2
 800458c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800458e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004592:	4619      	mov	r1, r3
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 f83b 	bl	8004610 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800459a:	e023      	b.n	80045e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800459c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d009      	beq.n	80045bc <HAL_UART_IRQHandler+0x4f4>
 80045a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d003      	beq.n	80045bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f953 	bl	8004860 <UART_Transmit_IT>
    return;
 80045ba:	e014      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80045bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00e      	beq.n	80045e6 <HAL_UART_IRQHandler+0x51e>
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d008      	beq.n	80045e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80045d4:	6878      	ldr	r0, [r7, #4]
 80045d6:	f000 f992 	bl	80048fe <UART_EndTransmit_IT>
    return;
 80045da:	e004      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
    return;
 80045dc:	bf00      	nop
 80045de:	e002      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045e0:	bf00      	nop
 80045e2:	e000      	b.n	80045e6 <HAL_UART_IRQHandler+0x51e>
      return;
 80045e4:	bf00      	nop
  }
}
 80045e6:	37e8      	adds	r7, #232	; 0xe8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bc80      	pop	{r7}
 80045fc:	4770      	bx	lr

080045fe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045fe:	b480      	push	{r7}
 8004600:	b083      	sub	sp, #12
 8004602:	af00      	add	r7, sp, #0
 8004604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004606:	bf00      	nop
 8004608:	370c      	adds	r7, #12
 800460a:	46bd      	mov	sp, r7
 800460c:	bc80      	pop	{r7}
 800460e:	4770      	bx	lr

08004610 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800461c:	bf00      	nop
 800461e:	370c      	adds	r7, #12
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004626:	b580      	push	{r7, lr}
 8004628:	b090      	sub	sp, #64	; 0x40
 800462a:	af00      	add	r7, sp, #0
 800462c:	60f8      	str	r0, [r7, #12]
 800462e:	60b9      	str	r1, [r7, #8]
 8004630:	603b      	str	r3, [r7, #0]
 8004632:	4613      	mov	r3, r2
 8004634:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004636:	e050      	b.n	80046da <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004638:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800463a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800463e:	d04c      	beq.n	80046da <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004640:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004642:	2b00      	cmp	r3, #0
 8004644:	d007      	beq.n	8004656 <UART_WaitOnFlagUntilTimeout+0x30>
 8004646:	f7fd fc79 	bl	8001f3c <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004652:	429a      	cmp	r2, r3
 8004654:	d241      	bcs.n	80046da <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004668:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800466c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004676:	637a      	str	r2, [r7, #52]	; 0x34
 8004678:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800467c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	3314      	adds	r3, #20
 8004690:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	e853 3f00 	ldrex	r3, [r3]
 8004698:	613b      	str	r3, [r7, #16]
   return(result);
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	f023 0301 	bic.w	r3, r3, #1
 80046a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	3314      	adds	r3, #20
 80046a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80046aa:	623a      	str	r2, [r7, #32]
 80046ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ae:	69f9      	ldr	r1, [r7, #28]
 80046b0:	6a3a      	ldr	r2, [r7, #32]
 80046b2:	e841 2300 	strex	r3, r2, [r1]
 80046b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d1e5      	bne.n	800468a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2220      	movs	r2, #32
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	2220      	movs	r2, #32
 80046ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e00f      	b.n	80046fa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4013      	ands	r3, r2
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	461a      	mov	r2, r3
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d09f      	beq.n	8004638 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3740      	adds	r7, #64	; 0x40
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004702:	b480      	push	{r7}
 8004704:	b085      	sub	sp, #20
 8004706:	af00      	add	r7, sp, #0
 8004708:	60f8      	str	r0, [r7, #12]
 800470a:	60b9      	str	r1, [r7, #8]
 800470c:	4613      	mov	r3, r2
 800470e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	68ba      	ldr	r2, [r7, #8]
 8004714:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	88fa      	ldrh	r2, [r7, #6]
 800471a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	88fa      	ldrh	r2, [r7, #6]
 8004720:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2222      	movs	r2, #34	; 0x22
 800472c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d007      	beq.n	8004748 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	68da      	ldr	r2, [r3, #12]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004746:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695a      	ldr	r2, [r3, #20]
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f042 0201 	orr.w	r2, r2, #1
 8004756:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0220 	orr.w	r2, r2, #32
 8004766:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004774:	b480      	push	{r7}
 8004776:	b095      	sub	sp, #84	; 0x54
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	330c      	adds	r3, #12
 8004782:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800478c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004792:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	330c      	adds	r3, #12
 800479a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800479c:	643a      	str	r2, [r7, #64]	; 0x40
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3314      	adds	r3, #20
 80047b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	6a3b      	ldr	r3, [r7, #32]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f023 0301 	bic.w	r3, r3, #1
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3314      	adds	r3, #20
 80047ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e5      	bne.n	80047b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d119      	bne.n	8004820 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	647b      	str	r3, [r7, #68]	; 0x44
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	330c      	adds	r3, #12
 800480a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800480c:	61ba      	str	r2, [r7, #24]
 800480e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004810:	6979      	ldr	r1, [r7, #20]
 8004812:	69ba      	ldr	r2, [r7, #24]
 8004814:	e841 2300 	strex	r3, r2, [r1]
 8004818:	613b      	str	r3, [r7, #16]
   return(result);
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d1e5      	bne.n	80047ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800482e:	bf00      	nop
 8004830:	3754      	adds	r7, #84	; 0x54
 8004832:	46bd      	mov	sp, r7
 8004834:	bc80      	pop	{r7}
 8004836:	4770      	bx	lr

08004838 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2200      	movs	r2, #0
 8004850:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004852:	68f8      	ldr	r0, [r7, #12]
 8004854:	f7ff fed3 	bl	80045fe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004858:	bf00      	nop
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b21      	cmp	r3, #33	; 0x21
 8004872:	d13e      	bne.n	80048f2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800487c:	d114      	bne.n	80048a8 <UART_Transmit_IT+0x48>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d110      	bne.n	80048a8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	881b      	ldrh	r3, [r3, #0]
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800489a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	1c9a      	adds	r2, r3, #2
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	621a      	str	r2, [r3, #32]
 80048a6:	e008      	b.n	80048ba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a1b      	ldr	r3, [r3, #32]
 80048ac:	1c59      	adds	r1, r3, #1
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6211      	str	r1, [r2, #32]
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80048be:	b29b      	uxth	r3, r3
 80048c0:	3b01      	subs	r3, #1
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4619      	mov	r1, r3
 80048c8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10f      	bne.n	80048ee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80048dc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	68da      	ldr	r2, [r3, #12]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048ec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80048ee:	2300      	movs	r3, #0
 80048f0:	e000      	b.n	80048f4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80048f2:	2302      	movs	r3, #2
  }
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3714      	adds	r7, #20
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bc80      	pop	{r7}
 80048fc:	4770      	bx	lr

080048fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b082      	sub	sp, #8
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68da      	ldr	r2, [r3, #12]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004914:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fe64 	bl	80045ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800492e:	b580      	push	{r7, lr}
 8004930:	b08c      	sub	sp, #48	; 0x30
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800493c:	b2db      	uxtb	r3, r3
 800493e:	2b22      	cmp	r3, #34	; 0x22
 8004940:	f040 80ae 	bne.w	8004aa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800494c:	d117      	bne.n	800497e <UART_Receive_IT+0x50>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d113      	bne.n	800497e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004956:	2300      	movs	r3, #0
 8004958:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800495e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	b29b      	uxth	r3, r3
 8004968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800496c:	b29a      	uxth	r2, r3
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004976:	1c9a      	adds	r2, r3, #2
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	629a      	str	r2, [r3, #40]	; 0x28
 800497c:	e026      	b.n	80049cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004982:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	689b      	ldr	r3, [r3, #8]
 800498c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004990:	d007      	beq.n	80049a2 <UART_Receive_IT+0x74>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10a      	bne.n	80049b0 <UART_Receive_IT+0x82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d106      	bne.n	80049b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ac:	701a      	strb	r2, [r3, #0]
 80049ae:	e008      	b.n	80049c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049c6:	1c5a      	adds	r2, r3, #1
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	3b01      	subs	r3, #1
 80049d4:	b29b      	uxth	r3, r3
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	4619      	mov	r1, r3
 80049da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d15d      	bne.n	8004a9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68da      	ldr	r2, [r3, #12]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0220 	bic.w	r2, r2, #32
 80049ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68da      	ldr	r2, [r3, #12]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80049fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	695a      	ldr	r2, [r3, #20]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f022 0201 	bic.w	r2, r2, #1
 8004a0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2220      	movs	r2, #32
 8004a14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d135      	bne.n	8004a92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	330c      	adds	r3, #12
 8004a32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	e853 3f00 	ldrex	r3, [r3]
 8004a3a:	613b      	str	r3, [r7, #16]
   return(result);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	f023 0310 	bic.w	r3, r3, #16
 8004a42:	627b      	str	r3, [r7, #36]	; 0x24
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	330c      	adds	r3, #12
 8004a4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a4c:	623a      	str	r2, [r7, #32]
 8004a4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a50:	69f9      	ldr	r1, [r7, #28]
 8004a52:	6a3a      	ldr	r2, [r7, #32]
 8004a54:	e841 2300 	strex	r3, r2, [r1]
 8004a58:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1e5      	bne.n	8004a2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 0310 	and.w	r3, r3, #16
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d10a      	bne.n	8004a84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60fb      	str	r3, [r7, #12]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a88:	4619      	mov	r1, r3
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f7ff fdc0 	bl	8004610 <HAL_UARTEx_RxEventCallback>
 8004a90:	e002      	b.n	8004a98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fc fa8e 	bl	8000fb4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004a98:	2300      	movs	r3, #0
 8004a9a:	e002      	b.n	8004aa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	e000      	b.n	8004aa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004aa0:	2302      	movs	r3, #2
  }
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3730      	adds	r7, #48	; 0x30
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
	...

08004aac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b084      	sub	sp, #16
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68da      	ldr	r2, [r3, #12]
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	691b      	ldr	r3, [r3, #16]
 8004ad2:	431a      	orrs	r2, r3
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	695b      	ldr	r3, [r3, #20]
 8004ad8:	4313      	orrs	r3, r2
 8004ada:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004ae6:	f023 030c 	bic.w	r3, r3, #12
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	6812      	ldr	r2, [r2, #0]
 8004aee:	68b9      	ldr	r1, [r7, #8]
 8004af0:	430b      	orrs	r3, r1
 8004af2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a2c      	ldr	r2, [pc, #176]	; (8004bc0 <UART_SetConfig+0x114>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d103      	bne.n	8004b1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b14:	f7ff f9ae 	bl	8003e74 <HAL_RCC_GetPCLK2Freq>
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	e002      	b.n	8004b22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b1c:	f7ff f996 	bl	8003e4c <HAL_RCC_GetPCLK1Freq>
 8004b20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	4613      	mov	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	4413      	add	r3, r2
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	441a      	add	r2, r3
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b38:	4a22      	ldr	r2, [pc, #136]	; (8004bc4 <UART_SetConfig+0x118>)
 8004b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b3e:	095b      	lsrs	r3, r3, #5
 8004b40:	0119      	lsls	r1, r3, #4
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b58:	4b1a      	ldr	r3, [pc, #104]	; (8004bc4 <UART_SetConfig+0x118>)
 8004b5a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	2064      	movs	r0, #100	; 0x64
 8004b62:	fb00 f303 	mul.w	r3, r0, r3
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	011b      	lsls	r3, r3, #4
 8004b6a:	3332      	adds	r3, #50	; 0x32
 8004b6c:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <UART_SetConfig+0x118>)
 8004b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b78:	4419      	add	r1, r3
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4613      	mov	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	009a      	lsls	r2, r3, #2
 8004b84:	441a      	add	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b90:	4b0c      	ldr	r3, [pc, #48]	; (8004bc4 <UART_SetConfig+0x118>)
 8004b92:	fba3 0302 	umull	r0, r3, r3, r2
 8004b96:	095b      	lsrs	r3, r3, #5
 8004b98:	2064      	movs	r0, #100	; 0x64
 8004b9a:	fb00 f303 	mul.w	r3, r0, r3
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	3332      	adds	r3, #50	; 0x32
 8004ba4:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <UART_SetConfig+0x118>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	095b      	lsrs	r3, r3, #5
 8004bac:	f003 020f 	and.w	r2, r3, #15
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	440a      	add	r2, r1
 8004bb6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bb8:	bf00      	nop
 8004bba:	3710      	adds	r7, #16
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	40013800 	.word	0x40013800
 8004bc4:	51eb851f 	.word	0x51eb851f

08004bc8 <__errno>:
 8004bc8:	4b01      	ldr	r3, [pc, #4]	; (8004bd0 <__errno+0x8>)
 8004bca:	6818      	ldr	r0, [r3, #0]
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	20000014 	.word	0x20000014

08004bd4 <__libc_init_array>:
 8004bd4:	b570      	push	{r4, r5, r6, lr}
 8004bd6:	2600      	movs	r6, #0
 8004bd8:	4d0c      	ldr	r5, [pc, #48]	; (8004c0c <__libc_init_array+0x38>)
 8004bda:	4c0d      	ldr	r4, [pc, #52]	; (8004c10 <__libc_init_array+0x3c>)
 8004bdc:	1b64      	subs	r4, r4, r5
 8004bde:	10a4      	asrs	r4, r4, #2
 8004be0:	42a6      	cmp	r6, r4
 8004be2:	d109      	bne.n	8004bf8 <__libc_init_array+0x24>
 8004be4:	f002 fefc 	bl	80079e0 <_init>
 8004be8:	2600      	movs	r6, #0
 8004bea:	4d0a      	ldr	r5, [pc, #40]	; (8004c14 <__libc_init_array+0x40>)
 8004bec:	4c0a      	ldr	r4, [pc, #40]	; (8004c18 <__libc_init_array+0x44>)
 8004bee:	1b64      	subs	r4, r4, r5
 8004bf0:	10a4      	asrs	r4, r4, #2
 8004bf2:	42a6      	cmp	r6, r4
 8004bf4:	d105      	bne.n	8004c02 <__libc_init_array+0x2e>
 8004bf6:	bd70      	pop	{r4, r5, r6, pc}
 8004bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfc:	4798      	blx	r3
 8004bfe:	3601      	adds	r6, #1
 8004c00:	e7ee      	b.n	8004be0 <__libc_init_array+0xc>
 8004c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c06:	4798      	blx	r3
 8004c08:	3601      	adds	r6, #1
 8004c0a:	e7f2      	b.n	8004bf2 <__libc_init_array+0x1e>
 8004c0c:	08007e54 	.word	0x08007e54
 8004c10:	08007e54 	.word	0x08007e54
 8004c14:	08007e54 	.word	0x08007e54
 8004c18:	08007e58 	.word	0x08007e58

08004c1c <memset>:
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4402      	add	r2, r0
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	f803 1b01 	strb.w	r1, [r3], #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <__cvt>:
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c32:	461f      	mov	r7, r3
 8004c34:	bfbb      	ittet	lt
 8004c36:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004c3a:	461f      	movlt	r7, r3
 8004c3c:	2300      	movge	r3, #0
 8004c3e:	232d      	movlt	r3, #45	; 0x2d
 8004c40:	b088      	sub	sp, #32
 8004c42:	4614      	mov	r4, r2
 8004c44:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004c46:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004c48:	7013      	strb	r3, [r2, #0]
 8004c4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004c50:	f023 0820 	bic.w	r8, r3, #32
 8004c54:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c58:	d005      	beq.n	8004c66 <__cvt+0x3a>
 8004c5a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c5e:	d100      	bne.n	8004c62 <__cvt+0x36>
 8004c60:	3501      	adds	r5, #1
 8004c62:	2302      	movs	r3, #2
 8004c64:	e000      	b.n	8004c68 <__cvt+0x3c>
 8004c66:	2303      	movs	r3, #3
 8004c68:	aa07      	add	r2, sp, #28
 8004c6a:	9204      	str	r2, [sp, #16]
 8004c6c:	aa06      	add	r2, sp, #24
 8004c6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004c72:	e9cd 3500 	strd	r3, r5, [sp]
 8004c76:	4622      	mov	r2, r4
 8004c78:	463b      	mov	r3, r7
 8004c7a:	f000 fce5 	bl	8005648 <_dtoa_r>
 8004c7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c82:	4606      	mov	r6, r0
 8004c84:	d102      	bne.n	8004c8c <__cvt+0x60>
 8004c86:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c88:	07db      	lsls	r3, r3, #31
 8004c8a:	d522      	bpl.n	8004cd2 <__cvt+0xa6>
 8004c8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c90:	eb06 0905 	add.w	r9, r6, r5
 8004c94:	d110      	bne.n	8004cb8 <__cvt+0x8c>
 8004c96:	7833      	ldrb	r3, [r6, #0]
 8004c98:	2b30      	cmp	r3, #48	; 0x30
 8004c9a:	d10a      	bne.n	8004cb2 <__cvt+0x86>
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	4620      	mov	r0, r4
 8004ca2:	4639      	mov	r1, r7
 8004ca4:	f7fb ff34 	bl	8000b10 <__aeabi_dcmpeq>
 8004ca8:	b918      	cbnz	r0, 8004cb2 <__cvt+0x86>
 8004caa:	f1c5 0501 	rsb	r5, r5, #1
 8004cae:	f8ca 5000 	str.w	r5, [sl]
 8004cb2:	f8da 3000 	ldr.w	r3, [sl]
 8004cb6:	4499      	add	r9, r3
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2300      	movs	r3, #0
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb ff26 	bl	8000b10 <__aeabi_dcmpeq>
 8004cc4:	b108      	cbz	r0, 8004cca <__cvt+0x9e>
 8004cc6:	f8cd 901c 	str.w	r9, [sp, #28]
 8004cca:	2230      	movs	r2, #48	; 0x30
 8004ccc:	9b07      	ldr	r3, [sp, #28]
 8004cce:	454b      	cmp	r3, r9
 8004cd0:	d307      	bcc.n	8004ce2 <__cvt+0xb6>
 8004cd2:	4630      	mov	r0, r6
 8004cd4:	9b07      	ldr	r3, [sp, #28]
 8004cd6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cd8:	1b9b      	subs	r3, r3, r6
 8004cda:	6013      	str	r3, [r2, #0]
 8004cdc:	b008      	add	sp, #32
 8004cde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce2:	1c59      	adds	r1, r3, #1
 8004ce4:	9107      	str	r1, [sp, #28]
 8004ce6:	701a      	strb	r2, [r3, #0]
 8004ce8:	e7f0      	b.n	8004ccc <__cvt+0xa0>

08004cea <__exponent>:
 8004cea:	4603      	mov	r3, r0
 8004cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004cee:	2900      	cmp	r1, #0
 8004cf0:	f803 2b02 	strb.w	r2, [r3], #2
 8004cf4:	bfb6      	itet	lt
 8004cf6:	222d      	movlt	r2, #45	; 0x2d
 8004cf8:	222b      	movge	r2, #43	; 0x2b
 8004cfa:	4249      	neglt	r1, r1
 8004cfc:	2909      	cmp	r1, #9
 8004cfe:	7042      	strb	r2, [r0, #1]
 8004d00:	dd2b      	ble.n	8004d5a <__exponent+0x70>
 8004d02:	f10d 0407 	add.w	r4, sp, #7
 8004d06:	46a4      	mov	ip, r4
 8004d08:	270a      	movs	r7, #10
 8004d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d0e:	460a      	mov	r2, r1
 8004d10:	46a6      	mov	lr, r4
 8004d12:	fb07 1516 	mls	r5, r7, r6, r1
 8004d16:	2a63      	cmp	r2, #99	; 0x63
 8004d18:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004d1c:	4631      	mov	r1, r6
 8004d1e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004d22:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d26:	dcf0      	bgt.n	8004d0a <__exponent+0x20>
 8004d28:	3130      	adds	r1, #48	; 0x30
 8004d2a:	f1ae 0502 	sub.w	r5, lr, #2
 8004d2e:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d32:	4629      	mov	r1, r5
 8004d34:	1c44      	adds	r4, r0, #1
 8004d36:	4561      	cmp	r1, ip
 8004d38:	d30a      	bcc.n	8004d50 <__exponent+0x66>
 8004d3a:	f10d 0209 	add.w	r2, sp, #9
 8004d3e:	eba2 020e 	sub.w	r2, r2, lr
 8004d42:	4565      	cmp	r5, ip
 8004d44:	bf88      	it	hi
 8004d46:	2200      	movhi	r2, #0
 8004d48:	4413      	add	r3, r2
 8004d4a:	1a18      	subs	r0, r3, r0
 8004d4c:	b003      	add	sp, #12
 8004d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d50:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d54:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d58:	e7ed      	b.n	8004d36 <__exponent+0x4c>
 8004d5a:	2330      	movs	r3, #48	; 0x30
 8004d5c:	3130      	adds	r1, #48	; 0x30
 8004d5e:	7083      	strb	r3, [r0, #2]
 8004d60:	70c1      	strb	r1, [r0, #3]
 8004d62:	1d03      	adds	r3, r0, #4
 8004d64:	e7f1      	b.n	8004d4a <__exponent+0x60>
	...

08004d68 <_printf_float>:
 8004d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6c:	b091      	sub	sp, #68	; 0x44
 8004d6e:	460c      	mov	r4, r1
 8004d70:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004d74:	4616      	mov	r6, r2
 8004d76:	461f      	mov	r7, r3
 8004d78:	4605      	mov	r5, r0
 8004d7a:	f001 fa53 	bl	8006224 <_localeconv_r>
 8004d7e:	6803      	ldr	r3, [r0, #0]
 8004d80:	4618      	mov	r0, r3
 8004d82:	9309      	str	r3, [sp, #36]	; 0x24
 8004d84:	f7fb f9e4 	bl	8000150 <strlen>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	930e      	str	r3, [sp, #56]	; 0x38
 8004d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d90:	900a      	str	r0, [sp, #40]	; 0x28
 8004d92:	3307      	adds	r3, #7
 8004d94:	f023 0307 	bic.w	r3, r3, #7
 8004d98:	f103 0208 	add.w	r2, r3, #8
 8004d9c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004da0:	f8d4 b000 	ldr.w	fp, [r4]
 8004da4:	f8c8 2000 	str.w	r2, [r8]
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004db0:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004db4:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004db8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dba:	f04f 32ff 	mov.w	r2, #4294967295
 8004dbe:	4640      	mov	r0, r8
 8004dc0:	4b9c      	ldr	r3, [pc, #624]	; (8005034 <_printf_float+0x2cc>)
 8004dc2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dc4:	f7fb fed6 	bl	8000b74 <__aeabi_dcmpun>
 8004dc8:	bb70      	cbnz	r0, 8004e28 <_printf_float+0xc0>
 8004dca:	f04f 32ff 	mov.w	r2, #4294967295
 8004dce:	4640      	mov	r0, r8
 8004dd0:	4b98      	ldr	r3, [pc, #608]	; (8005034 <_printf_float+0x2cc>)
 8004dd2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004dd4:	f7fb feb0 	bl	8000b38 <__aeabi_dcmple>
 8004dd8:	bb30      	cbnz	r0, 8004e28 <_printf_float+0xc0>
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4640      	mov	r0, r8
 8004de0:	4651      	mov	r1, sl
 8004de2:	f7fb fe9f 	bl	8000b24 <__aeabi_dcmplt>
 8004de6:	b110      	cbz	r0, 8004dee <_printf_float+0x86>
 8004de8:	232d      	movs	r3, #45	; 0x2d
 8004dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004dee:	4b92      	ldr	r3, [pc, #584]	; (8005038 <_printf_float+0x2d0>)
 8004df0:	4892      	ldr	r0, [pc, #584]	; (800503c <_printf_float+0x2d4>)
 8004df2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004df6:	bf94      	ite	ls
 8004df8:	4698      	movls	r8, r3
 8004dfa:	4680      	movhi	r8, r0
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	f04f 0a00 	mov.w	sl, #0
 8004e02:	6123      	str	r3, [r4, #16]
 8004e04:	f02b 0304 	bic.w	r3, fp, #4
 8004e08:	6023      	str	r3, [r4, #0]
 8004e0a:	4633      	mov	r3, r6
 8004e0c:	4621      	mov	r1, r4
 8004e0e:	4628      	mov	r0, r5
 8004e10:	9700      	str	r7, [sp, #0]
 8004e12:	aa0f      	add	r2, sp, #60	; 0x3c
 8004e14:	f000 f9d4 	bl	80051c0 <_printf_common>
 8004e18:	3001      	adds	r0, #1
 8004e1a:	f040 8090 	bne.w	8004f3e <_printf_float+0x1d6>
 8004e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e22:	b011      	add	sp, #68	; 0x44
 8004e24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e28:	4642      	mov	r2, r8
 8004e2a:	4653      	mov	r3, sl
 8004e2c:	4640      	mov	r0, r8
 8004e2e:	4651      	mov	r1, sl
 8004e30:	f7fb fea0 	bl	8000b74 <__aeabi_dcmpun>
 8004e34:	b148      	cbz	r0, 8004e4a <_printf_float+0xe2>
 8004e36:	f1ba 0f00 	cmp.w	sl, #0
 8004e3a:	bfb8      	it	lt
 8004e3c:	232d      	movlt	r3, #45	; 0x2d
 8004e3e:	4880      	ldr	r0, [pc, #512]	; (8005040 <_printf_float+0x2d8>)
 8004e40:	bfb8      	it	lt
 8004e42:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e46:	4b7f      	ldr	r3, [pc, #508]	; (8005044 <_printf_float+0x2dc>)
 8004e48:	e7d3      	b.n	8004df2 <_printf_float+0x8a>
 8004e4a:	6863      	ldr	r3, [r4, #4]
 8004e4c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004e50:	1c5a      	adds	r2, r3, #1
 8004e52:	d142      	bne.n	8004eda <_printf_float+0x172>
 8004e54:	2306      	movs	r3, #6
 8004e56:	6063      	str	r3, [r4, #4]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	9206      	str	r2, [sp, #24]
 8004e5c:	aa0e      	add	r2, sp, #56	; 0x38
 8004e5e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004e62:	aa0d      	add	r2, sp, #52	; 0x34
 8004e64:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004e68:	9203      	str	r2, [sp, #12]
 8004e6a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004e6e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004e72:	6023      	str	r3, [r4, #0]
 8004e74:	6863      	ldr	r3, [r4, #4]
 8004e76:	4642      	mov	r2, r8
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	4628      	mov	r0, r5
 8004e7c:	4653      	mov	r3, sl
 8004e7e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004e80:	f7ff fed4 	bl	8004c2c <__cvt>
 8004e84:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e86:	4680      	mov	r8, r0
 8004e88:	2947      	cmp	r1, #71	; 0x47
 8004e8a:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e8c:	d108      	bne.n	8004ea0 <_printf_float+0x138>
 8004e8e:	1cc8      	adds	r0, r1, #3
 8004e90:	db02      	blt.n	8004e98 <_printf_float+0x130>
 8004e92:	6863      	ldr	r3, [r4, #4]
 8004e94:	4299      	cmp	r1, r3
 8004e96:	dd40      	ble.n	8004f1a <_printf_float+0x1b2>
 8004e98:	f1a9 0902 	sub.w	r9, r9, #2
 8004e9c:	fa5f f989 	uxtb.w	r9, r9
 8004ea0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004ea4:	d81f      	bhi.n	8004ee6 <_printf_float+0x17e>
 8004ea6:	464a      	mov	r2, r9
 8004ea8:	3901      	subs	r1, #1
 8004eaa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004eae:	910d      	str	r1, [sp, #52]	; 0x34
 8004eb0:	f7ff ff1b 	bl	8004cea <__exponent>
 8004eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb6:	4682      	mov	sl, r0
 8004eb8:	1813      	adds	r3, r2, r0
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	6123      	str	r3, [r4, #16]
 8004ebe:	dc02      	bgt.n	8004ec6 <_printf_float+0x15e>
 8004ec0:	6822      	ldr	r2, [r4, #0]
 8004ec2:	07d2      	lsls	r2, r2, #31
 8004ec4:	d501      	bpl.n	8004eca <_printf_float+0x162>
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d09b      	beq.n	8004e0a <_printf_float+0xa2>
 8004ed2:	232d      	movs	r3, #45	; 0x2d
 8004ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ed8:	e797      	b.n	8004e0a <_printf_float+0xa2>
 8004eda:	2947      	cmp	r1, #71	; 0x47
 8004edc:	d1bc      	bne.n	8004e58 <_printf_float+0xf0>
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1ba      	bne.n	8004e58 <_printf_float+0xf0>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e7b7      	b.n	8004e56 <_printf_float+0xee>
 8004ee6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004eea:	d118      	bne.n	8004f1e <_printf_float+0x1b6>
 8004eec:	2900      	cmp	r1, #0
 8004eee:	6863      	ldr	r3, [r4, #4]
 8004ef0:	dd0b      	ble.n	8004f0a <_printf_float+0x1a2>
 8004ef2:	6121      	str	r1, [r4, #16]
 8004ef4:	b913      	cbnz	r3, 8004efc <_printf_float+0x194>
 8004ef6:	6822      	ldr	r2, [r4, #0]
 8004ef8:	07d0      	lsls	r0, r2, #31
 8004efa:	d502      	bpl.n	8004f02 <_printf_float+0x19a>
 8004efc:	3301      	adds	r3, #1
 8004efe:	440b      	add	r3, r1
 8004f00:	6123      	str	r3, [r4, #16]
 8004f02:	f04f 0a00 	mov.w	sl, #0
 8004f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f08:	e7df      	b.n	8004eca <_printf_float+0x162>
 8004f0a:	b913      	cbnz	r3, 8004f12 <_printf_float+0x1aa>
 8004f0c:	6822      	ldr	r2, [r4, #0]
 8004f0e:	07d2      	lsls	r2, r2, #31
 8004f10:	d501      	bpl.n	8004f16 <_printf_float+0x1ae>
 8004f12:	3302      	adds	r3, #2
 8004f14:	e7f4      	b.n	8004f00 <_printf_float+0x198>
 8004f16:	2301      	movs	r3, #1
 8004f18:	e7f2      	b.n	8004f00 <_printf_float+0x198>
 8004f1a:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f20:	4299      	cmp	r1, r3
 8004f22:	db05      	blt.n	8004f30 <_printf_float+0x1c8>
 8004f24:	6823      	ldr	r3, [r4, #0]
 8004f26:	6121      	str	r1, [r4, #16]
 8004f28:	07d8      	lsls	r0, r3, #31
 8004f2a:	d5ea      	bpl.n	8004f02 <_printf_float+0x19a>
 8004f2c:	1c4b      	adds	r3, r1, #1
 8004f2e:	e7e7      	b.n	8004f00 <_printf_float+0x198>
 8004f30:	2900      	cmp	r1, #0
 8004f32:	bfcc      	ite	gt
 8004f34:	2201      	movgt	r2, #1
 8004f36:	f1c1 0202 	rsble	r2, r1, #2
 8004f3a:	4413      	add	r3, r2
 8004f3c:	e7e0      	b.n	8004f00 <_printf_float+0x198>
 8004f3e:	6823      	ldr	r3, [r4, #0]
 8004f40:	055a      	lsls	r2, r3, #21
 8004f42:	d407      	bmi.n	8004f54 <_printf_float+0x1ec>
 8004f44:	6923      	ldr	r3, [r4, #16]
 8004f46:	4642      	mov	r2, r8
 8004f48:	4631      	mov	r1, r6
 8004f4a:	4628      	mov	r0, r5
 8004f4c:	47b8      	blx	r7
 8004f4e:	3001      	adds	r0, #1
 8004f50:	d12b      	bne.n	8004faa <_printf_float+0x242>
 8004f52:	e764      	b.n	8004e1e <_printf_float+0xb6>
 8004f54:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004f58:	f240 80dd 	bls.w	8005116 <_printf_float+0x3ae>
 8004f5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f60:	2200      	movs	r2, #0
 8004f62:	2300      	movs	r3, #0
 8004f64:	f7fb fdd4 	bl	8000b10 <__aeabi_dcmpeq>
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	d033      	beq.n	8004fd4 <_printf_float+0x26c>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	4a35      	ldr	r2, [pc, #212]	; (8005048 <_printf_float+0x2e0>)
 8004f74:	47b8      	blx	r7
 8004f76:	3001      	adds	r0, #1
 8004f78:	f43f af51 	beq.w	8004e1e <_printf_float+0xb6>
 8004f7c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004f80:	429a      	cmp	r2, r3
 8004f82:	db02      	blt.n	8004f8a <_printf_float+0x222>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	07d8      	lsls	r0, r3, #31
 8004f88:	d50f      	bpl.n	8004faa <_printf_float+0x242>
 8004f8a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f8e:	4631      	mov	r1, r6
 8004f90:	4628      	mov	r0, r5
 8004f92:	47b8      	blx	r7
 8004f94:	3001      	adds	r0, #1
 8004f96:	f43f af42 	beq.w	8004e1e <_printf_float+0xb6>
 8004f9a:	f04f 0800 	mov.w	r8, #0
 8004f9e:	f104 091a 	add.w	r9, r4, #26
 8004fa2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fa4:	3b01      	subs	r3, #1
 8004fa6:	4543      	cmp	r3, r8
 8004fa8:	dc09      	bgt.n	8004fbe <_printf_float+0x256>
 8004faa:	6823      	ldr	r3, [r4, #0]
 8004fac:	079b      	lsls	r3, r3, #30
 8004fae:	f100 8102 	bmi.w	80051b6 <_printf_float+0x44e>
 8004fb2:	68e0      	ldr	r0, [r4, #12]
 8004fb4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004fb6:	4298      	cmp	r0, r3
 8004fb8:	bfb8      	it	lt
 8004fba:	4618      	movlt	r0, r3
 8004fbc:	e731      	b.n	8004e22 <_printf_float+0xba>
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	464a      	mov	r2, r9
 8004fc2:	4631      	mov	r1, r6
 8004fc4:	4628      	mov	r0, r5
 8004fc6:	47b8      	blx	r7
 8004fc8:	3001      	adds	r0, #1
 8004fca:	f43f af28 	beq.w	8004e1e <_printf_float+0xb6>
 8004fce:	f108 0801 	add.w	r8, r8, #1
 8004fd2:	e7e6      	b.n	8004fa2 <_printf_float+0x23a>
 8004fd4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	dc38      	bgt.n	800504c <_printf_float+0x2e4>
 8004fda:	2301      	movs	r3, #1
 8004fdc:	4631      	mov	r1, r6
 8004fde:	4628      	mov	r0, r5
 8004fe0:	4a19      	ldr	r2, [pc, #100]	; (8005048 <_printf_float+0x2e0>)
 8004fe2:	47b8      	blx	r7
 8004fe4:	3001      	adds	r0, #1
 8004fe6:	f43f af1a 	beq.w	8004e1e <_printf_float+0xb6>
 8004fea:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	d102      	bne.n	8004ff8 <_printf_float+0x290>
 8004ff2:	6823      	ldr	r3, [r4, #0]
 8004ff4:	07d9      	lsls	r1, r3, #31
 8004ff6:	d5d8      	bpl.n	8004faa <_printf_float+0x242>
 8004ff8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ffc:	4631      	mov	r1, r6
 8004ffe:	4628      	mov	r0, r5
 8005000:	47b8      	blx	r7
 8005002:	3001      	adds	r0, #1
 8005004:	f43f af0b 	beq.w	8004e1e <_printf_float+0xb6>
 8005008:	f04f 0900 	mov.w	r9, #0
 800500c:	f104 0a1a 	add.w	sl, r4, #26
 8005010:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005012:	425b      	negs	r3, r3
 8005014:	454b      	cmp	r3, r9
 8005016:	dc01      	bgt.n	800501c <_printf_float+0x2b4>
 8005018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800501a:	e794      	b.n	8004f46 <_printf_float+0x1de>
 800501c:	2301      	movs	r3, #1
 800501e:	4652      	mov	r2, sl
 8005020:	4631      	mov	r1, r6
 8005022:	4628      	mov	r0, r5
 8005024:	47b8      	blx	r7
 8005026:	3001      	adds	r0, #1
 8005028:	f43f aef9 	beq.w	8004e1e <_printf_float+0xb6>
 800502c:	f109 0901 	add.w	r9, r9, #1
 8005030:	e7ee      	b.n	8005010 <_printf_float+0x2a8>
 8005032:	bf00      	nop
 8005034:	7fefffff 	.word	0x7fefffff
 8005038:	08007a7c 	.word	0x08007a7c
 800503c:	08007a80 	.word	0x08007a80
 8005040:	08007a88 	.word	0x08007a88
 8005044:	08007a84 	.word	0x08007a84
 8005048:	08007a8c 	.word	0x08007a8c
 800504c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800504e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005050:	429a      	cmp	r2, r3
 8005052:	bfa8      	it	ge
 8005054:	461a      	movge	r2, r3
 8005056:	2a00      	cmp	r2, #0
 8005058:	4691      	mov	r9, r2
 800505a:	dc37      	bgt.n	80050cc <_printf_float+0x364>
 800505c:	f04f 0b00 	mov.w	fp, #0
 8005060:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005064:	f104 021a 	add.w	r2, r4, #26
 8005068:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800506c:	ebaa 0309 	sub.w	r3, sl, r9
 8005070:	455b      	cmp	r3, fp
 8005072:	dc33      	bgt.n	80050dc <_printf_float+0x374>
 8005074:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005078:	429a      	cmp	r2, r3
 800507a:	db3b      	blt.n	80050f4 <_printf_float+0x38c>
 800507c:	6823      	ldr	r3, [r4, #0]
 800507e:	07da      	lsls	r2, r3, #31
 8005080:	d438      	bmi.n	80050f4 <_printf_float+0x38c>
 8005082:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005084:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005086:	eba3 020a 	sub.w	r2, r3, sl
 800508a:	eba3 0901 	sub.w	r9, r3, r1
 800508e:	4591      	cmp	r9, r2
 8005090:	bfa8      	it	ge
 8005092:	4691      	movge	r9, r2
 8005094:	f1b9 0f00 	cmp.w	r9, #0
 8005098:	dc34      	bgt.n	8005104 <_printf_float+0x39c>
 800509a:	f04f 0800 	mov.w	r8, #0
 800509e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050a2:	f104 0a1a 	add.w	sl, r4, #26
 80050a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80050aa:	1a9b      	subs	r3, r3, r2
 80050ac:	eba3 0309 	sub.w	r3, r3, r9
 80050b0:	4543      	cmp	r3, r8
 80050b2:	f77f af7a 	ble.w	8004faa <_printf_float+0x242>
 80050b6:	2301      	movs	r3, #1
 80050b8:	4652      	mov	r2, sl
 80050ba:	4631      	mov	r1, r6
 80050bc:	4628      	mov	r0, r5
 80050be:	47b8      	blx	r7
 80050c0:	3001      	adds	r0, #1
 80050c2:	f43f aeac 	beq.w	8004e1e <_printf_float+0xb6>
 80050c6:	f108 0801 	add.w	r8, r8, #1
 80050ca:	e7ec      	b.n	80050a6 <_printf_float+0x33e>
 80050cc:	4613      	mov	r3, r2
 80050ce:	4631      	mov	r1, r6
 80050d0:	4642      	mov	r2, r8
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	d1c0      	bne.n	800505c <_printf_float+0x2f4>
 80050da:	e6a0      	b.n	8004e1e <_printf_float+0xb6>
 80050dc:	2301      	movs	r3, #1
 80050de:	4631      	mov	r1, r6
 80050e0:	4628      	mov	r0, r5
 80050e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f ae99 	beq.w	8004e1e <_printf_float+0xb6>
 80050ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80050ee:	f10b 0b01 	add.w	fp, fp, #1
 80050f2:	e7b9      	b.n	8005068 <_printf_float+0x300>
 80050f4:	4631      	mov	r1, r6
 80050f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050fa:	4628      	mov	r0, r5
 80050fc:	47b8      	blx	r7
 80050fe:	3001      	adds	r0, #1
 8005100:	d1bf      	bne.n	8005082 <_printf_float+0x31a>
 8005102:	e68c      	b.n	8004e1e <_printf_float+0xb6>
 8005104:	464b      	mov	r3, r9
 8005106:	4631      	mov	r1, r6
 8005108:	4628      	mov	r0, r5
 800510a:	eb08 020a 	add.w	r2, r8, sl
 800510e:	47b8      	blx	r7
 8005110:	3001      	adds	r0, #1
 8005112:	d1c2      	bne.n	800509a <_printf_float+0x332>
 8005114:	e683      	b.n	8004e1e <_printf_float+0xb6>
 8005116:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005118:	2a01      	cmp	r2, #1
 800511a:	dc01      	bgt.n	8005120 <_printf_float+0x3b8>
 800511c:	07db      	lsls	r3, r3, #31
 800511e:	d537      	bpl.n	8005190 <_printf_float+0x428>
 8005120:	2301      	movs	r3, #1
 8005122:	4642      	mov	r2, r8
 8005124:	4631      	mov	r1, r6
 8005126:	4628      	mov	r0, r5
 8005128:	47b8      	blx	r7
 800512a:	3001      	adds	r0, #1
 800512c:	f43f ae77 	beq.w	8004e1e <_printf_float+0xb6>
 8005130:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f ae6f 	beq.w	8004e1e <_printf_float+0xb6>
 8005140:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005144:	2200      	movs	r2, #0
 8005146:	2300      	movs	r3, #0
 8005148:	f7fb fce2 	bl	8000b10 <__aeabi_dcmpeq>
 800514c:	b9d8      	cbnz	r0, 8005186 <_printf_float+0x41e>
 800514e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005150:	f108 0201 	add.w	r2, r8, #1
 8005154:	3b01      	subs	r3, #1
 8005156:	4631      	mov	r1, r6
 8005158:	4628      	mov	r0, r5
 800515a:	47b8      	blx	r7
 800515c:	3001      	adds	r0, #1
 800515e:	d10e      	bne.n	800517e <_printf_float+0x416>
 8005160:	e65d      	b.n	8004e1e <_printf_float+0xb6>
 8005162:	2301      	movs	r3, #1
 8005164:	464a      	mov	r2, r9
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae56 	beq.w	8004e1e <_printf_float+0xb6>
 8005172:	f108 0801 	add.w	r8, r8, #1
 8005176:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005178:	3b01      	subs	r3, #1
 800517a:	4543      	cmp	r3, r8
 800517c:	dcf1      	bgt.n	8005162 <_printf_float+0x3fa>
 800517e:	4653      	mov	r3, sl
 8005180:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005184:	e6e0      	b.n	8004f48 <_printf_float+0x1e0>
 8005186:	f04f 0800 	mov.w	r8, #0
 800518a:	f104 091a 	add.w	r9, r4, #26
 800518e:	e7f2      	b.n	8005176 <_printf_float+0x40e>
 8005190:	2301      	movs	r3, #1
 8005192:	4642      	mov	r2, r8
 8005194:	e7df      	b.n	8005156 <_printf_float+0x3ee>
 8005196:	2301      	movs	r3, #1
 8005198:	464a      	mov	r2, r9
 800519a:	4631      	mov	r1, r6
 800519c:	4628      	mov	r0, r5
 800519e:	47b8      	blx	r7
 80051a0:	3001      	adds	r0, #1
 80051a2:	f43f ae3c 	beq.w	8004e1e <_printf_float+0xb6>
 80051a6:	f108 0801 	add.w	r8, r8, #1
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051ae:	1a5b      	subs	r3, r3, r1
 80051b0:	4543      	cmp	r3, r8
 80051b2:	dcf0      	bgt.n	8005196 <_printf_float+0x42e>
 80051b4:	e6fd      	b.n	8004fb2 <_printf_float+0x24a>
 80051b6:	f04f 0800 	mov.w	r8, #0
 80051ba:	f104 0919 	add.w	r9, r4, #25
 80051be:	e7f4      	b.n	80051aa <_printf_float+0x442>

080051c0 <_printf_common>:
 80051c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c4:	4616      	mov	r6, r2
 80051c6:	4699      	mov	r9, r3
 80051c8:	688a      	ldr	r2, [r1, #8]
 80051ca:	690b      	ldr	r3, [r1, #16]
 80051cc:	4607      	mov	r7, r0
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bfb8      	it	lt
 80051d2:	4613      	movlt	r3, r2
 80051d4:	6033      	str	r3, [r6, #0]
 80051d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051da:	460c      	mov	r4, r1
 80051dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051e0:	b10a      	cbz	r2, 80051e6 <_printf_common+0x26>
 80051e2:	3301      	adds	r3, #1
 80051e4:	6033      	str	r3, [r6, #0]
 80051e6:	6823      	ldr	r3, [r4, #0]
 80051e8:	0699      	lsls	r1, r3, #26
 80051ea:	bf42      	ittt	mi
 80051ec:	6833      	ldrmi	r3, [r6, #0]
 80051ee:	3302      	addmi	r3, #2
 80051f0:	6033      	strmi	r3, [r6, #0]
 80051f2:	6825      	ldr	r5, [r4, #0]
 80051f4:	f015 0506 	ands.w	r5, r5, #6
 80051f8:	d106      	bne.n	8005208 <_printf_common+0x48>
 80051fa:	f104 0a19 	add.w	sl, r4, #25
 80051fe:	68e3      	ldr	r3, [r4, #12]
 8005200:	6832      	ldr	r2, [r6, #0]
 8005202:	1a9b      	subs	r3, r3, r2
 8005204:	42ab      	cmp	r3, r5
 8005206:	dc28      	bgt.n	800525a <_printf_common+0x9a>
 8005208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800520c:	1e13      	subs	r3, r2, #0
 800520e:	6822      	ldr	r2, [r4, #0]
 8005210:	bf18      	it	ne
 8005212:	2301      	movne	r3, #1
 8005214:	0692      	lsls	r2, r2, #26
 8005216:	d42d      	bmi.n	8005274 <_printf_common+0xb4>
 8005218:	4649      	mov	r1, r9
 800521a:	4638      	mov	r0, r7
 800521c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005220:	47c0      	blx	r8
 8005222:	3001      	adds	r0, #1
 8005224:	d020      	beq.n	8005268 <_printf_common+0xa8>
 8005226:	6823      	ldr	r3, [r4, #0]
 8005228:	68e5      	ldr	r5, [r4, #12]
 800522a:	f003 0306 	and.w	r3, r3, #6
 800522e:	2b04      	cmp	r3, #4
 8005230:	bf18      	it	ne
 8005232:	2500      	movne	r5, #0
 8005234:	6832      	ldr	r2, [r6, #0]
 8005236:	f04f 0600 	mov.w	r6, #0
 800523a:	68a3      	ldr	r3, [r4, #8]
 800523c:	bf08      	it	eq
 800523e:	1aad      	subeq	r5, r5, r2
 8005240:	6922      	ldr	r2, [r4, #16]
 8005242:	bf08      	it	eq
 8005244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005248:	4293      	cmp	r3, r2
 800524a:	bfc4      	itt	gt
 800524c:	1a9b      	subgt	r3, r3, r2
 800524e:	18ed      	addgt	r5, r5, r3
 8005250:	341a      	adds	r4, #26
 8005252:	42b5      	cmp	r5, r6
 8005254:	d11a      	bne.n	800528c <_printf_common+0xcc>
 8005256:	2000      	movs	r0, #0
 8005258:	e008      	b.n	800526c <_printf_common+0xac>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4649      	mov	r1, r9
 8005260:	4638      	mov	r0, r7
 8005262:	47c0      	blx	r8
 8005264:	3001      	adds	r0, #1
 8005266:	d103      	bne.n	8005270 <_printf_common+0xb0>
 8005268:	f04f 30ff 	mov.w	r0, #4294967295
 800526c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005270:	3501      	adds	r5, #1
 8005272:	e7c4      	b.n	80051fe <_printf_common+0x3e>
 8005274:	2030      	movs	r0, #48	; 0x30
 8005276:	18e1      	adds	r1, r4, r3
 8005278:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800527c:	1c5a      	adds	r2, r3, #1
 800527e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005282:	4422      	add	r2, r4
 8005284:	3302      	adds	r3, #2
 8005286:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800528a:	e7c5      	b.n	8005218 <_printf_common+0x58>
 800528c:	2301      	movs	r3, #1
 800528e:	4622      	mov	r2, r4
 8005290:	4649      	mov	r1, r9
 8005292:	4638      	mov	r0, r7
 8005294:	47c0      	blx	r8
 8005296:	3001      	adds	r0, #1
 8005298:	d0e6      	beq.n	8005268 <_printf_common+0xa8>
 800529a:	3601      	adds	r6, #1
 800529c:	e7d9      	b.n	8005252 <_printf_common+0x92>
	...

080052a0 <_printf_i>:
 80052a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052a4:	7e0f      	ldrb	r7, [r1, #24]
 80052a6:	4691      	mov	r9, r2
 80052a8:	2f78      	cmp	r7, #120	; 0x78
 80052aa:	4680      	mov	r8, r0
 80052ac:	460c      	mov	r4, r1
 80052ae:	469a      	mov	sl, r3
 80052b0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052b6:	d807      	bhi.n	80052c8 <_printf_i+0x28>
 80052b8:	2f62      	cmp	r7, #98	; 0x62
 80052ba:	d80a      	bhi.n	80052d2 <_printf_i+0x32>
 80052bc:	2f00      	cmp	r7, #0
 80052be:	f000 80d9 	beq.w	8005474 <_printf_i+0x1d4>
 80052c2:	2f58      	cmp	r7, #88	; 0x58
 80052c4:	f000 80a4 	beq.w	8005410 <_printf_i+0x170>
 80052c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052d0:	e03a      	b.n	8005348 <_printf_i+0xa8>
 80052d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052d6:	2b15      	cmp	r3, #21
 80052d8:	d8f6      	bhi.n	80052c8 <_printf_i+0x28>
 80052da:	a101      	add	r1, pc, #4	; (adr r1, 80052e0 <_printf_i+0x40>)
 80052dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e0:	08005339 	.word	0x08005339
 80052e4:	0800534d 	.word	0x0800534d
 80052e8:	080052c9 	.word	0x080052c9
 80052ec:	080052c9 	.word	0x080052c9
 80052f0:	080052c9 	.word	0x080052c9
 80052f4:	080052c9 	.word	0x080052c9
 80052f8:	0800534d 	.word	0x0800534d
 80052fc:	080052c9 	.word	0x080052c9
 8005300:	080052c9 	.word	0x080052c9
 8005304:	080052c9 	.word	0x080052c9
 8005308:	080052c9 	.word	0x080052c9
 800530c:	0800545b 	.word	0x0800545b
 8005310:	0800537d 	.word	0x0800537d
 8005314:	0800543d 	.word	0x0800543d
 8005318:	080052c9 	.word	0x080052c9
 800531c:	080052c9 	.word	0x080052c9
 8005320:	0800547d 	.word	0x0800547d
 8005324:	080052c9 	.word	0x080052c9
 8005328:	0800537d 	.word	0x0800537d
 800532c:	080052c9 	.word	0x080052c9
 8005330:	080052c9 	.word	0x080052c9
 8005334:	08005445 	.word	0x08005445
 8005338:	682b      	ldr	r3, [r5, #0]
 800533a:	1d1a      	adds	r2, r3, #4
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	602a      	str	r2, [r5, #0]
 8005340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005348:	2301      	movs	r3, #1
 800534a:	e0a4      	b.n	8005496 <_printf_i+0x1f6>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	6829      	ldr	r1, [r5, #0]
 8005350:	0606      	lsls	r6, r0, #24
 8005352:	f101 0304 	add.w	r3, r1, #4
 8005356:	d50a      	bpl.n	800536e <_printf_i+0xce>
 8005358:	680e      	ldr	r6, [r1, #0]
 800535a:	602b      	str	r3, [r5, #0]
 800535c:	2e00      	cmp	r6, #0
 800535e:	da03      	bge.n	8005368 <_printf_i+0xc8>
 8005360:	232d      	movs	r3, #45	; 0x2d
 8005362:	4276      	negs	r6, r6
 8005364:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005368:	230a      	movs	r3, #10
 800536a:	485e      	ldr	r0, [pc, #376]	; (80054e4 <_printf_i+0x244>)
 800536c:	e019      	b.n	80053a2 <_printf_i+0x102>
 800536e:	680e      	ldr	r6, [r1, #0]
 8005370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005374:	602b      	str	r3, [r5, #0]
 8005376:	bf18      	it	ne
 8005378:	b236      	sxthne	r6, r6
 800537a:	e7ef      	b.n	800535c <_printf_i+0xbc>
 800537c:	682b      	ldr	r3, [r5, #0]
 800537e:	6820      	ldr	r0, [r4, #0]
 8005380:	1d19      	adds	r1, r3, #4
 8005382:	6029      	str	r1, [r5, #0]
 8005384:	0601      	lsls	r1, r0, #24
 8005386:	d501      	bpl.n	800538c <_printf_i+0xec>
 8005388:	681e      	ldr	r6, [r3, #0]
 800538a:	e002      	b.n	8005392 <_printf_i+0xf2>
 800538c:	0646      	lsls	r6, r0, #25
 800538e:	d5fb      	bpl.n	8005388 <_printf_i+0xe8>
 8005390:	881e      	ldrh	r6, [r3, #0]
 8005392:	2f6f      	cmp	r7, #111	; 0x6f
 8005394:	bf0c      	ite	eq
 8005396:	2308      	moveq	r3, #8
 8005398:	230a      	movne	r3, #10
 800539a:	4852      	ldr	r0, [pc, #328]	; (80054e4 <_printf_i+0x244>)
 800539c:	2100      	movs	r1, #0
 800539e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053a2:	6865      	ldr	r5, [r4, #4]
 80053a4:	2d00      	cmp	r5, #0
 80053a6:	bfa8      	it	ge
 80053a8:	6821      	ldrge	r1, [r4, #0]
 80053aa:	60a5      	str	r5, [r4, #8]
 80053ac:	bfa4      	itt	ge
 80053ae:	f021 0104 	bicge.w	r1, r1, #4
 80053b2:	6021      	strge	r1, [r4, #0]
 80053b4:	b90e      	cbnz	r6, 80053ba <_printf_i+0x11a>
 80053b6:	2d00      	cmp	r5, #0
 80053b8:	d04d      	beq.n	8005456 <_printf_i+0x1b6>
 80053ba:	4615      	mov	r5, r2
 80053bc:	fbb6 f1f3 	udiv	r1, r6, r3
 80053c0:	fb03 6711 	mls	r7, r3, r1, r6
 80053c4:	5dc7      	ldrb	r7, [r0, r7]
 80053c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053ca:	4637      	mov	r7, r6
 80053cc:	42bb      	cmp	r3, r7
 80053ce:	460e      	mov	r6, r1
 80053d0:	d9f4      	bls.n	80053bc <_printf_i+0x11c>
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d10b      	bne.n	80053ee <_printf_i+0x14e>
 80053d6:	6823      	ldr	r3, [r4, #0]
 80053d8:	07de      	lsls	r6, r3, #31
 80053da:	d508      	bpl.n	80053ee <_printf_i+0x14e>
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	6861      	ldr	r1, [r4, #4]
 80053e0:	4299      	cmp	r1, r3
 80053e2:	bfde      	ittt	le
 80053e4:	2330      	movle	r3, #48	; 0x30
 80053e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053ee:	1b52      	subs	r2, r2, r5
 80053f0:	6122      	str	r2, [r4, #16]
 80053f2:	464b      	mov	r3, r9
 80053f4:	4621      	mov	r1, r4
 80053f6:	4640      	mov	r0, r8
 80053f8:	f8cd a000 	str.w	sl, [sp]
 80053fc:	aa03      	add	r2, sp, #12
 80053fe:	f7ff fedf 	bl	80051c0 <_printf_common>
 8005402:	3001      	adds	r0, #1
 8005404:	d14c      	bne.n	80054a0 <_printf_i+0x200>
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
 800540a:	b004      	add	sp, #16
 800540c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005410:	4834      	ldr	r0, [pc, #208]	; (80054e4 <_printf_i+0x244>)
 8005412:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005416:	6829      	ldr	r1, [r5, #0]
 8005418:	6823      	ldr	r3, [r4, #0]
 800541a:	f851 6b04 	ldr.w	r6, [r1], #4
 800541e:	6029      	str	r1, [r5, #0]
 8005420:	061d      	lsls	r5, r3, #24
 8005422:	d514      	bpl.n	800544e <_printf_i+0x1ae>
 8005424:	07df      	lsls	r7, r3, #31
 8005426:	bf44      	itt	mi
 8005428:	f043 0320 	orrmi.w	r3, r3, #32
 800542c:	6023      	strmi	r3, [r4, #0]
 800542e:	b91e      	cbnz	r6, 8005438 <_printf_i+0x198>
 8005430:	6823      	ldr	r3, [r4, #0]
 8005432:	f023 0320 	bic.w	r3, r3, #32
 8005436:	6023      	str	r3, [r4, #0]
 8005438:	2310      	movs	r3, #16
 800543a:	e7af      	b.n	800539c <_printf_i+0xfc>
 800543c:	6823      	ldr	r3, [r4, #0]
 800543e:	f043 0320 	orr.w	r3, r3, #32
 8005442:	6023      	str	r3, [r4, #0]
 8005444:	2378      	movs	r3, #120	; 0x78
 8005446:	4828      	ldr	r0, [pc, #160]	; (80054e8 <_printf_i+0x248>)
 8005448:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800544c:	e7e3      	b.n	8005416 <_printf_i+0x176>
 800544e:	0659      	lsls	r1, r3, #25
 8005450:	bf48      	it	mi
 8005452:	b2b6      	uxthmi	r6, r6
 8005454:	e7e6      	b.n	8005424 <_printf_i+0x184>
 8005456:	4615      	mov	r5, r2
 8005458:	e7bb      	b.n	80053d2 <_printf_i+0x132>
 800545a:	682b      	ldr	r3, [r5, #0]
 800545c:	6826      	ldr	r6, [r4, #0]
 800545e:	1d18      	adds	r0, r3, #4
 8005460:	6961      	ldr	r1, [r4, #20]
 8005462:	6028      	str	r0, [r5, #0]
 8005464:	0635      	lsls	r5, r6, #24
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	d501      	bpl.n	800546e <_printf_i+0x1ce>
 800546a:	6019      	str	r1, [r3, #0]
 800546c:	e002      	b.n	8005474 <_printf_i+0x1d4>
 800546e:	0670      	lsls	r0, r6, #25
 8005470:	d5fb      	bpl.n	800546a <_printf_i+0x1ca>
 8005472:	8019      	strh	r1, [r3, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	4615      	mov	r5, r2
 8005478:	6123      	str	r3, [r4, #16]
 800547a:	e7ba      	b.n	80053f2 <_printf_i+0x152>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	2100      	movs	r1, #0
 8005480:	1d1a      	adds	r2, r3, #4
 8005482:	602a      	str	r2, [r5, #0]
 8005484:	681d      	ldr	r5, [r3, #0]
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	4628      	mov	r0, r5
 800548a:	f000 fed7 	bl	800623c <memchr>
 800548e:	b108      	cbz	r0, 8005494 <_printf_i+0x1f4>
 8005490:	1b40      	subs	r0, r0, r5
 8005492:	6060      	str	r0, [r4, #4]
 8005494:	6863      	ldr	r3, [r4, #4]
 8005496:	6123      	str	r3, [r4, #16]
 8005498:	2300      	movs	r3, #0
 800549a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549e:	e7a8      	b.n	80053f2 <_printf_i+0x152>
 80054a0:	462a      	mov	r2, r5
 80054a2:	4649      	mov	r1, r9
 80054a4:	4640      	mov	r0, r8
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	47d0      	blx	sl
 80054aa:	3001      	adds	r0, #1
 80054ac:	d0ab      	beq.n	8005406 <_printf_i+0x166>
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	079b      	lsls	r3, r3, #30
 80054b2:	d413      	bmi.n	80054dc <_printf_i+0x23c>
 80054b4:	68e0      	ldr	r0, [r4, #12]
 80054b6:	9b03      	ldr	r3, [sp, #12]
 80054b8:	4298      	cmp	r0, r3
 80054ba:	bfb8      	it	lt
 80054bc:	4618      	movlt	r0, r3
 80054be:	e7a4      	b.n	800540a <_printf_i+0x16a>
 80054c0:	2301      	movs	r3, #1
 80054c2:	4632      	mov	r2, r6
 80054c4:	4649      	mov	r1, r9
 80054c6:	4640      	mov	r0, r8
 80054c8:	47d0      	blx	sl
 80054ca:	3001      	adds	r0, #1
 80054cc:	d09b      	beq.n	8005406 <_printf_i+0x166>
 80054ce:	3501      	adds	r5, #1
 80054d0:	68e3      	ldr	r3, [r4, #12]
 80054d2:	9903      	ldr	r1, [sp, #12]
 80054d4:	1a5b      	subs	r3, r3, r1
 80054d6:	42ab      	cmp	r3, r5
 80054d8:	dcf2      	bgt.n	80054c0 <_printf_i+0x220>
 80054da:	e7eb      	b.n	80054b4 <_printf_i+0x214>
 80054dc:	2500      	movs	r5, #0
 80054de:	f104 0619 	add.w	r6, r4, #25
 80054e2:	e7f5      	b.n	80054d0 <_printf_i+0x230>
 80054e4:	08007a8e 	.word	0x08007a8e
 80054e8:	08007a9f 	.word	0x08007a9f

080054ec <siprintf>:
 80054ec:	b40e      	push	{r1, r2, r3}
 80054ee:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054f2:	b500      	push	{lr}
 80054f4:	b09c      	sub	sp, #112	; 0x70
 80054f6:	ab1d      	add	r3, sp, #116	; 0x74
 80054f8:	9002      	str	r0, [sp, #8]
 80054fa:	9006      	str	r0, [sp, #24]
 80054fc:	9107      	str	r1, [sp, #28]
 80054fe:	9104      	str	r1, [sp, #16]
 8005500:	4808      	ldr	r0, [pc, #32]	; (8005524 <siprintf+0x38>)
 8005502:	4909      	ldr	r1, [pc, #36]	; (8005528 <siprintf+0x3c>)
 8005504:	f853 2b04 	ldr.w	r2, [r3], #4
 8005508:	9105      	str	r1, [sp, #20]
 800550a:	6800      	ldr	r0, [r0, #0]
 800550c:	a902      	add	r1, sp, #8
 800550e:	9301      	str	r3, [sp, #4]
 8005510:	f001 fb7e 	bl	8006c10 <_svfiprintf_r>
 8005514:	2200      	movs	r2, #0
 8005516:	9b02      	ldr	r3, [sp, #8]
 8005518:	701a      	strb	r2, [r3, #0]
 800551a:	b01c      	add	sp, #112	; 0x70
 800551c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005520:	b003      	add	sp, #12
 8005522:	4770      	bx	lr
 8005524:	20000014 	.word	0x20000014
 8005528:	ffff0208 	.word	0xffff0208

0800552c <quorem>:
 800552c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005530:	6903      	ldr	r3, [r0, #16]
 8005532:	690c      	ldr	r4, [r1, #16]
 8005534:	4607      	mov	r7, r0
 8005536:	42a3      	cmp	r3, r4
 8005538:	f2c0 8082 	blt.w	8005640 <quorem+0x114>
 800553c:	3c01      	subs	r4, #1
 800553e:	f100 0514 	add.w	r5, r0, #20
 8005542:	f101 0814 	add.w	r8, r1, #20
 8005546:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800554a:	9301      	str	r3, [sp, #4]
 800554c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005550:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005554:	3301      	adds	r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	fbb2 f6f3 	udiv	r6, r2, r3
 800555c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005560:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005564:	d331      	bcc.n	80055ca <quorem+0x9e>
 8005566:	f04f 0e00 	mov.w	lr, #0
 800556a:	4640      	mov	r0, r8
 800556c:	46ac      	mov	ip, r5
 800556e:	46f2      	mov	sl, lr
 8005570:	f850 2b04 	ldr.w	r2, [r0], #4
 8005574:	b293      	uxth	r3, r2
 8005576:	fb06 e303 	mla	r3, r6, r3, lr
 800557a:	0c12      	lsrs	r2, r2, #16
 800557c:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005580:	b29b      	uxth	r3, r3
 8005582:	fb06 e202 	mla	r2, r6, r2, lr
 8005586:	ebaa 0303 	sub.w	r3, sl, r3
 800558a:	f8dc a000 	ldr.w	sl, [ip]
 800558e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005592:	fa1f fa8a 	uxth.w	sl, sl
 8005596:	4453      	add	r3, sl
 8005598:	f8dc a000 	ldr.w	sl, [ip]
 800559c:	b292      	uxth	r2, r2
 800559e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a6:	b29b      	uxth	r3, r3
 80055a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ac:	4581      	cmp	r9, r0
 80055ae:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055b2:	f84c 3b04 	str.w	r3, [ip], #4
 80055b6:	d2db      	bcs.n	8005570 <quorem+0x44>
 80055b8:	f855 300b 	ldr.w	r3, [r5, fp]
 80055bc:	b92b      	cbnz	r3, 80055ca <quorem+0x9e>
 80055be:	9b01      	ldr	r3, [sp, #4]
 80055c0:	3b04      	subs	r3, #4
 80055c2:	429d      	cmp	r5, r3
 80055c4:	461a      	mov	r2, r3
 80055c6:	d32f      	bcc.n	8005628 <quorem+0xfc>
 80055c8:	613c      	str	r4, [r7, #16]
 80055ca:	4638      	mov	r0, r7
 80055cc:	f001 f8d0 	bl	8006770 <__mcmp>
 80055d0:	2800      	cmp	r0, #0
 80055d2:	db25      	blt.n	8005620 <quorem+0xf4>
 80055d4:	4628      	mov	r0, r5
 80055d6:	f04f 0c00 	mov.w	ip, #0
 80055da:	3601      	adds	r6, #1
 80055dc:	f858 1b04 	ldr.w	r1, [r8], #4
 80055e0:	f8d0 e000 	ldr.w	lr, [r0]
 80055e4:	b28b      	uxth	r3, r1
 80055e6:	ebac 0303 	sub.w	r3, ip, r3
 80055ea:	fa1f f28e 	uxth.w	r2, lr
 80055ee:	4413      	add	r3, r2
 80055f0:	0c0a      	lsrs	r2, r1, #16
 80055f2:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005600:	45c1      	cmp	r9, r8
 8005602:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005606:	f840 3b04 	str.w	r3, [r0], #4
 800560a:	d2e7      	bcs.n	80055dc <quorem+0xb0>
 800560c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005610:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005614:	b922      	cbnz	r2, 8005620 <quorem+0xf4>
 8005616:	3b04      	subs	r3, #4
 8005618:	429d      	cmp	r5, r3
 800561a:	461a      	mov	r2, r3
 800561c:	d30a      	bcc.n	8005634 <quorem+0x108>
 800561e:	613c      	str	r4, [r7, #16]
 8005620:	4630      	mov	r0, r6
 8005622:	b003      	add	sp, #12
 8005624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005628:	6812      	ldr	r2, [r2, #0]
 800562a:	3b04      	subs	r3, #4
 800562c:	2a00      	cmp	r2, #0
 800562e:	d1cb      	bne.n	80055c8 <quorem+0x9c>
 8005630:	3c01      	subs	r4, #1
 8005632:	e7c6      	b.n	80055c2 <quorem+0x96>
 8005634:	6812      	ldr	r2, [r2, #0]
 8005636:	3b04      	subs	r3, #4
 8005638:	2a00      	cmp	r2, #0
 800563a:	d1f0      	bne.n	800561e <quorem+0xf2>
 800563c:	3c01      	subs	r4, #1
 800563e:	e7eb      	b.n	8005618 <quorem+0xec>
 8005640:	2000      	movs	r0, #0
 8005642:	e7ee      	b.n	8005622 <quorem+0xf6>
 8005644:	0000      	movs	r0, r0
	...

08005648 <_dtoa_r>:
 8005648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564c:	4616      	mov	r6, r2
 800564e:	461f      	mov	r7, r3
 8005650:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005652:	b099      	sub	sp, #100	; 0x64
 8005654:	4605      	mov	r5, r0
 8005656:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800565a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800565e:	b974      	cbnz	r4, 800567e <_dtoa_r+0x36>
 8005660:	2010      	movs	r0, #16
 8005662:	f000 fde3 	bl	800622c <malloc>
 8005666:	4602      	mov	r2, r0
 8005668:	6268      	str	r0, [r5, #36]	; 0x24
 800566a:	b920      	cbnz	r0, 8005676 <_dtoa_r+0x2e>
 800566c:	21ea      	movs	r1, #234	; 0xea
 800566e:	4ba8      	ldr	r3, [pc, #672]	; (8005910 <_dtoa_r+0x2c8>)
 8005670:	48a8      	ldr	r0, [pc, #672]	; (8005914 <_dtoa_r+0x2cc>)
 8005672:	f001 fbdd 	bl	8006e30 <__assert_func>
 8005676:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800567a:	6004      	str	r4, [r0, #0]
 800567c:	60c4      	str	r4, [r0, #12]
 800567e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005680:	6819      	ldr	r1, [r3, #0]
 8005682:	b151      	cbz	r1, 800569a <_dtoa_r+0x52>
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	2301      	movs	r3, #1
 8005688:	4093      	lsls	r3, r2
 800568a:	604a      	str	r2, [r1, #4]
 800568c:	608b      	str	r3, [r1, #8]
 800568e:	4628      	mov	r0, r5
 8005690:	f000 fe30 	bl	80062f4 <_Bfree>
 8005694:	2200      	movs	r2, #0
 8005696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005698:	601a      	str	r2, [r3, #0]
 800569a:	1e3b      	subs	r3, r7, #0
 800569c:	bfaf      	iteee	ge
 800569e:	2300      	movge	r3, #0
 80056a0:	2201      	movlt	r2, #1
 80056a2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056a6:	9305      	strlt	r3, [sp, #20]
 80056a8:	bfa8      	it	ge
 80056aa:	f8c8 3000 	strge.w	r3, [r8]
 80056ae:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80056b2:	4b99      	ldr	r3, [pc, #612]	; (8005918 <_dtoa_r+0x2d0>)
 80056b4:	bfb8      	it	lt
 80056b6:	f8c8 2000 	strlt.w	r2, [r8]
 80056ba:	ea33 0309 	bics.w	r3, r3, r9
 80056be:	d119      	bne.n	80056f4 <_dtoa_r+0xac>
 80056c0:	f242 730f 	movw	r3, #9999	; 0x270f
 80056c4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80056c6:	6013      	str	r3, [r2, #0]
 80056c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80056cc:	4333      	orrs	r3, r6
 80056ce:	f000 857f 	beq.w	80061d0 <_dtoa_r+0xb88>
 80056d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056d4:	b953      	cbnz	r3, 80056ec <_dtoa_r+0xa4>
 80056d6:	4b91      	ldr	r3, [pc, #580]	; (800591c <_dtoa_r+0x2d4>)
 80056d8:	e022      	b.n	8005720 <_dtoa_r+0xd8>
 80056da:	4b91      	ldr	r3, [pc, #580]	; (8005920 <_dtoa_r+0x2d8>)
 80056dc:	9303      	str	r3, [sp, #12]
 80056de:	3308      	adds	r3, #8
 80056e0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	9803      	ldr	r0, [sp, #12]
 80056e6:	b019      	add	sp, #100	; 0x64
 80056e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056ec:	4b8b      	ldr	r3, [pc, #556]	; (800591c <_dtoa_r+0x2d4>)
 80056ee:	9303      	str	r3, [sp, #12]
 80056f0:	3303      	adds	r3, #3
 80056f2:	e7f5      	b.n	80056e0 <_dtoa_r+0x98>
 80056f4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80056f8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80056fc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005700:	2200      	movs	r2, #0
 8005702:	2300      	movs	r3, #0
 8005704:	f7fb fa04 	bl	8000b10 <__aeabi_dcmpeq>
 8005708:	4680      	mov	r8, r0
 800570a:	b158      	cbz	r0, 8005724 <_dtoa_r+0xdc>
 800570c:	2301      	movs	r3, #1
 800570e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005710:	6013      	str	r3, [r2, #0]
 8005712:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 8558 	beq.w	80061ca <_dtoa_r+0xb82>
 800571a:	4882      	ldr	r0, [pc, #520]	; (8005924 <_dtoa_r+0x2dc>)
 800571c:	6018      	str	r0, [r3, #0]
 800571e:	1e43      	subs	r3, r0, #1
 8005720:	9303      	str	r3, [sp, #12]
 8005722:	e7df      	b.n	80056e4 <_dtoa_r+0x9c>
 8005724:	ab16      	add	r3, sp, #88	; 0x58
 8005726:	9301      	str	r3, [sp, #4]
 8005728:	ab17      	add	r3, sp, #92	; 0x5c
 800572a:	9300      	str	r3, [sp, #0]
 800572c:	4628      	mov	r0, r5
 800572e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005732:	f001 f8c5 	bl	80068c0 <__d2b>
 8005736:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800573a:	4683      	mov	fp, r0
 800573c:	2c00      	cmp	r4, #0
 800573e:	d07f      	beq.n	8005840 <_dtoa_r+0x1f8>
 8005740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005744:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005746:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800574a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800574e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005752:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005756:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800575a:	2200      	movs	r2, #0
 800575c:	4b72      	ldr	r3, [pc, #456]	; (8005928 <_dtoa_r+0x2e0>)
 800575e:	f7fa fdb7 	bl	80002d0 <__aeabi_dsub>
 8005762:	a365      	add	r3, pc, #404	; (adr r3, 80058f8 <_dtoa_r+0x2b0>)
 8005764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005768:	f7fa ff6a 	bl	8000640 <__aeabi_dmul>
 800576c:	a364      	add	r3, pc, #400	; (adr r3, 8005900 <_dtoa_r+0x2b8>)
 800576e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005772:	f7fa fdaf 	bl	80002d4 <__adddf3>
 8005776:	4606      	mov	r6, r0
 8005778:	4620      	mov	r0, r4
 800577a:	460f      	mov	r7, r1
 800577c:	f7fa fef6 	bl	800056c <__aeabi_i2d>
 8005780:	a361      	add	r3, pc, #388	; (adr r3, 8005908 <_dtoa_r+0x2c0>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa ff5b 	bl	8000640 <__aeabi_dmul>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4630      	mov	r0, r6
 8005790:	4639      	mov	r1, r7
 8005792:	f7fa fd9f 	bl	80002d4 <__adddf3>
 8005796:	4606      	mov	r6, r0
 8005798:	460f      	mov	r7, r1
 800579a:	f7fb fa01 	bl	8000ba0 <__aeabi_d2iz>
 800579e:	2200      	movs	r2, #0
 80057a0:	4682      	mov	sl, r0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4630      	mov	r0, r6
 80057a6:	4639      	mov	r1, r7
 80057a8:	f7fb f9bc 	bl	8000b24 <__aeabi_dcmplt>
 80057ac:	b148      	cbz	r0, 80057c2 <_dtoa_r+0x17a>
 80057ae:	4650      	mov	r0, sl
 80057b0:	f7fa fedc 	bl	800056c <__aeabi_i2d>
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	f7fb f9aa 	bl	8000b10 <__aeabi_dcmpeq>
 80057bc:	b908      	cbnz	r0, 80057c2 <_dtoa_r+0x17a>
 80057be:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057c2:	f1ba 0f16 	cmp.w	sl, #22
 80057c6:	d858      	bhi.n	800587a <_dtoa_r+0x232>
 80057c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057cc:	4b57      	ldr	r3, [pc, #348]	; (800592c <_dtoa_r+0x2e4>)
 80057ce:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	f7fb f9a5 	bl	8000b24 <__aeabi_dcmplt>
 80057da:	2800      	cmp	r0, #0
 80057dc:	d04f      	beq.n	800587e <_dtoa_r+0x236>
 80057de:	2300      	movs	r3, #0
 80057e0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80057e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80057e6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80057e8:	1b1c      	subs	r4, r3, r4
 80057ea:	1e63      	subs	r3, r4, #1
 80057ec:	9309      	str	r3, [sp, #36]	; 0x24
 80057ee:	bf49      	itett	mi
 80057f0:	f1c4 0301 	rsbmi	r3, r4, #1
 80057f4:	2300      	movpl	r3, #0
 80057f6:	9306      	strmi	r3, [sp, #24]
 80057f8:	2300      	movmi	r3, #0
 80057fa:	bf54      	ite	pl
 80057fc:	9306      	strpl	r3, [sp, #24]
 80057fe:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005800:	f1ba 0f00 	cmp.w	sl, #0
 8005804:	db3d      	blt.n	8005882 <_dtoa_r+0x23a>
 8005806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005808:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800580c:	4453      	add	r3, sl
 800580e:	9309      	str	r3, [sp, #36]	; 0x24
 8005810:	2300      	movs	r3, #0
 8005812:	930a      	str	r3, [sp, #40]	; 0x28
 8005814:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005816:	2b09      	cmp	r3, #9
 8005818:	f200 808c 	bhi.w	8005934 <_dtoa_r+0x2ec>
 800581c:	2b05      	cmp	r3, #5
 800581e:	bfc4      	itt	gt
 8005820:	3b04      	subgt	r3, #4
 8005822:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005824:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005826:	bfc8      	it	gt
 8005828:	2400      	movgt	r4, #0
 800582a:	f1a3 0302 	sub.w	r3, r3, #2
 800582e:	bfd8      	it	le
 8005830:	2401      	movle	r4, #1
 8005832:	2b03      	cmp	r3, #3
 8005834:	f200 808a 	bhi.w	800594c <_dtoa_r+0x304>
 8005838:	e8df f003 	tbb	[pc, r3]
 800583c:	5b4d4f2d 	.word	0x5b4d4f2d
 8005840:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005844:	441c      	add	r4, r3
 8005846:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800584a:	2b20      	cmp	r3, #32
 800584c:	bfc3      	ittte	gt
 800584e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005852:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005856:	fa09 f303 	lslgt.w	r3, r9, r3
 800585a:	f1c3 0320 	rsble	r3, r3, #32
 800585e:	bfc6      	itte	gt
 8005860:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005864:	4318      	orrgt	r0, r3
 8005866:	fa06 f003 	lslle.w	r0, r6, r3
 800586a:	f7fa fe6f 	bl	800054c <__aeabi_ui2d>
 800586e:	2301      	movs	r3, #1
 8005870:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005874:	3c01      	subs	r4, #1
 8005876:	9313      	str	r3, [sp, #76]	; 0x4c
 8005878:	e76f      	b.n	800575a <_dtoa_r+0x112>
 800587a:	2301      	movs	r3, #1
 800587c:	e7b2      	b.n	80057e4 <_dtoa_r+0x19c>
 800587e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005880:	e7b1      	b.n	80057e6 <_dtoa_r+0x19e>
 8005882:	9b06      	ldr	r3, [sp, #24]
 8005884:	eba3 030a 	sub.w	r3, r3, sl
 8005888:	9306      	str	r3, [sp, #24]
 800588a:	f1ca 0300 	rsb	r3, sl, #0
 800588e:	930a      	str	r3, [sp, #40]	; 0x28
 8005890:	2300      	movs	r3, #0
 8005892:	930e      	str	r3, [sp, #56]	; 0x38
 8005894:	e7be      	b.n	8005814 <_dtoa_r+0x1cc>
 8005896:	2300      	movs	r3, #0
 8005898:	930b      	str	r3, [sp, #44]	; 0x2c
 800589a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800589c:	2b00      	cmp	r3, #0
 800589e:	dc58      	bgt.n	8005952 <_dtoa_r+0x30a>
 80058a0:	f04f 0901 	mov.w	r9, #1
 80058a4:	464b      	mov	r3, r9
 80058a6:	f8cd 9020 	str.w	r9, [sp, #32]
 80058aa:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80058ae:	2200      	movs	r2, #0
 80058b0:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80058b2:	6042      	str	r2, [r0, #4]
 80058b4:	2204      	movs	r2, #4
 80058b6:	f102 0614 	add.w	r6, r2, #20
 80058ba:	429e      	cmp	r6, r3
 80058bc:	6841      	ldr	r1, [r0, #4]
 80058be:	d94e      	bls.n	800595e <_dtoa_r+0x316>
 80058c0:	4628      	mov	r0, r5
 80058c2:	f000 fcd7 	bl	8006274 <_Balloc>
 80058c6:	9003      	str	r0, [sp, #12]
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d14c      	bne.n	8005966 <_dtoa_r+0x31e>
 80058cc:	4602      	mov	r2, r0
 80058ce:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80058d2:	4b17      	ldr	r3, [pc, #92]	; (8005930 <_dtoa_r+0x2e8>)
 80058d4:	e6cc      	b.n	8005670 <_dtoa_r+0x28>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7de      	b.n	8005898 <_dtoa_r+0x250>
 80058da:	2300      	movs	r3, #0
 80058dc:	930b      	str	r3, [sp, #44]	; 0x2c
 80058de:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058e0:	eb0a 0903 	add.w	r9, sl, r3
 80058e4:	f109 0301 	add.w	r3, r9, #1
 80058e8:	2b01      	cmp	r3, #1
 80058ea:	9308      	str	r3, [sp, #32]
 80058ec:	bfb8      	it	lt
 80058ee:	2301      	movlt	r3, #1
 80058f0:	e7dd      	b.n	80058ae <_dtoa_r+0x266>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e7f2      	b.n	80058dc <_dtoa_r+0x294>
 80058f6:	bf00      	nop
 80058f8:	636f4361 	.word	0x636f4361
 80058fc:	3fd287a7 	.word	0x3fd287a7
 8005900:	8b60c8b3 	.word	0x8b60c8b3
 8005904:	3fc68a28 	.word	0x3fc68a28
 8005908:	509f79fb 	.word	0x509f79fb
 800590c:	3fd34413 	.word	0x3fd34413
 8005910:	08007abd 	.word	0x08007abd
 8005914:	08007ad4 	.word	0x08007ad4
 8005918:	7ff00000 	.word	0x7ff00000
 800591c:	08007ab9 	.word	0x08007ab9
 8005920:	08007ab0 	.word	0x08007ab0
 8005924:	08007a8d 	.word	0x08007a8d
 8005928:	3ff80000 	.word	0x3ff80000
 800592c:	08007bc8 	.word	0x08007bc8
 8005930:	08007b2f 	.word	0x08007b2f
 8005934:	2401      	movs	r4, #1
 8005936:	2300      	movs	r3, #0
 8005938:	940b      	str	r4, [sp, #44]	; 0x2c
 800593a:	9322      	str	r3, [sp, #136]	; 0x88
 800593c:	f04f 39ff 	mov.w	r9, #4294967295
 8005940:	2200      	movs	r2, #0
 8005942:	2312      	movs	r3, #18
 8005944:	f8cd 9020 	str.w	r9, [sp, #32]
 8005948:	9223      	str	r2, [sp, #140]	; 0x8c
 800594a:	e7b0      	b.n	80058ae <_dtoa_r+0x266>
 800594c:	2301      	movs	r3, #1
 800594e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005950:	e7f4      	b.n	800593c <_dtoa_r+0x2f4>
 8005952:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005956:	464b      	mov	r3, r9
 8005958:	f8cd 9020 	str.w	r9, [sp, #32]
 800595c:	e7a7      	b.n	80058ae <_dtoa_r+0x266>
 800595e:	3101      	adds	r1, #1
 8005960:	6041      	str	r1, [r0, #4]
 8005962:	0052      	lsls	r2, r2, #1
 8005964:	e7a7      	b.n	80058b6 <_dtoa_r+0x26e>
 8005966:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005968:	9a03      	ldr	r2, [sp, #12]
 800596a:	601a      	str	r2, [r3, #0]
 800596c:	9b08      	ldr	r3, [sp, #32]
 800596e:	2b0e      	cmp	r3, #14
 8005970:	f200 80a8 	bhi.w	8005ac4 <_dtoa_r+0x47c>
 8005974:	2c00      	cmp	r4, #0
 8005976:	f000 80a5 	beq.w	8005ac4 <_dtoa_r+0x47c>
 800597a:	f1ba 0f00 	cmp.w	sl, #0
 800597e:	dd34      	ble.n	80059ea <_dtoa_r+0x3a2>
 8005980:	4a9a      	ldr	r2, [pc, #616]	; (8005bec <_dtoa_r+0x5a4>)
 8005982:	f00a 030f 	and.w	r3, sl, #15
 8005986:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800598a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800598e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005992:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005996:	ea4f 142a 	mov.w	r4, sl, asr #4
 800599a:	d016      	beq.n	80059ca <_dtoa_r+0x382>
 800599c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059a0:	4b93      	ldr	r3, [pc, #588]	; (8005bf0 <_dtoa_r+0x5a8>)
 80059a2:	2703      	movs	r7, #3
 80059a4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059a8:	f7fa ff74 	bl	8000894 <__aeabi_ddiv>
 80059ac:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059b0:	f004 040f 	and.w	r4, r4, #15
 80059b4:	4e8e      	ldr	r6, [pc, #568]	; (8005bf0 <_dtoa_r+0x5a8>)
 80059b6:	b954      	cbnz	r4, 80059ce <_dtoa_r+0x386>
 80059b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059c0:	f7fa ff68 	bl	8000894 <__aeabi_ddiv>
 80059c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059c8:	e029      	b.n	8005a1e <_dtoa_r+0x3d6>
 80059ca:	2702      	movs	r7, #2
 80059cc:	e7f2      	b.n	80059b4 <_dtoa_r+0x36c>
 80059ce:	07e1      	lsls	r1, r4, #31
 80059d0:	d508      	bpl.n	80059e4 <_dtoa_r+0x39c>
 80059d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059d6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059da:	f7fa fe31 	bl	8000640 <__aeabi_dmul>
 80059de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059e2:	3701      	adds	r7, #1
 80059e4:	1064      	asrs	r4, r4, #1
 80059e6:	3608      	adds	r6, #8
 80059e8:	e7e5      	b.n	80059b6 <_dtoa_r+0x36e>
 80059ea:	f000 80a5 	beq.w	8005b38 <_dtoa_r+0x4f0>
 80059ee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80059f2:	f1ca 0400 	rsb	r4, sl, #0
 80059f6:	4b7d      	ldr	r3, [pc, #500]	; (8005bec <_dtoa_r+0x5a4>)
 80059f8:	f004 020f 	and.w	r2, r4, #15
 80059fc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a04:	f7fa fe1c 	bl	8000640 <__aeabi_dmul>
 8005a08:	2702      	movs	r7, #2
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a10:	4e77      	ldr	r6, [pc, #476]	; (8005bf0 <_dtoa_r+0x5a8>)
 8005a12:	1124      	asrs	r4, r4, #4
 8005a14:	2c00      	cmp	r4, #0
 8005a16:	f040 8084 	bne.w	8005b22 <_dtoa_r+0x4da>
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1d2      	bne.n	80059c4 <_dtoa_r+0x37c>
 8005a1e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	f000 808b 	beq.w	8005b3c <_dtoa_r+0x4f4>
 8005a26:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005a2a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005a2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a32:	2200      	movs	r2, #0
 8005a34:	4b6f      	ldr	r3, [pc, #444]	; (8005bf4 <_dtoa_r+0x5ac>)
 8005a36:	f7fb f875 	bl	8000b24 <__aeabi_dcmplt>
 8005a3a:	2800      	cmp	r0, #0
 8005a3c:	d07e      	beq.n	8005b3c <_dtoa_r+0x4f4>
 8005a3e:	9b08      	ldr	r3, [sp, #32]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d07b      	beq.n	8005b3c <_dtoa_r+0x4f4>
 8005a44:	f1b9 0f00 	cmp.w	r9, #0
 8005a48:	dd38      	ble.n	8005abc <_dtoa_r+0x474>
 8005a4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b69      	ldr	r3, [pc, #420]	; (8005bf8 <_dtoa_r+0x5b0>)
 8005a52:	f7fa fdf5 	bl	8000640 <__aeabi_dmul>
 8005a56:	464c      	mov	r4, r9
 8005a58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a5c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005a60:	3701      	adds	r7, #1
 8005a62:	4638      	mov	r0, r7
 8005a64:	f7fa fd82 	bl	800056c <__aeabi_i2d>
 8005a68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005a6c:	f7fa fde8 	bl	8000640 <__aeabi_dmul>
 8005a70:	2200      	movs	r2, #0
 8005a72:	4b62      	ldr	r3, [pc, #392]	; (8005bfc <_dtoa_r+0x5b4>)
 8005a74:	f7fa fc2e 	bl	80002d4 <__adddf3>
 8005a78:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005a7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a80:	9611      	str	r6, [sp, #68]	; 0x44
 8005a82:	2c00      	cmp	r4, #0
 8005a84:	d15d      	bne.n	8005b42 <_dtoa_r+0x4fa>
 8005a86:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4b5c      	ldr	r3, [pc, #368]	; (8005c00 <_dtoa_r+0x5b8>)
 8005a8e:	f7fa fc1f 	bl	80002d0 <__aeabi_dsub>
 8005a92:	4602      	mov	r2, r0
 8005a94:	460b      	mov	r3, r1
 8005a96:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a9a:	4633      	mov	r3, r6
 8005a9c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005a9e:	f7fb f85f 	bl	8000b60 <__aeabi_dcmpgt>
 8005aa2:	2800      	cmp	r0, #0
 8005aa4:	f040 829c 	bne.w	8005fe0 <_dtoa_r+0x998>
 8005aa8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005aae:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005ab2:	f7fb f837 	bl	8000b24 <__aeabi_dcmplt>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	f040 8290 	bne.w	8005fdc <_dtoa_r+0x994>
 8005abc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005ac0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005ac4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	f2c0 8152 	blt.w	8005d70 <_dtoa_r+0x728>
 8005acc:	f1ba 0f0e 	cmp.w	sl, #14
 8005ad0:	f300 814e 	bgt.w	8005d70 <_dtoa_r+0x728>
 8005ad4:	4b45      	ldr	r3, [pc, #276]	; (8005bec <_dtoa_r+0x5a4>)
 8005ad6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005ada:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005ade:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005ae2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	f280 80db 	bge.w	8005ca0 <_dtoa_r+0x658>
 8005aea:	9b08      	ldr	r3, [sp, #32]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	f300 80d7 	bgt.w	8005ca0 <_dtoa_r+0x658>
 8005af2:	f040 8272 	bne.w	8005fda <_dtoa_r+0x992>
 8005af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005afa:	2200      	movs	r2, #0
 8005afc:	4b40      	ldr	r3, [pc, #256]	; (8005c00 <_dtoa_r+0x5b8>)
 8005afe:	f7fa fd9f 	bl	8000640 <__aeabi_dmul>
 8005b02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b06:	f7fb f821 	bl	8000b4c <__aeabi_dcmpge>
 8005b0a:	9c08      	ldr	r4, [sp, #32]
 8005b0c:	4626      	mov	r6, r4
 8005b0e:	2800      	cmp	r0, #0
 8005b10:	f040 8248 	bne.w	8005fa4 <_dtoa_r+0x95c>
 8005b14:	2331      	movs	r3, #49	; 0x31
 8005b16:	9f03      	ldr	r7, [sp, #12]
 8005b18:	f10a 0a01 	add.w	sl, sl, #1
 8005b1c:	f807 3b01 	strb.w	r3, [r7], #1
 8005b20:	e244      	b.n	8005fac <_dtoa_r+0x964>
 8005b22:	07e2      	lsls	r2, r4, #31
 8005b24:	d505      	bpl.n	8005b32 <_dtoa_r+0x4ea>
 8005b26:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005b2a:	f7fa fd89 	bl	8000640 <__aeabi_dmul>
 8005b2e:	2301      	movs	r3, #1
 8005b30:	3701      	adds	r7, #1
 8005b32:	1064      	asrs	r4, r4, #1
 8005b34:	3608      	adds	r6, #8
 8005b36:	e76d      	b.n	8005a14 <_dtoa_r+0x3cc>
 8005b38:	2702      	movs	r7, #2
 8005b3a:	e770      	b.n	8005a1e <_dtoa_r+0x3d6>
 8005b3c:	46d0      	mov	r8, sl
 8005b3e:	9c08      	ldr	r4, [sp, #32]
 8005b40:	e78f      	b.n	8005a62 <_dtoa_r+0x41a>
 8005b42:	9903      	ldr	r1, [sp, #12]
 8005b44:	4b29      	ldr	r3, [pc, #164]	; (8005bec <_dtoa_r+0x5a4>)
 8005b46:	4421      	add	r1, r4
 8005b48:	9112      	str	r1, [sp, #72]	; 0x48
 8005b4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005b4c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005b50:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005b54:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b58:	2900      	cmp	r1, #0
 8005b5a:	d055      	beq.n	8005c08 <_dtoa_r+0x5c0>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	4929      	ldr	r1, [pc, #164]	; (8005c04 <_dtoa_r+0x5bc>)
 8005b60:	f7fa fe98 	bl	8000894 <__aeabi_ddiv>
 8005b64:	463b      	mov	r3, r7
 8005b66:	4632      	mov	r2, r6
 8005b68:	f7fa fbb2 	bl	80002d0 <__aeabi_dsub>
 8005b6c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005b70:	9f03      	ldr	r7, [sp, #12]
 8005b72:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b76:	f7fb f813 	bl	8000ba0 <__aeabi_d2iz>
 8005b7a:	4604      	mov	r4, r0
 8005b7c:	f7fa fcf6 	bl	800056c <__aeabi_i2d>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b88:	f7fa fba2 	bl	80002d0 <__aeabi_dsub>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	3430      	adds	r4, #48	; 0x30
 8005b92:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005b96:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005b9a:	f807 4b01 	strb.w	r4, [r7], #1
 8005b9e:	f7fa ffc1 	bl	8000b24 <__aeabi_dcmplt>
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	d174      	bne.n	8005c90 <_dtoa_r+0x648>
 8005ba6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005baa:	2000      	movs	r0, #0
 8005bac:	4911      	ldr	r1, [pc, #68]	; (8005bf4 <_dtoa_r+0x5ac>)
 8005bae:	f7fa fb8f 	bl	80002d0 <__aeabi_dsub>
 8005bb2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005bb6:	f7fa ffb5 	bl	8000b24 <__aeabi_dcmplt>
 8005bba:	2800      	cmp	r0, #0
 8005bbc:	f040 80b7 	bne.w	8005d2e <_dtoa_r+0x6e6>
 8005bc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005bc2:	429f      	cmp	r7, r3
 8005bc4:	f43f af7a 	beq.w	8005abc <_dtoa_r+0x474>
 8005bc8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005bcc:	2200      	movs	r2, #0
 8005bce:	4b0a      	ldr	r3, [pc, #40]	; (8005bf8 <_dtoa_r+0x5b0>)
 8005bd0:	f7fa fd36 	bl	8000640 <__aeabi_dmul>
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005bda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bde:	4b06      	ldr	r3, [pc, #24]	; (8005bf8 <_dtoa_r+0x5b0>)
 8005be0:	f7fa fd2e 	bl	8000640 <__aeabi_dmul>
 8005be4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005be8:	e7c3      	b.n	8005b72 <_dtoa_r+0x52a>
 8005bea:	bf00      	nop
 8005bec:	08007bc8 	.word	0x08007bc8
 8005bf0:	08007ba0 	.word	0x08007ba0
 8005bf4:	3ff00000 	.word	0x3ff00000
 8005bf8:	40240000 	.word	0x40240000
 8005bfc:	401c0000 	.word	0x401c0000
 8005c00:	40140000 	.word	0x40140000
 8005c04:	3fe00000 	.word	0x3fe00000
 8005c08:	4630      	mov	r0, r6
 8005c0a:	4639      	mov	r1, r7
 8005c0c:	f7fa fd18 	bl	8000640 <__aeabi_dmul>
 8005c10:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c12:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005c16:	9c03      	ldr	r4, [sp, #12]
 8005c18:	9314      	str	r3, [sp, #80]	; 0x50
 8005c1a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c1e:	f7fa ffbf 	bl	8000ba0 <__aeabi_d2iz>
 8005c22:	9015      	str	r0, [sp, #84]	; 0x54
 8005c24:	f7fa fca2 	bl	800056c <__aeabi_i2d>
 8005c28:	4602      	mov	r2, r0
 8005c2a:	460b      	mov	r3, r1
 8005c2c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c30:	f7fa fb4e 	bl	80002d0 <__aeabi_dsub>
 8005c34:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005c36:	4606      	mov	r6, r0
 8005c38:	3330      	adds	r3, #48	; 0x30
 8005c3a:	f804 3b01 	strb.w	r3, [r4], #1
 8005c3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005c40:	460f      	mov	r7, r1
 8005c42:	429c      	cmp	r4, r3
 8005c44:	f04f 0200 	mov.w	r2, #0
 8005c48:	d124      	bne.n	8005c94 <_dtoa_r+0x64c>
 8005c4a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005c4e:	4bb0      	ldr	r3, [pc, #704]	; (8005f10 <_dtoa_r+0x8c8>)
 8005c50:	f7fa fb40 	bl	80002d4 <__adddf3>
 8005c54:	4602      	mov	r2, r0
 8005c56:	460b      	mov	r3, r1
 8005c58:	4630      	mov	r0, r6
 8005c5a:	4639      	mov	r1, r7
 8005c5c:	f7fa ff80 	bl	8000b60 <__aeabi_dcmpgt>
 8005c60:	2800      	cmp	r0, #0
 8005c62:	d163      	bne.n	8005d2c <_dtoa_r+0x6e4>
 8005c64:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005c68:	2000      	movs	r0, #0
 8005c6a:	49a9      	ldr	r1, [pc, #676]	; (8005f10 <_dtoa_r+0x8c8>)
 8005c6c:	f7fa fb30 	bl	80002d0 <__aeabi_dsub>
 8005c70:	4602      	mov	r2, r0
 8005c72:	460b      	mov	r3, r1
 8005c74:	4630      	mov	r0, r6
 8005c76:	4639      	mov	r1, r7
 8005c78:	f7fa ff54 	bl	8000b24 <__aeabi_dcmplt>
 8005c7c:	2800      	cmp	r0, #0
 8005c7e:	f43f af1d 	beq.w	8005abc <_dtoa_r+0x474>
 8005c82:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005c84:	1e7b      	subs	r3, r7, #1
 8005c86:	9314      	str	r3, [sp, #80]	; 0x50
 8005c88:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005c8c:	2b30      	cmp	r3, #48	; 0x30
 8005c8e:	d0f8      	beq.n	8005c82 <_dtoa_r+0x63a>
 8005c90:	46c2      	mov	sl, r8
 8005c92:	e03b      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005c94:	4b9f      	ldr	r3, [pc, #636]	; (8005f14 <_dtoa_r+0x8cc>)
 8005c96:	f7fa fcd3 	bl	8000640 <__aeabi_dmul>
 8005c9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c9e:	e7bc      	b.n	8005c1a <_dtoa_r+0x5d2>
 8005ca0:	9f03      	ldr	r7, [sp, #12]
 8005ca2:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005ca6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	f7fa fdf1 	bl	8000894 <__aeabi_ddiv>
 8005cb2:	f7fa ff75 	bl	8000ba0 <__aeabi_d2iz>
 8005cb6:	4604      	mov	r4, r0
 8005cb8:	f7fa fc58 	bl	800056c <__aeabi_i2d>
 8005cbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cc0:	f7fa fcbe 	bl	8000640 <__aeabi_dmul>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	4640      	mov	r0, r8
 8005cca:	4649      	mov	r1, r9
 8005ccc:	f7fa fb00 	bl	80002d0 <__aeabi_dsub>
 8005cd0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005cd4:	f807 6b01 	strb.w	r6, [r7], #1
 8005cd8:	9e03      	ldr	r6, [sp, #12]
 8005cda:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005cde:	1bbe      	subs	r6, r7, r6
 8005ce0:	45b4      	cmp	ip, r6
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	d136      	bne.n	8005d56 <_dtoa_r+0x70e>
 8005ce8:	f7fa faf4 	bl	80002d4 <__adddf3>
 8005cec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	f7fa ff34 	bl	8000b60 <__aeabi_dcmpgt>
 8005cf8:	bb58      	cbnz	r0, 8005d52 <_dtoa_r+0x70a>
 8005cfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005cfe:	4640      	mov	r0, r8
 8005d00:	4649      	mov	r1, r9
 8005d02:	f7fa ff05 	bl	8000b10 <__aeabi_dcmpeq>
 8005d06:	b108      	cbz	r0, 8005d0c <_dtoa_r+0x6c4>
 8005d08:	07e1      	lsls	r1, r4, #31
 8005d0a:	d422      	bmi.n	8005d52 <_dtoa_r+0x70a>
 8005d0c:	4628      	mov	r0, r5
 8005d0e:	4659      	mov	r1, fp
 8005d10:	f000 faf0 	bl	80062f4 <_Bfree>
 8005d14:	2300      	movs	r3, #0
 8005d16:	703b      	strb	r3, [r7, #0]
 8005d18:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005d1a:	f10a 0001 	add.w	r0, sl, #1
 8005d1e:	6018      	str	r0, [r3, #0]
 8005d20:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	f43f acde 	beq.w	80056e4 <_dtoa_r+0x9c>
 8005d28:	601f      	str	r7, [r3, #0]
 8005d2a:	e4db      	b.n	80056e4 <_dtoa_r+0x9c>
 8005d2c:	4627      	mov	r7, r4
 8005d2e:	463b      	mov	r3, r7
 8005d30:	461f      	mov	r7, r3
 8005d32:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d36:	2a39      	cmp	r2, #57	; 0x39
 8005d38:	d107      	bne.n	8005d4a <_dtoa_r+0x702>
 8005d3a:	9a03      	ldr	r2, [sp, #12]
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d1f7      	bne.n	8005d30 <_dtoa_r+0x6e8>
 8005d40:	2230      	movs	r2, #48	; 0x30
 8005d42:	9903      	ldr	r1, [sp, #12]
 8005d44:	f108 0801 	add.w	r8, r8, #1
 8005d48:	700a      	strb	r2, [r1, #0]
 8005d4a:	781a      	ldrb	r2, [r3, #0]
 8005d4c:	3201      	adds	r2, #1
 8005d4e:	701a      	strb	r2, [r3, #0]
 8005d50:	e79e      	b.n	8005c90 <_dtoa_r+0x648>
 8005d52:	46d0      	mov	r8, sl
 8005d54:	e7eb      	b.n	8005d2e <_dtoa_r+0x6e6>
 8005d56:	2200      	movs	r2, #0
 8005d58:	4b6e      	ldr	r3, [pc, #440]	; (8005f14 <_dtoa_r+0x8cc>)
 8005d5a:	f7fa fc71 	bl	8000640 <__aeabi_dmul>
 8005d5e:	2200      	movs	r2, #0
 8005d60:	2300      	movs	r3, #0
 8005d62:	4680      	mov	r8, r0
 8005d64:	4689      	mov	r9, r1
 8005d66:	f7fa fed3 	bl	8000b10 <__aeabi_dcmpeq>
 8005d6a:	2800      	cmp	r0, #0
 8005d6c:	d09b      	beq.n	8005ca6 <_dtoa_r+0x65e>
 8005d6e:	e7cd      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005d70:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d72:	2a00      	cmp	r2, #0
 8005d74:	f000 80d0 	beq.w	8005f18 <_dtoa_r+0x8d0>
 8005d78:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005d7a:	2a01      	cmp	r2, #1
 8005d7c:	f300 80ae 	bgt.w	8005edc <_dtoa_r+0x894>
 8005d80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d82:	2a00      	cmp	r2, #0
 8005d84:	f000 80a6 	beq.w	8005ed4 <_dtoa_r+0x88c>
 8005d88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d8c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d8e:	9f06      	ldr	r7, [sp, #24]
 8005d90:	9a06      	ldr	r2, [sp, #24]
 8005d92:	2101      	movs	r1, #1
 8005d94:	441a      	add	r2, r3
 8005d96:	9206      	str	r2, [sp, #24]
 8005d98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005d9a:	4628      	mov	r0, r5
 8005d9c:	441a      	add	r2, r3
 8005d9e:	9209      	str	r2, [sp, #36]	; 0x24
 8005da0:	f000 fb5e 	bl	8006460 <__i2b>
 8005da4:	4606      	mov	r6, r0
 8005da6:	2f00      	cmp	r7, #0
 8005da8:	dd0c      	ble.n	8005dc4 <_dtoa_r+0x77c>
 8005daa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	dd09      	ble.n	8005dc4 <_dtoa_r+0x77c>
 8005db0:	42bb      	cmp	r3, r7
 8005db2:	bfa8      	it	ge
 8005db4:	463b      	movge	r3, r7
 8005db6:	9a06      	ldr	r2, [sp, #24]
 8005db8:	1aff      	subs	r7, r7, r3
 8005dba:	1ad2      	subs	r2, r2, r3
 8005dbc:	9206      	str	r2, [sp, #24]
 8005dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc0:	1ad3      	subs	r3, r2, r3
 8005dc2:	9309      	str	r3, [sp, #36]	; 0x24
 8005dc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dc6:	b1f3      	cbz	r3, 8005e06 <_dtoa_r+0x7be>
 8005dc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	f000 80a8 	beq.w	8005f20 <_dtoa_r+0x8d8>
 8005dd0:	2c00      	cmp	r4, #0
 8005dd2:	dd10      	ble.n	8005df6 <_dtoa_r+0x7ae>
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4622      	mov	r2, r4
 8005dd8:	4628      	mov	r0, r5
 8005dda:	f000 fbff 	bl	80065dc <__pow5mult>
 8005dde:	465a      	mov	r2, fp
 8005de0:	4601      	mov	r1, r0
 8005de2:	4606      	mov	r6, r0
 8005de4:	4628      	mov	r0, r5
 8005de6:	f000 fb51 	bl	800648c <__multiply>
 8005dea:	4680      	mov	r8, r0
 8005dec:	4659      	mov	r1, fp
 8005dee:	4628      	mov	r0, r5
 8005df0:	f000 fa80 	bl	80062f4 <_Bfree>
 8005df4:	46c3      	mov	fp, r8
 8005df6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005df8:	1b1a      	subs	r2, r3, r4
 8005dfa:	d004      	beq.n	8005e06 <_dtoa_r+0x7be>
 8005dfc:	4659      	mov	r1, fp
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f000 fbec 	bl	80065dc <__pow5mult>
 8005e04:	4683      	mov	fp, r0
 8005e06:	2101      	movs	r1, #1
 8005e08:	4628      	mov	r0, r5
 8005e0a:	f000 fb29 	bl	8006460 <__i2b>
 8005e0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005e10:	4604      	mov	r4, r0
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f340 8086 	ble.w	8005f24 <_dtoa_r+0x8dc>
 8005e18:	461a      	mov	r2, r3
 8005e1a:	4601      	mov	r1, r0
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	f000 fbdd 	bl	80065dc <__pow5mult>
 8005e22:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005e24:	4604      	mov	r4, r0
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	dd7f      	ble.n	8005f2a <_dtoa_r+0x8e2>
 8005e2a:	f04f 0800 	mov.w	r8, #0
 8005e2e:	6923      	ldr	r3, [r4, #16]
 8005e30:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e34:	6918      	ldr	r0, [r3, #16]
 8005e36:	f000 fac5 	bl	80063c4 <__hi0bits>
 8005e3a:	f1c0 0020 	rsb	r0, r0, #32
 8005e3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e40:	4418      	add	r0, r3
 8005e42:	f010 001f 	ands.w	r0, r0, #31
 8005e46:	f000 8092 	beq.w	8005f6e <_dtoa_r+0x926>
 8005e4a:	f1c0 0320 	rsb	r3, r0, #32
 8005e4e:	2b04      	cmp	r3, #4
 8005e50:	f340 808a 	ble.w	8005f68 <_dtoa_r+0x920>
 8005e54:	f1c0 001c 	rsb	r0, r0, #28
 8005e58:	9b06      	ldr	r3, [sp, #24]
 8005e5a:	4407      	add	r7, r0
 8005e5c:	4403      	add	r3, r0
 8005e5e:	9306      	str	r3, [sp, #24]
 8005e60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e62:	4403      	add	r3, r0
 8005e64:	9309      	str	r3, [sp, #36]	; 0x24
 8005e66:	9b06      	ldr	r3, [sp, #24]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dd05      	ble.n	8005e78 <_dtoa_r+0x830>
 8005e6c:	4659      	mov	r1, fp
 8005e6e:	461a      	mov	r2, r3
 8005e70:	4628      	mov	r0, r5
 8005e72:	f000 fc0d 	bl	8006690 <__lshift>
 8005e76:	4683      	mov	fp, r0
 8005e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	dd05      	ble.n	8005e8a <_dtoa_r+0x842>
 8005e7e:	4621      	mov	r1, r4
 8005e80:	461a      	mov	r2, r3
 8005e82:	4628      	mov	r0, r5
 8005e84:	f000 fc04 	bl	8006690 <__lshift>
 8005e88:	4604      	mov	r4, r0
 8005e8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d070      	beq.n	8005f72 <_dtoa_r+0x92a>
 8005e90:	4621      	mov	r1, r4
 8005e92:	4658      	mov	r0, fp
 8005e94:	f000 fc6c 	bl	8006770 <__mcmp>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	da6a      	bge.n	8005f72 <_dtoa_r+0x92a>
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	220a      	movs	r2, #10
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	f000 fa48 	bl	8006338 <__multadd>
 8005ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005eaa:	4683      	mov	fp, r0
 8005eac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	f000 8194 	beq.w	80061de <_dtoa_r+0xb96>
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	2300      	movs	r3, #0
 8005eba:	220a      	movs	r2, #10
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 fa3b 	bl	8006338 <__multadd>
 8005ec2:	f1b9 0f00 	cmp.w	r9, #0
 8005ec6:	4606      	mov	r6, r0
 8005ec8:	f300 8093 	bgt.w	8005ff2 <_dtoa_r+0x9aa>
 8005ecc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	dc57      	bgt.n	8005f82 <_dtoa_r+0x93a>
 8005ed2:	e08e      	b.n	8005ff2 <_dtoa_r+0x9aa>
 8005ed4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ed6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005eda:	e757      	b.n	8005d8c <_dtoa_r+0x744>
 8005edc:	9b08      	ldr	r3, [sp, #32]
 8005ede:	1e5c      	subs	r4, r3, #1
 8005ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee2:	42a3      	cmp	r3, r4
 8005ee4:	bfb7      	itett	lt
 8005ee6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ee8:	1b1c      	subge	r4, r3, r4
 8005eea:	1ae2      	sublt	r2, r4, r3
 8005eec:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005eee:	bfbe      	ittt	lt
 8005ef0:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ef2:	189b      	addlt	r3, r3, r2
 8005ef4:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005ef6:	9b08      	ldr	r3, [sp, #32]
 8005ef8:	bfb8      	it	lt
 8005efa:	2400      	movlt	r4, #0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbb      	ittet	lt
 8005f00:	9b06      	ldrlt	r3, [sp, #24]
 8005f02:	9a08      	ldrlt	r2, [sp, #32]
 8005f04:	9f06      	ldrge	r7, [sp, #24]
 8005f06:	1a9f      	sublt	r7, r3, r2
 8005f08:	bfac      	ite	ge
 8005f0a:	9b08      	ldrge	r3, [sp, #32]
 8005f0c:	2300      	movlt	r3, #0
 8005f0e:	e73f      	b.n	8005d90 <_dtoa_r+0x748>
 8005f10:	3fe00000 	.word	0x3fe00000
 8005f14:	40240000 	.word	0x40240000
 8005f18:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005f1a:	9f06      	ldr	r7, [sp, #24]
 8005f1c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005f1e:	e742      	b.n	8005da6 <_dtoa_r+0x75e>
 8005f20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f22:	e76b      	b.n	8005dfc <_dtoa_r+0x7b4>
 8005f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	dc19      	bgt.n	8005f5e <_dtoa_r+0x916>
 8005f2a:	9b04      	ldr	r3, [sp, #16]
 8005f2c:	b9bb      	cbnz	r3, 8005f5e <_dtoa_r+0x916>
 8005f2e:	9b05      	ldr	r3, [sp, #20]
 8005f30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f34:	b99b      	cbnz	r3, 8005f5e <_dtoa_r+0x916>
 8005f36:	9b05      	ldr	r3, [sp, #20]
 8005f38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f3c:	0d1b      	lsrs	r3, r3, #20
 8005f3e:	051b      	lsls	r3, r3, #20
 8005f40:	b183      	cbz	r3, 8005f64 <_dtoa_r+0x91c>
 8005f42:	f04f 0801 	mov.w	r8, #1
 8005f46:	9b06      	ldr	r3, [sp, #24]
 8005f48:	3301      	adds	r3, #1
 8005f4a:	9306      	str	r3, [sp, #24]
 8005f4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f4e:	3301      	adds	r3, #1
 8005f50:	9309      	str	r3, [sp, #36]	; 0x24
 8005f52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f47f af6a 	bne.w	8005e2e <_dtoa_r+0x7e6>
 8005f5a:	2001      	movs	r0, #1
 8005f5c:	e76f      	b.n	8005e3e <_dtoa_r+0x7f6>
 8005f5e:	f04f 0800 	mov.w	r8, #0
 8005f62:	e7f6      	b.n	8005f52 <_dtoa_r+0x90a>
 8005f64:	4698      	mov	r8, r3
 8005f66:	e7f4      	b.n	8005f52 <_dtoa_r+0x90a>
 8005f68:	f43f af7d 	beq.w	8005e66 <_dtoa_r+0x81e>
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	301c      	adds	r0, #28
 8005f70:	e772      	b.n	8005e58 <_dtoa_r+0x810>
 8005f72:	9b08      	ldr	r3, [sp, #32]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	dc36      	bgt.n	8005fe6 <_dtoa_r+0x99e>
 8005f78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	dd33      	ble.n	8005fe6 <_dtoa_r+0x99e>
 8005f7e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f82:	f1b9 0f00 	cmp.w	r9, #0
 8005f86:	d10d      	bne.n	8005fa4 <_dtoa_r+0x95c>
 8005f88:	4621      	mov	r1, r4
 8005f8a:	464b      	mov	r3, r9
 8005f8c:	2205      	movs	r2, #5
 8005f8e:	4628      	mov	r0, r5
 8005f90:	f000 f9d2 	bl	8006338 <__multadd>
 8005f94:	4601      	mov	r1, r0
 8005f96:	4604      	mov	r4, r0
 8005f98:	4658      	mov	r0, fp
 8005f9a:	f000 fbe9 	bl	8006770 <__mcmp>
 8005f9e:	2800      	cmp	r0, #0
 8005fa0:	f73f adb8 	bgt.w	8005b14 <_dtoa_r+0x4cc>
 8005fa4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fa6:	9f03      	ldr	r7, [sp, #12]
 8005fa8:	ea6f 0a03 	mvn.w	sl, r3
 8005fac:	f04f 0800 	mov.w	r8, #0
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	f000 f99e 	bl	80062f4 <_Bfree>
 8005fb8:	2e00      	cmp	r6, #0
 8005fba:	f43f aea7 	beq.w	8005d0c <_dtoa_r+0x6c4>
 8005fbe:	f1b8 0f00 	cmp.w	r8, #0
 8005fc2:	d005      	beq.n	8005fd0 <_dtoa_r+0x988>
 8005fc4:	45b0      	cmp	r8, r6
 8005fc6:	d003      	beq.n	8005fd0 <_dtoa_r+0x988>
 8005fc8:	4641      	mov	r1, r8
 8005fca:	4628      	mov	r0, r5
 8005fcc:	f000 f992 	bl	80062f4 <_Bfree>
 8005fd0:	4631      	mov	r1, r6
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	f000 f98e 	bl	80062f4 <_Bfree>
 8005fd8:	e698      	b.n	8005d0c <_dtoa_r+0x6c4>
 8005fda:	2400      	movs	r4, #0
 8005fdc:	4626      	mov	r6, r4
 8005fde:	e7e1      	b.n	8005fa4 <_dtoa_r+0x95c>
 8005fe0:	46c2      	mov	sl, r8
 8005fe2:	4626      	mov	r6, r4
 8005fe4:	e596      	b.n	8005b14 <_dtoa_r+0x4cc>
 8005fe6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005fe8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	f000 80fd 	beq.w	80061ec <_dtoa_r+0xba4>
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	dd05      	ble.n	8006002 <_dtoa_r+0x9ba>
 8005ff6:	4631      	mov	r1, r6
 8005ff8:	463a      	mov	r2, r7
 8005ffa:	4628      	mov	r0, r5
 8005ffc:	f000 fb48 	bl	8006690 <__lshift>
 8006000:	4606      	mov	r6, r0
 8006002:	f1b8 0f00 	cmp.w	r8, #0
 8006006:	d05c      	beq.n	80060c2 <_dtoa_r+0xa7a>
 8006008:	4628      	mov	r0, r5
 800600a:	6871      	ldr	r1, [r6, #4]
 800600c:	f000 f932 	bl	8006274 <_Balloc>
 8006010:	4607      	mov	r7, r0
 8006012:	b928      	cbnz	r0, 8006020 <_dtoa_r+0x9d8>
 8006014:	4602      	mov	r2, r0
 8006016:	f240 21ea 	movw	r1, #746	; 0x2ea
 800601a:	4b7f      	ldr	r3, [pc, #508]	; (8006218 <_dtoa_r+0xbd0>)
 800601c:	f7ff bb28 	b.w	8005670 <_dtoa_r+0x28>
 8006020:	6932      	ldr	r2, [r6, #16]
 8006022:	f106 010c 	add.w	r1, r6, #12
 8006026:	3202      	adds	r2, #2
 8006028:	0092      	lsls	r2, r2, #2
 800602a:	300c      	adds	r0, #12
 800602c:	f000 f914 	bl	8006258 <memcpy>
 8006030:	2201      	movs	r2, #1
 8006032:	4639      	mov	r1, r7
 8006034:	4628      	mov	r0, r5
 8006036:	f000 fb2b 	bl	8006690 <__lshift>
 800603a:	46b0      	mov	r8, r6
 800603c:	4606      	mov	r6, r0
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	3301      	adds	r3, #1
 8006042:	9308      	str	r3, [sp, #32]
 8006044:	9b03      	ldr	r3, [sp, #12]
 8006046:	444b      	add	r3, r9
 8006048:	930a      	str	r3, [sp, #40]	; 0x28
 800604a:	9b04      	ldr	r3, [sp, #16]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	9309      	str	r3, [sp, #36]	; 0x24
 8006052:	9b08      	ldr	r3, [sp, #32]
 8006054:	4621      	mov	r1, r4
 8006056:	3b01      	subs	r3, #1
 8006058:	4658      	mov	r0, fp
 800605a:	9304      	str	r3, [sp, #16]
 800605c:	f7ff fa66 	bl	800552c <quorem>
 8006060:	4603      	mov	r3, r0
 8006062:	4641      	mov	r1, r8
 8006064:	3330      	adds	r3, #48	; 0x30
 8006066:	9006      	str	r0, [sp, #24]
 8006068:	4658      	mov	r0, fp
 800606a:	930b      	str	r3, [sp, #44]	; 0x2c
 800606c:	f000 fb80 	bl	8006770 <__mcmp>
 8006070:	4632      	mov	r2, r6
 8006072:	4681      	mov	r9, r0
 8006074:	4621      	mov	r1, r4
 8006076:	4628      	mov	r0, r5
 8006078:	f000 fb96 	bl	80067a8 <__mdiff>
 800607c:	68c2      	ldr	r2, [r0, #12]
 800607e:	4607      	mov	r7, r0
 8006080:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006082:	bb02      	cbnz	r2, 80060c6 <_dtoa_r+0xa7e>
 8006084:	4601      	mov	r1, r0
 8006086:	4658      	mov	r0, fp
 8006088:	f000 fb72 	bl	8006770 <__mcmp>
 800608c:	4602      	mov	r2, r0
 800608e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006090:	4639      	mov	r1, r7
 8006092:	4628      	mov	r0, r5
 8006094:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8006098:	f000 f92c 	bl	80062f4 <_Bfree>
 800609c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800609e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80060a0:	9f08      	ldr	r7, [sp, #32]
 80060a2:	ea43 0102 	orr.w	r1, r3, r2
 80060a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060a8:	430b      	orrs	r3, r1
 80060aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060ac:	d10d      	bne.n	80060ca <_dtoa_r+0xa82>
 80060ae:	2b39      	cmp	r3, #57	; 0x39
 80060b0:	d029      	beq.n	8006106 <_dtoa_r+0xabe>
 80060b2:	f1b9 0f00 	cmp.w	r9, #0
 80060b6:	dd01      	ble.n	80060bc <_dtoa_r+0xa74>
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	3331      	adds	r3, #49	; 0x31
 80060bc:	9a04      	ldr	r2, [sp, #16]
 80060be:	7013      	strb	r3, [r2, #0]
 80060c0:	e776      	b.n	8005fb0 <_dtoa_r+0x968>
 80060c2:	4630      	mov	r0, r6
 80060c4:	e7b9      	b.n	800603a <_dtoa_r+0x9f2>
 80060c6:	2201      	movs	r2, #1
 80060c8:	e7e2      	b.n	8006090 <_dtoa_r+0xa48>
 80060ca:	f1b9 0f00 	cmp.w	r9, #0
 80060ce:	db06      	blt.n	80060de <_dtoa_r+0xa96>
 80060d0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80060d2:	ea41 0909 	orr.w	r9, r1, r9
 80060d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80060d8:	ea59 0101 	orrs.w	r1, r9, r1
 80060dc:	d120      	bne.n	8006120 <_dtoa_r+0xad8>
 80060de:	2a00      	cmp	r2, #0
 80060e0:	ddec      	ble.n	80060bc <_dtoa_r+0xa74>
 80060e2:	4659      	mov	r1, fp
 80060e4:	2201      	movs	r2, #1
 80060e6:	4628      	mov	r0, r5
 80060e8:	9308      	str	r3, [sp, #32]
 80060ea:	f000 fad1 	bl	8006690 <__lshift>
 80060ee:	4621      	mov	r1, r4
 80060f0:	4683      	mov	fp, r0
 80060f2:	f000 fb3d 	bl	8006770 <__mcmp>
 80060f6:	2800      	cmp	r0, #0
 80060f8:	9b08      	ldr	r3, [sp, #32]
 80060fa:	dc02      	bgt.n	8006102 <_dtoa_r+0xaba>
 80060fc:	d1de      	bne.n	80060bc <_dtoa_r+0xa74>
 80060fe:	07da      	lsls	r2, r3, #31
 8006100:	d5dc      	bpl.n	80060bc <_dtoa_r+0xa74>
 8006102:	2b39      	cmp	r3, #57	; 0x39
 8006104:	d1d8      	bne.n	80060b8 <_dtoa_r+0xa70>
 8006106:	2339      	movs	r3, #57	; 0x39
 8006108:	9a04      	ldr	r2, [sp, #16]
 800610a:	7013      	strb	r3, [r2, #0]
 800610c:	463b      	mov	r3, r7
 800610e:	461f      	mov	r7, r3
 8006110:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006114:	3b01      	subs	r3, #1
 8006116:	2a39      	cmp	r2, #57	; 0x39
 8006118:	d050      	beq.n	80061bc <_dtoa_r+0xb74>
 800611a:	3201      	adds	r2, #1
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	e747      	b.n	8005fb0 <_dtoa_r+0x968>
 8006120:	2a00      	cmp	r2, #0
 8006122:	dd03      	ble.n	800612c <_dtoa_r+0xae4>
 8006124:	2b39      	cmp	r3, #57	; 0x39
 8006126:	d0ee      	beq.n	8006106 <_dtoa_r+0xabe>
 8006128:	3301      	adds	r3, #1
 800612a:	e7c7      	b.n	80060bc <_dtoa_r+0xa74>
 800612c:	9a08      	ldr	r2, [sp, #32]
 800612e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006130:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006134:	428a      	cmp	r2, r1
 8006136:	d02a      	beq.n	800618e <_dtoa_r+0xb46>
 8006138:	4659      	mov	r1, fp
 800613a:	2300      	movs	r3, #0
 800613c:	220a      	movs	r2, #10
 800613e:	4628      	mov	r0, r5
 8006140:	f000 f8fa 	bl	8006338 <__multadd>
 8006144:	45b0      	cmp	r8, r6
 8006146:	4683      	mov	fp, r0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	f04f 020a 	mov.w	r2, #10
 8006150:	4641      	mov	r1, r8
 8006152:	4628      	mov	r0, r5
 8006154:	d107      	bne.n	8006166 <_dtoa_r+0xb1e>
 8006156:	f000 f8ef 	bl	8006338 <__multadd>
 800615a:	4680      	mov	r8, r0
 800615c:	4606      	mov	r6, r0
 800615e:	9b08      	ldr	r3, [sp, #32]
 8006160:	3301      	adds	r3, #1
 8006162:	9308      	str	r3, [sp, #32]
 8006164:	e775      	b.n	8006052 <_dtoa_r+0xa0a>
 8006166:	f000 f8e7 	bl	8006338 <__multadd>
 800616a:	4631      	mov	r1, r6
 800616c:	4680      	mov	r8, r0
 800616e:	2300      	movs	r3, #0
 8006170:	220a      	movs	r2, #10
 8006172:	4628      	mov	r0, r5
 8006174:	f000 f8e0 	bl	8006338 <__multadd>
 8006178:	4606      	mov	r6, r0
 800617a:	e7f0      	b.n	800615e <_dtoa_r+0xb16>
 800617c:	f1b9 0f00 	cmp.w	r9, #0
 8006180:	bfcc      	ite	gt
 8006182:	464f      	movgt	r7, r9
 8006184:	2701      	movle	r7, #1
 8006186:	f04f 0800 	mov.w	r8, #0
 800618a:	9a03      	ldr	r2, [sp, #12]
 800618c:	4417      	add	r7, r2
 800618e:	4659      	mov	r1, fp
 8006190:	2201      	movs	r2, #1
 8006192:	4628      	mov	r0, r5
 8006194:	9308      	str	r3, [sp, #32]
 8006196:	f000 fa7b 	bl	8006690 <__lshift>
 800619a:	4621      	mov	r1, r4
 800619c:	4683      	mov	fp, r0
 800619e:	f000 fae7 	bl	8006770 <__mcmp>
 80061a2:	2800      	cmp	r0, #0
 80061a4:	dcb2      	bgt.n	800610c <_dtoa_r+0xac4>
 80061a6:	d102      	bne.n	80061ae <_dtoa_r+0xb66>
 80061a8:	9b08      	ldr	r3, [sp, #32]
 80061aa:	07db      	lsls	r3, r3, #31
 80061ac:	d4ae      	bmi.n	800610c <_dtoa_r+0xac4>
 80061ae:	463b      	mov	r3, r7
 80061b0:	461f      	mov	r7, r3
 80061b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061b6:	2a30      	cmp	r2, #48	; 0x30
 80061b8:	d0fa      	beq.n	80061b0 <_dtoa_r+0xb68>
 80061ba:	e6f9      	b.n	8005fb0 <_dtoa_r+0x968>
 80061bc:	9a03      	ldr	r2, [sp, #12]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d1a5      	bne.n	800610e <_dtoa_r+0xac6>
 80061c2:	2331      	movs	r3, #49	; 0x31
 80061c4:	f10a 0a01 	add.w	sl, sl, #1
 80061c8:	e779      	b.n	80060be <_dtoa_r+0xa76>
 80061ca:	4b14      	ldr	r3, [pc, #80]	; (800621c <_dtoa_r+0xbd4>)
 80061cc:	f7ff baa8 	b.w	8005720 <_dtoa_r+0xd8>
 80061d0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	f47f aa81 	bne.w	80056da <_dtoa_r+0x92>
 80061d8:	4b11      	ldr	r3, [pc, #68]	; (8006220 <_dtoa_r+0xbd8>)
 80061da:	f7ff baa1 	b.w	8005720 <_dtoa_r+0xd8>
 80061de:	f1b9 0f00 	cmp.w	r9, #0
 80061e2:	dc03      	bgt.n	80061ec <_dtoa_r+0xba4>
 80061e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	f73f aecb 	bgt.w	8005f82 <_dtoa_r+0x93a>
 80061ec:	9f03      	ldr	r7, [sp, #12]
 80061ee:	4621      	mov	r1, r4
 80061f0:	4658      	mov	r0, fp
 80061f2:	f7ff f99b 	bl	800552c <quorem>
 80061f6:	9a03      	ldr	r2, [sp, #12]
 80061f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80061fc:	f807 3b01 	strb.w	r3, [r7], #1
 8006200:	1aba      	subs	r2, r7, r2
 8006202:	4591      	cmp	r9, r2
 8006204:	ddba      	ble.n	800617c <_dtoa_r+0xb34>
 8006206:	4659      	mov	r1, fp
 8006208:	2300      	movs	r3, #0
 800620a:	220a      	movs	r2, #10
 800620c:	4628      	mov	r0, r5
 800620e:	f000 f893 	bl	8006338 <__multadd>
 8006212:	4683      	mov	fp, r0
 8006214:	e7eb      	b.n	80061ee <_dtoa_r+0xba6>
 8006216:	bf00      	nop
 8006218:	08007b2f 	.word	0x08007b2f
 800621c:	08007a8c 	.word	0x08007a8c
 8006220:	08007ab0 	.word	0x08007ab0

08006224 <_localeconv_r>:
 8006224:	4800      	ldr	r0, [pc, #0]	; (8006228 <_localeconv_r+0x4>)
 8006226:	4770      	bx	lr
 8006228:	20000168 	.word	0x20000168

0800622c <malloc>:
 800622c:	4b02      	ldr	r3, [pc, #8]	; (8006238 <malloc+0xc>)
 800622e:	4601      	mov	r1, r0
 8006230:	6818      	ldr	r0, [r3, #0]
 8006232:	f000 bc1d 	b.w	8006a70 <_malloc_r>
 8006236:	bf00      	nop
 8006238:	20000014 	.word	0x20000014

0800623c <memchr>:
 800623c:	4603      	mov	r3, r0
 800623e:	b510      	push	{r4, lr}
 8006240:	b2c9      	uxtb	r1, r1
 8006242:	4402      	add	r2, r0
 8006244:	4293      	cmp	r3, r2
 8006246:	4618      	mov	r0, r3
 8006248:	d101      	bne.n	800624e <memchr+0x12>
 800624a:	2000      	movs	r0, #0
 800624c:	e003      	b.n	8006256 <memchr+0x1a>
 800624e:	7804      	ldrb	r4, [r0, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	428c      	cmp	r4, r1
 8006254:	d1f6      	bne.n	8006244 <memchr+0x8>
 8006256:	bd10      	pop	{r4, pc}

08006258 <memcpy>:
 8006258:	440a      	add	r2, r1
 800625a:	4291      	cmp	r1, r2
 800625c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006260:	d100      	bne.n	8006264 <memcpy+0xc>
 8006262:	4770      	bx	lr
 8006264:	b510      	push	{r4, lr}
 8006266:	f811 4b01 	ldrb.w	r4, [r1], #1
 800626a:	4291      	cmp	r1, r2
 800626c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006270:	d1f9      	bne.n	8006266 <memcpy+0xe>
 8006272:	bd10      	pop	{r4, pc}

08006274 <_Balloc>:
 8006274:	b570      	push	{r4, r5, r6, lr}
 8006276:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006278:	4604      	mov	r4, r0
 800627a:	460d      	mov	r5, r1
 800627c:	b976      	cbnz	r6, 800629c <_Balloc+0x28>
 800627e:	2010      	movs	r0, #16
 8006280:	f7ff ffd4 	bl	800622c <malloc>
 8006284:	4602      	mov	r2, r0
 8006286:	6260      	str	r0, [r4, #36]	; 0x24
 8006288:	b920      	cbnz	r0, 8006294 <_Balloc+0x20>
 800628a:	2166      	movs	r1, #102	; 0x66
 800628c:	4b17      	ldr	r3, [pc, #92]	; (80062ec <_Balloc+0x78>)
 800628e:	4818      	ldr	r0, [pc, #96]	; (80062f0 <_Balloc+0x7c>)
 8006290:	f000 fdce 	bl	8006e30 <__assert_func>
 8006294:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006298:	6006      	str	r6, [r0, #0]
 800629a:	60c6      	str	r6, [r0, #12]
 800629c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800629e:	68f3      	ldr	r3, [r6, #12]
 80062a0:	b183      	cbz	r3, 80062c4 <_Balloc+0x50>
 80062a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80062aa:	b9b8      	cbnz	r0, 80062dc <_Balloc+0x68>
 80062ac:	2101      	movs	r1, #1
 80062ae:	fa01 f605 	lsl.w	r6, r1, r5
 80062b2:	1d72      	adds	r2, r6, #5
 80062b4:	4620      	mov	r0, r4
 80062b6:	0092      	lsls	r2, r2, #2
 80062b8:	f000 fb5e 	bl	8006978 <_calloc_r>
 80062bc:	b160      	cbz	r0, 80062d8 <_Balloc+0x64>
 80062be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062c2:	e00e      	b.n	80062e2 <_Balloc+0x6e>
 80062c4:	2221      	movs	r2, #33	; 0x21
 80062c6:	2104      	movs	r1, #4
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 fb55 	bl	8006978 <_calloc_r>
 80062ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062d0:	60f0      	str	r0, [r6, #12]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e4      	bne.n	80062a2 <_Balloc+0x2e>
 80062d8:	2000      	movs	r0, #0
 80062da:	bd70      	pop	{r4, r5, r6, pc}
 80062dc:	6802      	ldr	r2, [r0, #0]
 80062de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062e2:	2300      	movs	r3, #0
 80062e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062e8:	e7f7      	b.n	80062da <_Balloc+0x66>
 80062ea:	bf00      	nop
 80062ec:	08007abd 	.word	0x08007abd
 80062f0:	08007b40 	.word	0x08007b40

080062f4 <_Bfree>:
 80062f4:	b570      	push	{r4, r5, r6, lr}
 80062f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062f8:	4605      	mov	r5, r0
 80062fa:	460c      	mov	r4, r1
 80062fc:	b976      	cbnz	r6, 800631c <_Bfree+0x28>
 80062fe:	2010      	movs	r0, #16
 8006300:	f7ff ff94 	bl	800622c <malloc>
 8006304:	4602      	mov	r2, r0
 8006306:	6268      	str	r0, [r5, #36]	; 0x24
 8006308:	b920      	cbnz	r0, 8006314 <_Bfree+0x20>
 800630a:	218a      	movs	r1, #138	; 0x8a
 800630c:	4b08      	ldr	r3, [pc, #32]	; (8006330 <_Bfree+0x3c>)
 800630e:	4809      	ldr	r0, [pc, #36]	; (8006334 <_Bfree+0x40>)
 8006310:	f000 fd8e 	bl	8006e30 <__assert_func>
 8006314:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006318:	6006      	str	r6, [r0, #0]
 800631a:	60c6      	str	r6, [r0, #12]
 800631c:	b13c      	cbz	r4, 800632e <_Bfree+0x3a>
 800631e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006320:	6862      	ldr	r2, [r4, #4]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006328:	6021      	str	r1, [r4, #0]
 800632a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800632e:	bd70      	pop	{r4, r5, r6, pc}
 8006330:	08007abd 	.word	0x08007abd
 8006334:	08007b40 	.word	0x08007b40

08006338 <__multadd>:
 8006338:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	4607      	mov	r7, r0
 800633e:	460c      	mov	r4, r1
 8006340:	461e      	mov	r6, r3
 8006342:	2000      	movs	r0, #0
 8006344:	690d      	ldr	r5, [r1, #16]
 8006346:	f101 0c14 	add.w	ip, r1, #20
 800634a:	f8dc 3000 	ldr.w	r3, [ip]
 800634e:	3001      	adds	r0, #1
 8006350:	b299      	uxth	r1, r3
 8006352:	fb02 6101 	mla	r1, r2, r1, r6
 8006356:	0c1e      	lsrs	r6, r3, #16
 8006358:	0c0b      	lsrs	r3, r1, #16
 800635a:	fb02 3306 	mla	r3, r2, r6, r3
 800635e:	b289      	uxth	r1, r1
 8006360:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006364:	4285      	cmp	r5, r0
 8006366:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800636a:	f84c 1b04 	str.w	r1, [ip], #4
 800636e:	dcec      	bgt.n	800634a <__multadd+0x12>
 8006370:	b30e      	cbz	r6, 80063b6 <__multadd+0x7e>
 8006372:	68a3      	ldr	r3, [r4, #8]
 8006374:	42ab      	cmp	r3, r5
 8006376:	dc19      	bgt.n	80063ac <__multadd+0x74>
 8006378:	6861      	ldr	r1, [r4, #4]
 800637a:	4638      	mov	r0, r7
 800637c:	3101      	adds	r1, #1
 800637e:	f7ff ff79 	bl	8006274 <_Balloc>
 8006382:	4680      	mov	r8, r0
 8006384:	b928      	cbnz	r0, 8006392 <__multadd+0x5a>
 8006386:	4602      	mov	r2, r0
 8006388:	21b5      	movs	r1, #181	; 0xb5
 800638a:	4b0c      	ldr	r3, [pc, #48]	; (80063bc <__multadd+0x84>)
 800638c:	480c      	ldr	r0, [pc, #48]	; (80063c0 <__multadd+0x88>)
 800638e:	f000 fd4f 	bl	8006e30 <__assert_func>
 8006392:	6922      	ldr	r2, [r4, #16]
 8006394:	f104 010c 	add.w	r1, r4, #12
 8006398:	3202      	adds	r2, #2
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	300c      	adds	r0, #12
 800639e:	f7ff ff5b 	bl	8006258 <memcpy>
 80063a2:	4621      	mov	r1, r4
 80063a4:	4638      	mov	r0, r7
 80063a6:	f7ff ffa5 	bl	80062f4 <_Bfree>
 80063aa:	4644      	mov	r4, r8
 80063ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80063b0:	3501      	adds	r5, #1
 80063b2:	615e      	str	r6, [r3, #20]
 80063b4:	6125      	str	r5, [r4, #16]
 80063b6:	4620      	mov	r0, r4
 80063b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063bc:	08007b2f 	.word	0x08007b2f
 80063c0:	08007b40 	.word	0x08007b40

080063c4 <__hi0bits>:
 80063c4:	0c02      	lsrs	r2, r0, #16
 80063c6:	0412      	lsls	r2, r2, #16
 80063c8:	4603      	mov	r3, r0
 80063ca:	b9ca      	cbnz	r2, 8006400 <__hi0bits+0x3c>
 80063cc:	0403      	lsls	r3, r0, #16
 80063ce:	2010      	movs	r0, #16
 80063d0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80063d4:	bf04      	itt	eq
 80063d6:	021b      	lsleq	r3, r3, #8
 80063d8:	3008      	addeq	r0, #8
 80063da:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80063de:	bf04      	itt	eq
 80063e0:	011b      	lsleq	r3, r3, #4
 80063e2:	3004      	addeq	r0, #4
 80063e4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80063e8:	bf04      	itt	eq
 80063ea:	009b      	lsleq	r3, r3, #2
 80063ec:	3002      	addeq	r0, #2
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	db05      	blt.n	80063fe <__hi0bits+0x3a>
 80063f2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80063f6:	f100 0001 	add.w	r0, r0, #1
 80063fa:	bf08      	it	eq
 80063fc:	2020      	moveq	r0, #32
 80063fe:	4770      	bx	lr
 8006400:	2000      	movs	r0, #0
 8006402:	e7e5      	b.n	80063d0 <__hi0bits+0xc>

08006404 <__lo0bits>:
 8006404:	6803      	ldr	r3, [r0, #0]
 8006406:	4602      	mov	r2, r0
 8006408:	f013 0007 	ands.w	r0, r3, #7
 800640c:	d00b      	beq.n	8006426 <__lo0bits+0x22>
 800640e:	07d9      	lsls	r1, r3, #31
 8006410:	d421      	bmi.n	8006456 <__lo0bits+0x52>
 8006412:	0798      	lsls	r0, r3, #30
 8006414:	bf49      	itett	mi
 8006416:	085b      	lsrmi	r3, r3, #1
 8006418:	089b      	lsrpl	r3, r3, #2
 800641a:	2001      	movmi	r0, #1
 800641c:	6013      	strmi	r3, [r2, #0]
 800641e:	bf5c      	itt	pl
 8006420:	2002      	movpl	r0, #2
 8006422:	6013      	strpl	r3, [r2, #0]
 8006424:	4770      	bx	lr
 8006426:	b299      	uxth	r1, r3
 8006428:	b909      	cbnz	r1, 800642e <__lo0bits+0x2a>
 800642a:	2010      	movs	r0, #16
 800642c:	0c1b      	lsrs	r3, r3, #16
 800642e:	b2d9      	uxtb	r1, r3
 8006430:	b909      	cbnz	r1, 8006436 <__lo0bits+0x32>
 8006432:	3008      	adds	r0, #8
 8006434:	0a1b      	lsrs	r3, r3, #8
 8006436:	0719      	lsls	r1, r3, #28
 8006438:	bf04      	itt	eq
 800643a:	091b      	lsreq	r3, r3, #4
 800643c:	3004      	addeq	r0, #4
 800643e:	0799      	lsls	r1, r3, #30
 8006440:	bf04      	itt	eq
 8006442:	089b      	lsreq	r3, r3, #2
 8006444:	3002      	addeq	r0, #2
 8006446:	07d9      	lsls	r1, r3, #31
 8006448:	d403      	bmi.n	8006452 <__lo0bits+0x4e>
 800644a:	085b      	lsrs	r3, r3, #1
 800644c:	f100 0001 	add.w	r0, r0, #1
 8006450:	d003      	beq.n	800645a <__lo0bits+0x56>
 8006452:	6013      	str	r3, [r2, #0]
 8006454:	4770      	bx	lr
 8006456:	2000      	movs	r0, #0
 8006458:	4770      	bx	lr
 800645a:	2020      	movs	r0, #32
 800645c:	4770      	bx	lr
	...

08006460 <__i2b>:
 8006460:	b510      	push	{r4, lr}
 8006462:	460c      	mov	r4, r1
 8006464:	2101      	movs	r1, #1
 8006466:	f7ff ff05 	bl	8006274 <_Balloc>
 800646a:	4602      	mov	r2, r0
 800646c:	b928      	cbnz	r0, 800647a <__i2b+0x1a>
 800646e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006472:	4b04      	ldr	r3, [pc, #16]	; (8006484 <__i2b+0x24>)
 8006474:	4804      	ldr	r0, [pc, #16]	; (8006488 <__i2b+0x28>)
 8006476:	f000 fcdb 	bl	8006e30 <__assert_func>
 800647a:	2301      	movs	r3, #1
 800647c:	6144      	str	r4, [r0, #20]
 800647e:	6103      	str	r3, [r0, #16]
 8006480:	bd10      	pop	{r4, pc}
 8006482:	bf00      	nop
 8006484:	08007b2f 	.word	0x08007b2f
 8006488:	08007b40 	.word	0x08007b40

0800648c <__multiply>:
 800648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006490:	4691      	mov	r9, r2
 8006492:	690a      	ldr	r2, [r1, #16]
 8006494:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006498:	460c      	mov	r4, r1
 800649a:	429a      	cmp	r2, r3
 800649c:	bfbe      	ittt	lt
 800649e:	460b      	movlt	r3, r1
 80064a0:	464c      	movlt	r4, r9
 80064a2:	4699      	movlt	r9, r3
 80064a4:	6927      	ldr	r7, [r4, #16]
 80064a6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80064aa:	68a3      	ldr	r3, [r4, #8]
 80064ac:	6861      	ldr	r1, [r4, #4]
 80064ae:	eb07 060a 	add.w	r6, r7, sl
 80064b2:	42b3      	cmp	r3, r6
 80064b4:	b085      	sub	sp, #20
 80064b6:	bfb8      	it	lt
 80064b8:	3101      	addlt	r1, #1
 80064ba:	f7ff fedb 	bl	8006274 <_Balloc>
 80064be:	b930      	cbnz	r0, 80064ce <__multiply+0x42>
 80064c0:	4602      	mov	r2, r0
 80064c2:	f240 115d 	movw	r1, #349	; 0x15d
 80064c6:	4b43      	ldr	r3, [pc, #268]	; (80065d4 <__multiply+0x148>)
 80064c8:	4843      	ldr	r0, [pc, #268]	; (80065d8 <__multiply+0x14c>)
 80064ca:	f000 fcb1 	bl	8006e30 <__assert_func>
 80064ce:	f100 0514 	add.w	r5, r0, #20
 80064d2:	462b      	mov	r3, r5
 80064d4:	2200      	movs	r2, #0
 80064d6:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064da:	4543      	cmp	r3, r8
 80064dc:	d321      	bcc.n	8006522 <__multiply+0x96>
 80064de:	f104 0314 	add.w	r3, r4, #20
 80064e2:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064e6:	f109 0314 	add.w	r3, r9, #20
 80064ea:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064ee:	9202      	str	r2, [sp, #8]
 80064f0:	1b3a      	subs	r2, r7, r4
 80064f2:	3a15      	subs	r2, #21
 80064f4:	f022 0203 	bic.w	r2, r2, #3
 80064f8:	3204      	adds	r2, #4
 80064fa:	f104 0115 	add.w	r1, r4, #21
 80064fe:	428f      	cmp	r7, r1
 8006500:	bf38      	it	cc
 8006502:	2204      	movcc	r2, #4
 8006504:	9201      	str	r2, [sp, #4]
 8006506:	9a02      	ldr	r2, [sp, #8]
 8006508:	9303      	str	r3, [sp, #12]
 800650a:	429a      	cmp	r2, r3
 800650c:	d80c      	bhi.n	8006528 <__multiply+0x9c>
 800650e:	2e00      	cmp	r6, #0
 8006510:	dd03      	ble.n	800651a <__multiply+0x8e>
 8006512:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006516:	2b00      	cmp	r3, #0
 8006518:	d059      	beq.n	80065ce <__multiply+0x142>
 800651a:	6106      	str	r6, [r0, #16]
 800651c:	b005      	add	sp, #20
 800651e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006522:	f843 2b04 	str.w	r2, [r3], #4
 8006526:	e7d8      	b.n	80064da <__multiply+0x4e>
 8006528:	f8b3 a000 	ldrh.w	sl, [r3]
 800652c:	f1ba 0f00 	cmp.w	sl, #0
 8006530:	d023      	beq.n	800657a <__multiply+0xee>
 8006532:	46a9      	mov	r9, r5
 8006534:	f04f 0c00 	mov.w	ip, #0
 8006538:	f104 0e14 	add.w	lr, r4, #20
 800653c:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006540:	f8d9 1000 	ldr.w	r1, [r9]
 8006544:	fa1f fb82 	uxth.w	fp, r2
 8006548:	b289      	uxth	r1, r1
 800654a:	fb0a 110b 	mla	r1, sl, fp, r1
 800654e:	4461      	add	r1, ip
 8006550:	f8d9 c000 	ldr.w	ip, [r9]
 8006554:	0c12      	lsrs	r2, r2, #16
 8006556:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800655a:	fb0a c202 	mla	r2, sl, r2, ip
 800655e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006562:	b289      	uxth	r1, r1
 8006564:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006568:	4577      	cmp	r7, lr
 800656a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800656e:	f849 1b04 	str.w	r1, [r9], #4
 8006572:	d8e3      	bhi.n	800653c <__multiply+0xb0>
 8006574:	9a01      	ldr	r2, [sp, #4]
 8006576:	f845 c002 	str.w	ip, [r5, r2]
 800657a:	9a03      	ldr	r2, [sp, #12]
 800657c:	3304      	adds	r3, #4
 800657e:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006582:	f1b9 0f00 	cmp.w	r9, #0
 8006586:	d020      	beq.n	80065ca <__multiply+0x13e>
 8006588:	46ae      	mov	lr, r5
 800658a:	f04f 0a00 	mov.w	sl, #0
 800658e:	6829      	ldr	r1, [r5, #0]
 8006590:	f104 0c14 	add.w	ip, r4, #20
 8006594:	f8bc b000 	ldrh.w	fp, [ip]
 8006598:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800659c:	b289      	uxth	r1, r1
 800659e:	fb09 220b 	mla	r2, r9, fp, r2
 80065a2:	4492      	add	sl, r2
 80065a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80065a8:	f84e 1b04 	str.w	r1, [lr], #4
 80065ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065b0:	f8be 1000 	ldrh.w	r1, [lr]
 80065b4:	0c12      	lsrs	r2, r2, #16
 80065b6:	fb09 1102 	mla	r1, r9, r2, r1
 80065ba:	4567      	cmp	r7, ip
 80065bc:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065c4:	d8e6      	bhi.n	8006594 <__multiply+0x108>
 80065c6:	9a01      	ldr	r2, [sp, #4]
 80065c8:	50a9      	str	r1, [r5, r2]
 80065ca:	3504      	adds	r5, #4
 80065cc:	e79b      	b.n	8006506 <__multiply+0x7a>
 80065ce:	3e01      	subs	r6, #1
 80065d0:	e79d      	b.n	800650e <__multiply+0x82>
 80065d2:	bf00      	nop
 80065d4:	08007b2f 	.word	0x08007b2f
 80065d8:	08007b40 	.word	0x08007b40

080065dc <__pow5mult>:
 80065dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065e0:	4615      	mov	r5, r2
 80065e2:	f012 0203 	ands.w	r2, r2, #3
 80065e6:	4606      	mov	r6, r0
 80065e8:	460f      	mov	r7, r1
 80065ea:	d007      	beq.n	80065fc <__pow5mult+0x20>
 80065ec:	4c25      	ldr	r4, [pc, #148]	; (8006684 <__pow5mult+0xa8>)
 80065ee:	3a01      	subs	r2, #1
 80065f0:	2300      	movs	r3, #0
 80065f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065f6:	f7ff fe9f 	bl	8006338 <__multadd>
 80065fa:	4607      	mov	r7, r0
 80065fc:	10ad      	asrs	r5, r5, #2
 80065fe:	d03d      	beq.n	800667c <__pow5mult+0xa0>
 8006600:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006602:	b97c      	cbnz	r4, 8006624 <__pow5mult+0x48>
 8006604:	2010      	movs	r0, #16
 8006606:	f7ff fe11 	bl	800622c <malloc>
 800660a:	4602      	mov	r2, r0
 800660c:	6270      	str	r0, [r6, #36]	; 0x24
 800660e:	b928      	cbnz	r0, 800661c <__pow5mult+0x40>
 8006610:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006614:	4b1c      	ldr	r3, [pc, #112]	; (8006688 <__pow5mult+0xac>)
 8006616:	481d      	ldr	r0, [pc, #116]	; (800668c <__pow5mult+0xb0>)
 8006618:	f000 fc0a 	bl	8006e30 <__assert_func>
 800661c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006620:	6004      	str	r4, [r0, #0]
 8006622:	60c4      	str	r4, [r0, #12]
 8006624:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006628:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800662c:	b94c      	cbnz	r4, 8006642 <__pow5mult+0x66>
 800662e:	f240 2171 	movw	r1, #625	; 0x271
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff ff14 	bl	8006460 <__i2b>
 8006638:	2300      	movs	r3, #0
 800663a:	4604      	mov	r4, r0
 800663c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006640:	6003      	str	r3, [r0, #0]
 8006642:	f04f 0900 	mov.w	r9, #0
 8006646:	07eb      	lsls	r3, r5, #31
 8006648:	d50a      	bpl.n	8006660 <__pow5mult+0x84>
 800664a:	4639      	mov	r1, r7
 800664c:	4622      	mov	r2, r4
 800664e:	4630      	mov	r0, r6
 8006650:	f7ff ff1c 	bl	800648c <__multiply>
 8006654:	4680      	mov	r8, r0
 8006656:	4639      	mov	r1, r7
 8006658:	4630      	mov	r0, r6
 800665a:	f7ff fe4b 	bl	80062f4 <_Bfree>
 800665e:	4647      	mov	r7, r8
 8006660:	106d      	asrs	r5, r5, #1
 8006662:	d00b      	beq.n	800667c <__pow5mult+0xa0>
 8006664:	6820      	ldr	r0, [r4, #0]
 8006666:	b938      	cbnz	r0, 8006678 <__pow5mult+0x9c>
 8006668:	4622      	mov	r2, r4
 800666a:	4621      	mov	r1, r4
 800666c:	4630      	mov	r0, r6
 800666e:	f7ff ff0d 	bl	800648c <__multiply>
 8006672:	6020      	str	r0, [r4, #0]
 8006674:	f8c0 9000 	str.w	r9, [r0]
 8006678:	4604      	mov	r4, r0
 800667a:	e7e4      	b.n	8006646 <__pow5mult+0x6a>
 800667c:	4638      	mov	r0, r7
 800667e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006682:	bf00      	nop
 8006684:	08007c90 	.word	0x08007c90
 8006688:	08007abd 	.word	0x08007abd
 800668c:	08007b40 	.word	0x08007b40

08006690 <__lshift>:
 8006690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006694:	460c      	mov	r4, r1
 8006696:	4607      	mov	r7, r0
 8006698:	4691      	mov	r9, r2
 800669a:	6923      	ldr	r3, [r4, #16]
 800669c:	6849      	ldr	r1, [r1, #4]
 800669e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80066a2:	68a3      	ldr	r3, [r4, #8]
 80066a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80066a8:	f108 0601 	add.w	r6, r8, #1
 80066ac:	42b3      	cmp	r3, r6
 80066ae:	db0b      	blt.n	80066c8 <__lshift+0x38>
 80066b0:	4638      	mov	r0, r7
 80066b2:	f7ff fddf 	bl	8006274 <_Balloc>
 80066b6:	4605      	mov	r5, r0
 80066b8:	b948      	cbnz	r0, 80066ce <__lshift+0x3e>
 80066ba:	4602      	mov	r2, r0
 80066bc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066c0:	4b29      	ldr	r3, [pc, #164]	; (8006768 <__lshift+0xd8>)
 80066c2:	482a      	ldr	r0, [pc, #168]	; (800676c <__lshift+0xdc>)
 80066c4:	f000 fbb4 	bl	8006e30 <__assert_func>
 80066c8:	3101      	adds	r1, #1
 80066ca:	005b      	lsls	r3, r3, #1
 80066cc:	e7ee      	b.n	80066ac <__lshift+0x1c>
 80066ce:	2300      	movs	r3, #0
 80066d0:	f100 0114 	add.w	r1, r0, #20
 80066d4:	f100 0210 	add.w	r2, r0, #16
 80066d8:	4618      	mov	r0, r3
 80066da:	4553      	cmp	r3, sl
 80066dc:	db37      	blt.n	800674e <__lshift+0xbe>
 80066de:	6920      	ldr	r0, [r4, #16]
 80066e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066e4:	f104 0314 	add.w	r3, r4, #20
 80066e8:	f019 091f 	ands.w	r9, r9, #31
 80066ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066f4:	d02f      	beq.n	8006756 <__lshift+0xc6>
 80066f6:	468a      	mov	sl, r1
 80066f8:	f04f 0c00 	mov.w	ip, #0
 80066fc:	f1c9 0e20 	rsb	lr, r9, #32
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	fa02 f209 	lsl.w	r2, r2, r9
 8006706:	ea42 020c 	orr.w	r2, r2, ip
 800670a:	f84a 2b04 	str.w	r2, [sl], #4
 800670e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006712:	4298      	cmp	r0, r3
 8006714:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006718:	d8f2      	bhi.n	8006700 <__lshift+0x70>
 800671a:	1b03      	subs	r3, r0, r4
 800671c:	3b15      	subs	r3, #21
 800671e:	f023 0303 	bic.w	r3, r3, #3
 8006722:	3304      	adds	r3, #4
 8006724:	f104 0215 	add.w	r2, r4, #21
 8006728:	4290      	cmp	r0, r2
 800672a:	bf38      	it	cc
 800672c:	2304      	movcc	r3, #4
 800672e:	f841 c003 	str.w	ip, [r1, r3]
 8006732:	f1bc 0f00 	cmp.w	ip, #0
 8006736:	d001      	beq.n	800673c <__lshift+0xac>
 8006738:	f108 0602 	add.w	r6, r8, #2
 800673c:	3e01      	subs	r6, #1
 800673e:	4638      	mov	r0, r7
 8006740:	4621      	mov	r1, r4
 8006742:	612e      	str	r6, [r5, #16]
 8006744:	f7ff fdd6 	bl	80062f4 <_Bfree>
 8006748:	4628      	mov	r0, r5
 800674a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006752:	3301      	adds	r3, #1
 8006754:	e7c1      	b.n	80066da <__lshift+0x4a>
 8006756:	3904      	subs	r1, #4
 8006758:	f853 2b04 	ldr.w	r2, [r3], #4
 800675c:	4298      	cmp	r0, r3
 800675e:	f841 2f04 	str.w	r2, [r1, #4]!
 8006762:	d8f9      	bhi.n	8006758 <__lshift+0xc8>
 8006764:	e7ea      	b.n	800673c <__lshift+0xac>
 8006766:	bf00      	nop
 8006768:	08007b2f 	.word	0x08007b2f
 800676c:	08007b40 	.word	0x08007b40

08006770 <__mcmp>:
 8006770:	4603      	mov	r3, r0
 8006772:	690a      	ldr	r2, [r1, #16]
 8006774:	6900      	ldr	r0, [r0, #16]
 8006776:	b530      	push	{r4, r5, lr}
 8006778:	1a80      	subs	r0, r0, r2
 800677a:	d10d      	bne.n	8006798 <__mcmp+0x28>
 800677c:	3314      	adds	r3, #20
 800677e:	3114      	adds	r1, #20
 8006780:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006784:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006788:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800678c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006790:	4295      	cmp	r5, r2
 8006792:	d002      	beq.n	800679a <__mcmp+0x2a>
 8006794:	d304      	bcc.n	80067a0 <__mcmp+0x30>
 8006796:	2001      	movs	r0, #1
 8006798:	bd30      	pop	{r4, r5, pc}
 800679a:	42a3      	cmp	r3, r4
 800679c:	d3f4      	bcc.n	8006788 <__mcmp+0x18>
 800679e:	e7fb      	b.n	8006798 <__mcmp+0x28>
 80067a0:	f04f 30ff 	mov.w	r0, #4294967295
 80067a4:	e7f8      	b.n	8006798 <__mcmp+0x28>
	...

080067a8 <__mdiff>:
 80067a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ac:	460d      	mov	r5, r1
 80067ae:	4607      	mov	r7, r0
 80067b0:	4611      	mov	r1, r2
 80067b2:	4628      	mov	r0, r5
 80067b4:	4614      	mov	r4, r2
 80067b6:	f7ff ffdb 	bl	8006770 <__mcmp>
 80067ba:	1e06      	subs	r6, r0, #0
 80067bc:	d111      	bne.n	80067e2 <__mdiff+0x3a>
 80067be:	4631      	mov	r1, r6
 80067c0:	4638      	mov	r0, r7
 80067c2:	f7ff fd57 	bl	8006274 <_Balloc>
 80067c6:	4602      	mov	r2, r0
 80067c8:	b928      	cbnz	r0, 80067d6 <__mdiff+0x2e>
 80067ca:	f240 2132 	movw	r1, #562	; 0x232
 80067ce:	4b3a      	ldr	r3, [pc, #232]	; (80068b8 <__mdiff+0x110>)
 80067d0:	483a      	ldr	r0, [pc, #232]	; (80068bc <__mdiff+0x114>)
 80067d2:	f000 fb2d 	bl	8006e30 <__assert_func>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80067dc:	4610      	mov	r0, r2
 80067de:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067e2:	bfa4      	itt	ge
 80067e4:	4623      	movge	r3, r4
 80067e6:	462c      	movge	r4, r5
 80067e8:	4638      	mov	r0, r7
 80067ea:	6861      	ldr	r1, [r4, #4]
 80067ec:	bfa6      	itte	ge
 80067ee:	461d      	movge	r5, r3
 80067f0:	2600      	movge	r6, #0
 80067f2:	2601      	movlt	r6, #1
 80067f4:	f7ff fd3e 	bl	8006274 <_Balloc>
 80067f8:	4602      	mov	r2, r0
 80067fa:	b918      	cbnz	r0, 8006804 <__mdiff+0x5c>
 80067fc:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006800:	4b2d      	ldr	r3, [pc, #180]	; (80068b8 <__mdiff+0x110>)
 8006802:	e7e5      	b.n	80067d0 <__mdiff+0x28>
 8006804:	f102 0814 	add.w	r8, r2, #20
 8006808:	46c2      	mov	sl, r8
 800680a:	f04f 0c00 	mov.w	ip, #0
 800680e:	6927      	ldr	r7, [r4, #16]
 8006810:	60c6      	str	r6, [r0, #12]
 8006812:	692e      	ldr	r6, [r5, #16]
 8006814:	f104 0014 	add.w	r0, r4, #20
 8006818:	f105 0914 	add.w	r9, r5, #20
 800681c:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006820:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006824:	3410      	adds	r4, #16
 8006826:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800682a:	f859 3b04 	ldr.w	r3, [r9], #4
 800682e:	fa1f f18b 	uxth.w	r1, fp
 8006832:	448c      	add	ip, r1
 8006834:	b299      	uxth	r1, r3
 8006836:	0c1b      	lsrs	r3, r3, #16
 8006838:	ebac 0101 	sub.w	r1, ip, r1
 800683c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006840:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006844:	b289      	uxth	r1, r1
 8006846:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800684a:	454e      	cmp	r6, r9
 800684c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006850:	f84a 3b04 	str.w	r3, [sl], #4
 8006854:	d8e7      	bhi.n	8006826 <__mdiff+0x7e>
 8006856:	1b73      	subs	r3, r6, r5
 8006858:	3b15      	subs	r3, #21
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	3515      	adds	r5, #21
 8006860:	3304      	adds	r3, #4
 8006862:	42ae      	cmp	r6, r5
 8006864:	bf38      	it	cc
 8006866:	2304      	movcc	r3, #4
 8006868:	4418      	add	r0, r3
 800686a:	4443      	add	r3, r8
 800686c:	461e      	mov	r6, r3
 800686e:	4605      	mov	r5, r0
 8006870:	4575      	cmp	r5, lr
 8006872:	d30e      	bcc.n	8006892 <__mdiff+0xea>
 8006874:	f10e 0103 	add.w	r1, lr, #3
 8006878:	1a09      	subs	r1, r1, r0
 800687a:	f021 0103 	bic.w	r1, r1, #3
 800687e:	3803      	subs	r0, #3
 8006880:	4586      	cmp	lr, r0
 8006882:	bf38      	it	cc
 8006884:	2100      	movcc	r1, #0
 8006886:	4419      	add	r1, r3
 8006888:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800688c:	b18b      	cbz	r3, 80068b2 <__mdiff+0x10a>
 800688e:	6117      	str	r7, [r2, #16]
 8006890:	e7a4      	b.n	80067dc <__mdiff+0x34>
 8006892:	f855 8b04 	ldr.w	r8, [r5], #4
 8006896:	fa1f f188 	uxth.w	r1, r8
 800689a:	4461      	add	r1, ip
 800689c:	140c      	asrs	r4, r1, #16
 800689e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80068a2:	b289      	uxth	r1, r1
 80068a4:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80068a8:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80068ac:	f846 1b04 	str.w	r1, [r6], #4
 80068b0:	e7de      	b.n	8006870 <__mdiff+0xc8>
 80068b2:	3f01      	subs	r7, #1
 80068b4:	e7e8      	b.n	8006888 <__mdiff+0xe0>
 80068b6:	bf00      	nop
 80068b8:	08007b2f 	.word	0x08007b2f
 80068bc:	08007b40 	.word	0x08007b40

080068c0 <__d2b>:
 80068c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80068c4:	2101      	movs	r1, #1
 80068c6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80068ca:	4690      	mov	r8, r2
 80068cc:	461d      	mov	r5, r3
 80068ce:	f7ff fcd1 	bl	8006274 <_Balloc>
 80068d2:	4604      	mov	r4, r0
 80068d4:	b930      	cbnz	r0, 80068e4 <__d2b+0x24>
 80068d6:	4602      	mov	r2, r0
 80068d8:	f240 310a 	movw	r1, #778	; 0x30a
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <__d2b+0xb0>)
 80068de:	4825      	ldr	r0, [pc, #148]	; (8006974 <__d2b+0xb4>)
 80068e0:	f000 faa6 	bl	8006e30 <__assert_func>
 80068e4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 80068e8:	f3c5 550a 	ubfx	r5, r5, #20, #11
 80068ec:	bb2d      	cbnz	r5, 800693a <__d2b+0x7a>
 80068ee:	9301      	str	r3, [sp, #4]
 80068f0:	f1b8 0300 	subs.w	r3, r8, #0
 80068f4:	d026      	beq.n	8006944 <__d2b+0x84>
 80068f6:	4668      	mov	r0, sp
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	f7ff fd83 	bl	8006404 <__lo0bits>
 80068fe:	9900      	ldr	r1, [sp, #0]
 8006900:	b1f0      	cbz	r0, 8006940 <__d2b+0x80>
 8006902:	9a01      	ldr	r2, [sp, #4]
 8006904:	f1c0 0320 	rsb	r3, r0, #32
 8006908:	fa02 f303 	lsl.w	r3, r2, r3
 800690c:	430b      	orrs	r3, r1
 800690e:	40c2      	lsrs	r2, r0
 8006910:	6163      	str	r3, [r4, #20]
 8006912:	9201      	str	r2, [sp, #4]
 8006914:	9b01      	ldr	r3, [sp, #4]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bf14      	ite	ne
 800691a:	2102      	movne	r1, #2
 800691c:	2101      	moveq	r1, #1
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	6121      	str	r1, [r4, #16]
 8006922:	b1c5      	cbz	r5, 8006956 <__d2b+0x96>
 8006924:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006928:	4405      	add	r5, r0
 800692a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800692e:	603d      	str	r5, [r7, #0]
 8006930:	6030      	str	r0, [r6, #0]
 8006932:	4620      	mov	r0, r4
 8006934:	b002      	add	sp, #8
 8006936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800693a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800693e:	e7d6      	b.n	80068ee <__d2b+0x2e>
 8006940:	6161      	str	r1, [r4, #20]
 8006942:	e7e7      	b.n	8006914 <__d2b+0x54>
 8006944:	a801      	add	r0, sp, #4
 8006946:	f7ff fd5d 	bl	8006404 <__lo0bits>
 800694a:	2101      	movs	r1, #1
 800694c:	9b01      	ldr	r3, [sp, #4]
 800694e:	6121      	str	r1, [r4, #16]
 8006950:	6163      	str	r3, [r4, #20]
 8006952:	3020      	adds	r0, #32
 8006954:	e7e5      	b.n	8006922 <__d2b+0x62>
 8006956:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800695a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800695e:	6038      	str	r0, [r7, #0]
 8006960:	6918      	ldr	r0, [r3, #16]
 8006962:	f7ff fd2f 	bl	80063c4 <__hi0bits>
 8006966:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800696a:	6031      	str	r1, [r6, #0]
 800696c:	e7e1      	b.n	8006932 <__d2b+0x72>
 800696e:	bf00      	nop
 8006970:	08007b2f 	.word	0x08007b2f
 8006974:	08007b40 	.word	0x08007b40

08006978 <_calloc_r>:
 8006978:	b570      	push	{r4, r5, r6, lr}
 800697a:	fba1 5402 	umull	r5, r4, r1, r2
 800697e:	b934      	cbnz	r4, 800698e <_calloc_r+0x16>
 8006980:	4629      	mov	r1, r5
 8006982:	f000 f875 	bl	8006a70 <_malloc_r>
 8006986:	4606      	mov	r6, r0
 8006988:	b928      	cbnz	r0, 8006996 <_calloc_r+0x1e>
 800698a:	4630      	mov	r0, r6
 800698c:	bd70      	pop	{r4, r5, r6, pc}
 800698e:	220c      	movs	r2, #12
 8006990:	2600      	movs	r6, #0
 8006992:	6002      	str	r2, [r0, #0]
 8006994:	e7f9      	b.n	800698a <_calloc_r+0x12>
 8006996:	462a      	mov	r2, r5
 8006998:	4621      	mov	r1, r4
 800699a:	f7fe f93f 	bl	8004c1c <memset>
 800699e:	e7f4      	b.n	800698a <_calloc_r+0x12>

080069a0 <_free_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4605      	mov	r5, r0
 80069a4:	2900      	cmp	r1, #0
 80069a6:	d040      	beq.n	8006a2a <_free_r+0x8a>
 80069a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069ac:	1f0c      	subs	r4, r1, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfb8      	it	lt
 80069b2:	18e4      	addlt	r4, r4, r3
 80069b4:	f000 fa98 	bl	8006ee8 <__malloc_lock>
 80069b8:	4a1c      	ldr	r2, [pc, #112]	; (8006a2c <_free_r+0x8c>)
 80069ba:	6813      	ldr	r3, [r2, #0]
 80069bc:	b933      	cbnz	r3, 80069cc <_free_r+0x2c>
 80069be:	6063      	str	r3, [r4, #4]
 80069c0:	6014      	str	r4, [r2, #0]
 80069c2:	4628      	mov	r0, r5
 80069c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069c8:	f000 ba94 	b.w	8006ef4 <__malloc_unlock>
 80069cc:	42a3      	cmp	r3, r4
 80069ce:	d908      	bls.n	80069e2 <_free_r+0x42>
 80069d0:	6820      	ldr	r0, [r4, #0]
 80069d2:	1821      	adds	r1, r4, r0
 80069d4:	428b      	cmp	r3, r1
 80069d6:	bf01      	itttt	eq
 80069d8:	6819      	ldreq	r1, [r3, #0]
 80069da:	685b      	ldreq	r3, [r3, #4]
 80069dc:	1809      	addeq	r1, r1, r0
 80069de:	6021      	streq	r1, [r4, #0]
 80069e0:	e7ed      	b.n	80069be <_free_r+0x1e>
 80069e2:	461a      	mov	r2, r3
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	b10b      	cbz	r3, 80069ec <_free_r+0x4c>
 80069e8:	42a3      	cmp	r3, r4
 80069ea:	d9fa      	bls.n	80069e2 <_free_r+0x42>
 80069ec:	6811      	ldr	r1, [r2, #0]
 80069ee:	1850      	adds	r0, r2, r1
 80069f0:	42a0      	cmp	r0, r4
 80069f2:	d10b      	bne.n	8006a0c <_free_r+0x6c>
 80069f4:	6820      	ldr	r0, [r4, #0]
 80069f6:	4401      	add	r1, r0
 80069f8:	1850      	adds	r0, r2, r1
 80069fa:	4283      	cmp	r3, r0
 80069fc:	6011      	str	r1, [r2, #0]
 80069fe:	d1e0      	bne.n	80069c2 <_free_r+0x22>
 8006a00:	6818      	ldr	r0, [r3, #0]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	4401      	add	r1, r0
 8006a06:	6011      	str	r1, [r2, #0]
 8006a08:	6053      	str	r3, [r2, #4]
 8006a0a:	e7da      	b.n	80069c2 <_free_r+0x22>
 8006a0c:	d902      	bls.n	8006a14 <_free_r+0x74>
 8006a0e:	230c      	movs	r3, #12
 8006a10:	602b      	str	r3, [r5, #0]
 8006a12:	e7d6      	b.n	80069c2 <_free_r+0x22>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf01      	itttt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	1809      	addeq	r1, r1, r0
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	6063      	str	r3, [r4, #4]
 8006a26:	6054      	str	r4, [r2, #4]
 8006a28:	e7cb      	b.n	80069c2 <_free_r+0x22>
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000328 	.word	0x20000328

08006a30 <sbrk_aligned>:
 8006a30:	b570      	push	{r4, r5, r6, lr}
 8006a32:	4e0e      	ldr	r6, [pc, #56]	; (8006a6c <sbrk_aligned+0x3c>)
 8006a34:	460c      	mov	r4, r1
 8006a36:	6831      	ldr	r1, [r6, #0]
 8006a38:	4605      	mov	r5, r0
 8006a3a:	b911      	cbnz	r1, 8006a42 <sbrk_aligned+0x12>
 8006a3c:	f000 f9e8 	bl	8006e10 <_sbrk_r>
 8006a40:	6030      	str	r0, [r6, #0]
 8006a42:	4621      	mov	r1, r4
 8006a44:	4628      	mov	r0, r5
 8006a46:	f000 f9e3 	bl	8006e10 <_sbrk_r>
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d00a      	beq.n	8006a64 <sbrk_aligned+0x34>
 8006a4e:	1cc4      	adds	r4, r0, #3
 8006a50:	f024 0403 	bic.w	r4, r4, #3
 8006a54:	42a0      	cmp	r0, r4
 8006a56:	d007      	beq.n	8006a68 <sbrk_aligned+0x38>
 8006a58:	1a21      	subs	r1, r4, r0
 8006a5a:	4628      	mov	r0, r5
 8006a5c:	f000 f9d8 	bl	8006e10 <_sbrk_r>
 8006a60:	3001      	adds	r0, #1
 8006a62:	d101      	bne.n	8006a68 <sbrk_aligned+0x38>
 8006a64:	f04f 34ff 	mov.w	r4, #4294967295
 8006a68:	4620      	mov	r0, r4
 8006a6a:	bd70      	pop	{r4, r5, r6, pc}
 8006a6c:	2000032c 	.word	0x2000032c

08006a70 <_malloc_r>:
 8006a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a74:	1ccd      	adds	r5, r1, #3
 8006a76:	f025 0503 	bic.w	r5, r5, #3
 8006a7a:	3508      	adds	r5, #8
 8006a7c:	2d0c      	cmp	r5, #12
 8006a7e:	bf38      	it	cc
 8006a80:	250c      	movcc	r5, #12
 8006a82:	2d00      	cmp	r5, #0
 8006a84:	4607      	mov	r7, r0
 8006a86:	db01      	blt.n	8006a8c <_malloc_r+0x1c>
 8006a88:	42a9      	cmp	r1, r5
 8006a8a:	d905      	bls.n	8006a98 <_malloc_r+0x28>
 8006a8c:	230c      	movs	r3, #12
 8006a8e:	2600      	movs	r6, #0
 8006a90:	603b      	str	r3, [r7, #0]
 8006a92:	4630      	mov	r0, r6
 8006a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a98:	4e2e      	ldr	r6, [pc, #184]	; (8006b54 <_malloc_r+0xe4>)
 8006a9a:	f000 fa25 	bl	8006ee8 <__malloc_lock>
 8006a9e:	6833      	ldr	r3, [r6, #0]
 8006aa0:	461c      	mov	r4, r3
 8006aa2:	bb34      	cbnz	r4, 8006af2 <_malloc_r+0x82>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f7ff ffc2 	bl	8006a30 <sbrk_aligned>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	4604      	mov	r4, r0
 8006ab0:	d14d      	bne.n	8006b4e <_malloc_r+0xde>
 8006ab2:	6834      	ldr	r4, [r6, #0]
 8006ab4:	4626      	mov	r6, r4
 8006ab6:	2e00      	cmp	r6, #0
 8006ab8:	d140      	bne.n	8006b3c <_malloc_r+0xcc>
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	4631      	mov	r1, r6
 8006abe:	4638      	mov	r0, r7
 8006ac0:	eb04 0803 	add.w	r8, r4, r3
 8006ac4:	f000 f9a4 	bl	8006e10 <_sbrk_r>
 8006ac8:	4580      	cmp	r8, r0
 8006aca:	d13a      	bne.n	8006b42 <_malloc_r+0xd2>
 8006acc:	6821      	ldr	r1, [r4, #0]
 8006ace:	3503      	adds	r5, #3
 8006ad0:	1a6d      	subs	r5, r5, r1
 8006ad2:	f025 0503 	bic.w	r5, r5, #3
 8006ad6:	3508      	adds	r5, #8
 8006ad8:	2d0c      	cmp	r5, #12
 8006ada:	bf38      	it	cc
 8006adc:	250c      	movcc	r5, #12
 8006ade:	4638      	mov	r0, r7
 8006ae0:	4629      	mov	r1, r5
 8006ae2:	f7ff ffa5 	bl	8006a30 <sbrk_aligned>
 8006ae6:	3001      	adds	r0, #1
 8006ae8:	d02b      	beq.n	8006b42 <_malloc_r+0xd2>
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	442b      	add	r3, r5
 8006aee:	6023      	str	r3, [r4, #0]
 8006af0:	e00e      	b.n	8006b10 <_malloc_r+0xa0>
 8006af2:	6822      	ldr	r2, [r4, #0]
 8006af4:	1b52      	subs	r2, r2, r5
 8006af6:	d41e      	bmi.n	8006b36 <_malloc_r+0xc6>
 8006af8:	2a0b      	cmp	r2, #11
 8006afa:	d916      	bls.n	8006b2a <_malloc_r+0xba>
 8006afc:	1961      	adds	r1, r4, r5
 8006afe:	42a3      	cmp	r3, r4
 8006b00:	6025      	str	r5, [r4, #0]
 8006b02:	bf18      	it	ne
 8006b04:	6059      	strne	r1, [r3, #4]
 8006b06:	6863      	ldr	r3, [r4, #4]
 8006b08:	bf08      	it	eq
 8006b0a:	6031      	streq	r1, [r6, #0]
 8006b0c:	5162      	str	r2, [r4, r5]
 8006b0e:	604b      	str	r3, [r1, #4]
 8006b10:	4638      	mov	r0, r7
 8006b12:	f104 060b 	add.w	r6, r4, #11
 8006b16:	f000 f9ed 	bl	8006ef4 <__malloc_unlock>
 8006b1a:	f026 0607 	bic.w	r6, r6, #7
 8006b1e:	1d23      	adds	r3, r4, #4
 8006b20:	1af2      	subs	r2, r6, r3
 8006b22:	d0b6      	beq.n	8006a92 <_malloc_r+0x22>
 8006b24:	1b9b      	subs	r3, r3, r6
 8006b26:	50a3      	str	r3, [r4, r2]
 8006b28:	e7b3      	b.n	8006a92 <_malloc_r+0x22>
 8006b2a:	6862      	ldr	r2, [r4, #4]
 8006b2c:	42a3      	cmp	r3, r4
 8006b2e:	bf0c      	ite	eq
 8006b30:	6032      	streq	r2, [r6, #0]
 8006b32:	605a      	strne	r2, [r3, #4]
 8006b34:	e7ec      	b.n	8006b10 <_malloc_r+0xa0>
 8006b36:	4623      	mov	r3, r4
 8006b38:	6864      	ldr	r4, [r4, #4]
 8006b3a:	e7b2      	b.n	8006aa2 <_malloc_r+0x32>
 8006b3c:	4634      	mov	r4, r6
 8006b3e:	6876      	ldr	r6, [r6, #4]
 8006b40:	e7b9      	b.n	8006ab6 <_malloc_r+0x46>
 8006b42:	230c      	movs	r3, #12
 8006b44:	4638      	mov	r0, r7
 8006b46:	603b      	str	r3, [r7, #0]
 8006b48:	f000 f9d4 	bl	8006ef4 <__malloc_unlock>
 8006b4c:	e7a1      	b.n	8006a92 <_malloc_r+0x22>
 8006b4e:	6025      	str	r5, [r4, #0]
 8006b50:	e7de      	b.n	8006b10 <_malloc_r+0xa0>
 8006b52:	bf00      	nop
 8006b54:	20000328 	.word	0x20000328

08006b58 <__ssputs_r>:
 8006b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b5c:	688e      	ldr	r6, [r1, #8]
 8006b5e:	4682      	mov	sl, r0
 8006b60:	429e      	cmp	r6, r3
 8006b62:	460c      	mov	r4, r1
 8006b64:	4690      	mov	r8, r2
 8006b66:	461f      	mov	r7, r3
 8006b68:	d838      	bhi.n	8006bdc <__ssputs_r+0x84>
 8006b6a:	898a      	ldrh	r2, [r1, #12]
 8006b6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b70:	d032      	beq.n	8006bd8 <__ssputs_r+0x80>
 8006b72:	6825      	ldr	r5, [r4, #0]
 8006b74:	6909      	ldr	r1, [r1, #16]
 8006b76:	3301      	adds	r3, #1
 8006b78:	eba5 0901 	sub.w	r9, r5, r1
 8006b7c:	6965      	ldr	r5, [r4, #20]
 8006b7e:	444b      	add	r3, r9
 8006b80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b88:	106d      	asrs	r5, r5, #1
 8006b8a:	429d      	cmp	r5, r3
 8006b8c:	bf38      	it	cc
 8006b8e:	461d      	movcc	r5, r3
 8006b90:	0553      	lsls	r3, r2, #21
 8006b92:	d531      	bpl.n	8006bf8 <__ssputs_r+0xa0>
 8006b94:	4629      	mov	r1, r5
 8006b96:	f7ff ff6b 	bl	8006a70 <_malloc_r>
 8006b9a:	4606      	mov	r6, r0
 8006b9c:	b950      	cbnz	r0, 8006bb4 <__ssputs_r+0x5c>
 8006b9e:	230c      	movs	r3, #12
 8006ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ba4:	f8ca 3000 	str.w	r3, [sl]
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bae:	81a3      	strh	r3, [r4, #12]
 8006bb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	6921      	ldr	r1, [r4, #16]
 8006bb8:	f7ff fb4e 	bl	8006258 <memcpy>
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc6:	81a3      	strh	r3, [r4, #12]
 8006bc8:	6126      	str	r6, [r4, #16]
 8006bca:	444e      	add	r6, r9
 8006bcc:	6026      	str	r6, [r4, #0]
 8006bce:	463e      	mov	r6, r7
 8006bd0:	6165      	str	r5, [r4, #20]
 8006bd2:	eba5 0509 	sub.w	r5, r5, r9
 8006bd6:	60a5      	str	r5, [r4, #8]
 8006bd8:	42be      	cmp	r6, r7
 8006bda:	d900      	bls.n	8006bde <__ssputs_r+0x86>
 8006bdc:	463e      	mov	r6, r7
 8006bde:	4632      	mov	r2, r6
 8006be0:	4641      	mov	r1, r8
 8006be2:	6820      	ldr	r0, [r4, #0]
 8006be4:	f000 f966 	bl	8006eb4 <memmove>
 8006be8:	68a3      	ldr	r3, [r4, #8]
 8006bea:	2000      	movs	r0, #0
 8006bec:	1b9b      	subs	r3, r3, r6
 8006bee:	60a3      	str	r3, [r4, #8]
 8006bf0:	6823      	ldr	r3, [r4, #0]
 8006bf2:	4433      	add	r3, r6
 8006bf4:	6023      	str	r3, [r4, #0]
 8006bf6:	e7db      	b.n	8006bb0 <__ssputs_r+0x58>
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	f000 f981 	bl	8006f00 <_realloc_r>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1e1      	bne.n	8006bc8 <__ssputs_r+0x70>
 8006c04:	4650      	mov	r0, sl
 8006c06:	6921      	ldr	r1, [r4, #16]
 8006c08:	f7ff feca 	bl	80069a0 <_free_r>
 8006c0c:	e7c7      	b.n	8006b9e <__ssputs_r+0x46>
	...

08006c10 <_svfiprintf_r>:
 8006c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c14:	4698      	mov	r8, r3
 8006c16:	898b      	ldrh	r3, [r1, #12]
 8006c18:	4607      	mov	r7, r0
 8006c1a:	061b      	lsls	r3, r3, #24
 8006c1c:	460d      	mov	r5, r1
 8006c1e:	4614      	mov	r4, r2
 8006c20:	b09d      	sub	sp, #116	; 0x74
 8006c22:	d50e      	bpl.n	8006c42 <_svfiprintf_r+0x32>
 8006c24:	690b      	ldr	r3, [r1, #16]
 8006c26:	b963      	cbnz	r3, 8006c42 <_svfiprintf_r+0x32>
 8006c28:	2140      	movs	r1, #64	; 0x40
 8006c2a:	f7ff ff21 	bl	8006a70 <_malloc_r>
 8006c2e:	6028      	str	r0, [r5, #0]
 8006c30:	6128      	str	r0, [r5, #16]
 8006c32:	b920      	cbnz	r0, 8006c3e <_svfiprintf_r+0x2e>
 8006c34:	230c      	movs	r3, #12
 8006c36:	603b      	str	r3, [r7, #0]
 8006c38:	f04f 30ff 	mov.w	r0, #4294967295
 8006c3c:	e0d1      	b.n	8006de2 <_svfiprintf_r+0x1d2>
 8006c3e:	2340      	movs	r3, #64	; 0x40
 8006c40:	616b      	str	r3, [r5, #20]
 8006c42:	2300      	movs	r3, #0
 8006c44:	9309      	str	r3, [sp, #36]	; 0x24
 8006c46:	2320      	movs	r3, #32
 8006c48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c4c:	2330      	movs	r3, #48	; 0x30
 8006c4e:	f04f 0901 	mov.w	r9, #1
 8006c52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c56:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006dfc <_svfiprintf_r+0x1ec>
 8006c5a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c5e:	4623      	mov	r3, r4
 8006c60:	469a      	mov	sl, r3
 8006c62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c66:	b10a      	cbz	r2, 8006c6c <_svfiprintf_r+0x5c>
 8006c68:	2a25      	cmp	r2, #37	; 0x25
 8006c6a:	d1f9      	bne.n	8006c60 <_svfiprintf_r+0x50>
 8006c6c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c70:	d00b      	beq.n	8006c8a <_svfiprintf_r+0x7a>
 8006c72:	465b      	mov	r3, fp
 8006c74:	4622      	mov	r2, r4
 8006c76:	4629      	mov	r1, r5
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f7ff ff6d 	bl	8006b58 <__ssputs_r>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	f000 80aa 	beq.w	8006dd8 <_svfiprintf_r+0x1c8>
 8006c84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c86:	445a      	add	r2, fp
 8006c88:	9209      	str	r2, [sp, #36]	; 0x24
 8006c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	f000 80a2 	beq.w	8006dd8 <_svfiprintf_r+0x1c8>
 8006c94:	2300      	movs	r3, #0
 8006c96:	f04f 32ff 	mov.w	r2, #4294967295
 8006c9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9e:	f10a 0a01 	add.w	sl, sl, #1
 8006ca2:	9304      	str	r3, [sp, #16]
 8006ca4:	9307      	str	r3, [sp, #28]
 8006ca6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006caa:	931a      	str	r3, [sp, #104]	; 0x68
 8006cac:	4654      	mov	r4, sl
 8006cae:	2205      	movs	r2, #5
 8006cb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb4:	4851      	ldr	r0, [pc, #324]	; (8006dfc <_svfiprintf_r+0x1ec>)
 8006cb6:	f7ff fac1 	bl	800623c <memchr>
 8006cba:	9a04      	ldr	r2, [sp, #16]
 8006cbc:	b9d8      	cbnz	r0, 8006cf6 <_svfiprintf_r+0xe6>
 8006cbe:	06d0      	lsls	r0, r2, #27
 8006cc0:	bf44      	itt	mi
 8006cc2:	2320      	movmi	r3, #32
 8006cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc8:	0711      	lsls	r1, r2, #28
 8006cca:	bf44      	itt	mi
 8006ccc:	232b      	movmi	r3, #43	; 0x2b
 8006cce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd2:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd6:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd8:	d015      	beq.n	8006d06 <_svfiprintf_r+0xf6>
 8006cda:	4654      	mov	r4, sl
 8006cdc:	2000      	movs	r0, #0
 8006cde:	f04f 0c0a 	mov.w	ip, #10
 8006ce2:	9a07      	ldr	r2, [sp, #28]
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cea:	3b30      	subs	r3, #48	; 0x30
 8006cec:	2b09      	cmp	r3, #9
 8006cee:	d94e      	bls.n	8006d8e <_svfiprintf_r+0x17e>
 8006cf0:	b1b0      	cbz	r0, 8006d20 <_svfiprintf_r+0x110>
 8006cf2:	9207      	str	r2, [sp, #28]
 8006cf4:	e014      	b.n	8006d20 <_svfiprintf_r+0x110>
 8006cf6:	eba0 0308 	sub.w	r3, r0, r8
 8006cfa:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	46a2      	mov	sl, r4
 8006d02:	9304      	str	r3, [sp, #16]
 8006d04:	e7d2      	b.n	8006cac <_svfiprintf_r+0x9c>
 8006d06:	9b03      	ldr	r3, [sp, #12]
 8006d08:	1d19      	adds	r1, r3, #4
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	9103      	str	r1, [sp, #12]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	bfbb      	ittet	lt
 8006d12:	425b      	neglt	r3, r3
 8006d14:	f042 0202 	orrlt.w	r2, r2, #2
 8006d18:	9307      	strge	r3, [sp, #28]
 8006d1a:	9307      	strlt	r3, [sp, #28]
 8006d1c:	bfb8      	it	lt
 8006d1e:	9204      	strlt	r2, [sp, #16]
 8006d20:	7823      	ldrb	r3, [r4, #0]
 8006d22:	2b2e      	cmp	r3, #46	; 0x2e
 8006d24:	d10c      	bne.n	8006d40 <_svfiprintf_r+0x130>
 8006d26:	7863      	ldrb	r3, [r4, #1]
 8006d28:	2b2a      	cmp	r3, #42	; 0x2a
 8006d2a:	d135      	bne.n	8006d98 <_svfiprintf_r+0x188>
 8006d2c:	9b03      	ldr	r3, [sp, #12]
 8006d2e:	3402      	adds	r4, #2
 8006d30:	1d1a      	adds	r2, r3, #4
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	9203      	str	r2, [sp, #12]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	bfb8      	it	lt
 8006d3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d3e:	9305      	str	r3, [sp, #20]
 8006d40:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006e00 <_svfiprintf_r+0x1f0>
 8006d44:	2203      	movs	r2, #3
 8006d46:	4650      	mov	r0, sl
 8006d48:	7821      	ldrb	r1, [r4, #0]
 8006d4a:	f7ff fa77 	bl	800623c <memchr>
 8006d4e:	b140      	cbz	r0, 8006d62 <_svfiprintf_r+0x152>
 8006d50:	2340      	movs	r3, #64	; 0x40
 8006d52:	eba0 000a 	sub.w	r0, r0, sl
 8006d56:	fa03 f000 	lsl.w	r0, r3, r0
 8006d5a:	9b04      	ldr	r3, [sp, #16]
 8006d5c:	3401      	adds	r4, #1
 8006d5e:	4303      	orrs	r3, r0
 8006d60:	9304      	str	r3, [sp, #16]
 8006d62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d66:	2206      	movs	r2, #6
 8006d68:	4826      	ldr	r0, [pc, #152]	; (8006e04 <_svfiprintf_r+0x1f4>)
 8006d6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d6e:	f7ff fa65 	bl	800623c <memchr>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	d038      	beq.n	8006de8 <_svfiprintf_r+0x1d8>
 8006d76:	4b24      	ldr	r3, [pc, #144]	; (8006e08 <_svfiprintf_r+0x1f8>)
 8006d78:	bb1b      	cbnz	r3, 8006dc2 <_svfiprintf_r+0x1b2>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	3307      	adds	r3, #7
 8006d7e:	f023 0307 	bic.w	r3, r3, #7
 8006d82:	3308      	adds	r3, #8
 8006d84:	9303      	str	r3, [sp, #12]
 8006d86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d88:	4433      	add	r3, r6
 8006d8a:	9309      	str	r3, [sp, #36]	; 0x24
 8006d8c:	e767      	b.n	8006c5e <_svfiprintf_r+0x4e>
 8006d8e:	460c      	mov	r4, r1
 8006d90:	2001      	movs	r0, #1
 8006d92:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d96:	e7a5      	b.n	8006ce4 <_svfiprintf_r+0xd4>
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f04f 0c0a 	mov.w	ip, #10
 8006d9e:	4619      	mov	r1, r3
 8006da0:	3401      	adds	r4, #1
 8006da2:	9305      	str	r3, [sp, #20]
 8006da4:	4620      	mov	r0, r4
 8006da6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006daa:	3a30      	subs	r2, #48	; 0x30
 8006dac:	2a09      	cmp	r2, #9
 8006dae:	d903      	bls.n	8006db8 <_svfiprintf_r+0x1a8>
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c5      	beq.n	8006d40 <_svfiprintf_r+0x130>
 8006db4:	9105      	str	r1, [sp, #20]
 8006db6:	e7c3      	b.n	8006d40 <_svfiprintf_r+0x130>
 8006db8:	4604      	mov	r4, r0
 8006dba:	2301      	movs	r3, #1
 8006dbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dc0:	e7f0      	b.n	8006da4 <_svfiprintf_r+0x194>
 8006dc2:	ab03      	add	r3, sp, #12
 8006dc4:	9300      	str	r3, [sp, #0]
 8006dc6:	462a      	mov	r2, r5
 8006dc8:	4638      	mov	r0, r7
 8006dca:	4b10      	ldr	r3, [pc, #64]	; (8006e0c <_svfiprintf_r+0x1fc>)
 8006dcc:	a904      	add	r1, sp, #16
 8006dce:	f7fd ffcb 	bl	8004d68 <_printf_float>
 8006dd2:	1c42      	adds	r2, r0, #1
 8006dd4:	4606      	mov	r6, r0
 8006dd6:	d1d6      	bne.n	8006d86 <_svfiprintf_r+0x176>
 8006dd8:	89ab      	ldrh	r3, [r5, #12]
 8006dda:	065b      	lsls	r3, r3, #25
 8006ddc:	f53f af2c 	bmi.w	8006c38 <_svfiprintf_r+0x28>
 8006de0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006de2:	b01d      	add	sp, #116	; 0x74
 8006de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de8:	ab03      	add	r3, sp, #12
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	462a      	mov	r2, r5
 8006dee:	4638      	mov	r0, r7
 8006df0:	4b06      	ldr	r3, [pc, #24]	; (8006e0c <_svfiprintf_r+0x1fc>)
 8006df2:	a904      	add	r1, sp, #16
 8006df4:	f7fe fa54 	bl	80052a0 <_printf_i>
 8006df8:	e7eb      	b.n	8006dd2 <_svfiprintf_r+0x1c2>
 8006dfa:	bf00      	nop
 8006dfc:	08007c9c 	.word	0x08007c9c
 8006e00:	08007ca2 	.word	0x08007ca2
 8006e04:	08007ca6 	.word	0x08007ca6
 8006e08:	08004d69 	.word	0x08004d69
 8006e0c:	08006b59 	.word	0x08006b59

08006e10 <_sbrk_r>:
 8006e10:	b538      	push	{r3, r4, r5, lr}
 8006e12:	2300      	movs	r3, #0
 8006e14:	4d05      	ldr	r5, [pc, #20]	; (8006e2c <_sbrk_r+0x1c>)
 8006e16:	4604      	mov	r4, r0
 8006e18:	4608      	mov	r0, r1
 8006e1a:	602b      	str	r3, [r5, #0]
 8006e1c:	f7fa ffd4 	bl	8001dc8 <_sbrk>
 8006e20:	1c43      	adds	r3, r0, #1
 8006e22:	d102      	bne.n	8006e2a <_sbrk_r+0x1a>
 8006e24:	682b      	ldr	r3, [r5, #0]
 8006e26:	b103      	cbz	r3, 8006e2a <_sbrk_r+0x1a>
 8006e28:	6023      	str	r3, [r4, #0]
 8006e2a:	bd38      	pop	{r3, r4, r5, pc}
 8006e2c:	20000330 	.word	0x20000330

08006e30 <__assert_func>:
 8006e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e32:	4614      	mov	r4, r2
 8006e34:	461a      	mov	r2, r3
 8006e36:	4b09      	ldr	r3, [pc, #36]	; (8006e5c <__assert_func+0x2c>)
 8006e38:	4605      	mov	r5, r0
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68d8      	ldr	r0, [r3, #12]
 8006e3e:	b14c      	cbz	r4, 8006e54 <__assert_func+0x24>
 8006e40:	4b07      	ldr	r3, [pc, #28]	; (8006e60 <__assert_func+0x30>)
 8006e42:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e46:	9100      	str	r1, [sp, #0]
 8006e48:	462b      	mov	r3, r5
 8006e4a:	4906      	ldr	r1, [pc, #24]	; (8006e64 <__assert_func+0x34>)
 8006e4c:	f000 f80e 	bl	8006e6c <fiprintf>
 8006e50:	f000 faaa 	bl	80073a8 <abort>
 8006e54:	4b04      	ldr	r3, [pc, #16]	; (8006e68 <__assert_func+0x38>)
 8006e56:	461c      	mov	r4, r3
 8006e58:	e7f3      	b.n	8006e42 <__assert_func+0x12>
 8006e5a:	bf00      	nop
 8006e5c:	20000014 	.word	0x20000014
 8006e60:	08007cad 	.word	0x08007cad
 8006e64:	08007cba 	.word	0x08007cba
 8006e68:	08007ce8 	.word	0x08007ce8

08006e6c <fiprintf>:
 8006e6c:	b40e      	push	{r1, r2, r3}
 8006e6e:	b503      	push	{r0, r1, lr}
 8006e70:	4601      	mov	r1, r0
 8006e72:	ab03      	add	r3, sp, #12
 8006e74:	4805      	ldr	r0, [pc, #20]	; (8006e8c <fiprintf+0x20>)
 8006e76:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e7a:	6800      	ldr	r0, [r0, #0]
 8006e7c:	9301      	str	r3, [sp, #4]
 8006e7e:	f000 f895 	bl	8006fac <_vfiprintf_r>
 8006e82:	b002      	add	sp, #8
 8006e84:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e88:	b003      	add	sp, #12
 8006e8a:	4770      	bx	lr
 8006e8c:	20000014 	.word	0x20000014

08006e90 <__ascii_mbtowc>:
 8006e90:	b082      	sub	sp, #8
 8006e92:	b901      	cbnz	r1, 8006e96 <__ascii_mbtowc+0x6>
 8006e94:	a901      	add	r1, sp, #4
 8006e96:	b142      	cbz	r2, 8006eaa <__ascii_mbtowc+0x1a>
 8006e98:	b14b      	cbz	r3, 8006eae <__ascii_mbtowc+0x1e>
 8006e9a:	7813      	ldrb	r3, [r2, #0]
 8006e9c:	600b      	str	r3, [r1, #0]
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	1e10      	subs	r0, r2, #0
 8006ea2:	bf18      	it	ne
 8006ea4:	2001      	movne	r0, #1
 8006ea6:	b002      	add	sp, #8
 8006ea8:	4770      	bx	lr
 8006eaa:	4610      	mov	r0, r2
 8006eac:	e7fb      	b.n	8006ea6 <__ascii_mbtowc+0x16>
 8006eae:	f06f 0001 	mvn.w	r0, #1
 8006eb2:	e7f8      	b.n	8006ea6 <__ascii_mbtowc+0x16>

08006eb4 <memmove>:
 8006eb4:	4288      	cmp	r0, r1
 8006eb6:	b510      	push	{r4, lr}
 8006eb8:	eb01 0402 	add.w	r4, r1, r2
 8006ebc:	d902      	bls.n	8006ec4 <memmove+0x10>
 8006ebe:	4284      	cmp	r4, r0
 8006ec0:	4623      	mov	r3, r4
 8006ec2:	d807      	bhi.n	8006ed4 <memmove+0x20>
 8006ec4:	1e43      	subs	r3, r0, #1
 8006ec6:	42a1      	cmp	r1, r4
 8006ec8:	d008      	beq.n	8006edc <memmove+0x28>
 8006eca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ece:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ed2:	e7f8      	b.n	8006ec6 <memmove+0x12>
 8006ed4:	4601      	mov	r1, r0
 8006ed6:	4402      	add	r2, r0
 8006ed8:	428a      	cmp	r2, r1
 8006eda:	d100      	bne.n	8006ede <memmove+0x2a>
 8006edc:	bd10      	pop	{r4, pc}
 8006ede:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ee2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ee6:	e7f7      	b.n	8006ed8 <memmove+0x24>

08006ee8 <__malloc_lock>:
 8006ee8:	4801      	ldr	r0, [pc, #4]	; (8006ef0 <__malloc_lock+0x8>)
 8006eea:	f000 bc19 	b.w	8007720 <__retarget_lock_acquire_recursive>
 8006eee:	bf00      	nop
 8006ef0:	20000334 	.word	0x20000334

08006ef4 <__malloc_unlock>:
 8006ef4:	4801      	ldr	r0, [pc, #4]	; (8006efc <__malloc_unlock+0x8>)
 8006ef6:	f000 bc14 	b.w	8007722 <__retarget_lock_release_recursive>
 8006efa:	bf00      	nop
 8006efc:	20000334 	.word	0x20000334

08006f00 <_realloc_r>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4680      	mov	r8, r0
 8006f06:	4614      	mov	r4, r2
 8006f08:	460e      	mov	r6, r1
 8006f0a:	b921      	cbnz	r1, 8006f16 <_realloc_r+0x16>
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f12:	f7ff bdad 	b.w	8006a70 <_malloc_r>
 8006f16:	b92a      	cbnz	r2, 8006f24 <_realloc_r+0x24>
 8006f18:	f7ff fd42 	bl	80069a0 <_free_r>
 8006f1c:	4625      	mov	r5, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	f000 fc64 	bl	80077f0 <_malloc_usable_size_r>
 8006f28:	4284      	cmp	r4, r0
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	d802      	bhi.n	8006f34 <_realloc_r+0x34>
 8006f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f32:	d812      	bhi.n	8006f5a <_realloc_r+0x5a>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff fd9a 	bl	8006a70 <_malloc_r>
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0ed      	beq.n	8006f1e <_realloc_r+0x1e>
 8006f42:	42bc      	cmp	r4, r7
 8006f44:	4622      	mov	r2, r4
 8006f46:	4631      	mov	r1, r6
 8006f48:	bf28      	it	cs
 8006f4a:	463a      	movcs	r2, r7
 8006f4c:	f7ff f984 	bl	8006258 <memcpy>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fd24 	bl	80069a0 <_free_r>
 8006f58:	e7e1      	b.n	8006f1e <_realloc_r+0x1e>
 8006f5a:	4635      	mov	r5, r6
 8006f5c:	e7df      	b.n	8006f1e <_realloc_r+0x1e>

08006f5e <__sfputc_r>:
 8006f5e:	6893      	ldr	r3, [r2, #8]
 8006f60:	b410      	push	{r4}
 8006f62:	3b01      	subs	r3, #1
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	6093      	str	r3, [r2, #8]
 8006f68:	da07      	bge.n	8006f7a <__sfputc_r+0x1c>
 8006f6a:	6994      	ldr	r4, [r2, #24]
 8006f6c:	42a3      	cmp	r3, r4
 8006f6e:	db01      	blt.n	8006f74 <__sfputc_r+0x16>
 8006f70:	290a      	cmp	r1, #10
 8006f72:	d102      	bne.n	8006f7a <__sfputc_r+0x1c>
 8006f74:	bc10      	pop	{r4}
 8006f76:	f000 b949 	b.w	800720c <__swbuf_r>
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	1c58      	adds	r0, r3, #1
 8006f7e:	6010      	str	r0, [r2, #0]
 8006f80:	7019      	strb	r1, [r3, #0]
 8006f82:	4608      	mov	r0, r1
 8006f84:	bc10      	pop	{r4}
 8006f86:	4770      	bx	lr

08006f88 <__sfputs_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4614      	mov	r4, r2
 8006f90:	18d5      	adds	r5, r2, r3
 8006f92:	42ac      	cmp	r4, r5
 8006f94:	d101      	bne.n	8006f9a <__sfputs_r+0x12>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e007      	b.n	8006faa <__sfputs_r+0x22>
 8006f9a:	463a      	mov	r2, r7
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fa2:	f7ff ffdc 	bl	8006f5e <__sfputc_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d1f3      	bne.n	8006f92 <__sfputs_r+0xa>
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fac <_vfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	4614      	mov	r4, r2
 8006fb4:	4698      	mov	r8, r3
 8006fb6:	4606      	mov	r6, r0
 8006fb8:	b09d      	sub	sp, #116	; 0x74
 8006fba:	b118      	cbz	r0, 8006fc4 <_vfiprintf_r+0x18>
 8006fbc:	6983      	ldr	r3, [r0, #24]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x18>
 8006fc0:	f000 fb10 	bl	80075e4 <__sinit>
 8006fc4:	4b89      	ldr	r3, [pc, #548]	; (80071ec <_vfiprintf_r+0x240>)
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	d11b      	bne.n	8007002 <_vfiprintf_r+0x56>
 8006fca:	6875      	ldr	r5, [r6, #4]
 8006fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fda:	f000 fba1 	bl	8007720 <__retarget_lock_acquire_recursive>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	d501      	bpl.n	8006fe8 <_vfiprintf_r+0x3c>
 8006fe4:	692b      	ldr	r3, [r5, #16]
 8006fe6:	b9eb      	cbnz	r3, 8007024 <_vfiprintf_r+0x78>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f96e 	bl	80072cc <__swsetup_r>
 8006ff0:	b1c0      	cbz	r0, 8007024 <_vfiprintf_r+0x78>
 8006ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ff4:	07dc      	lsls	r4, r3, #31
 8006ff6:	d50e      	bpl.n	8007016 <_vfiprintf_r+0x6a>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffc:	b01d      	add	sp, #116	; 0x74
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	4b7b      	ldr	r3, [pc, #492]	; (80071f0 <_vfiprintf_r+0x244>)
 8007004:	429d      	cmp	r5, r3
 8007006:	d101      	bne.n	800700c <_vfiprintf_r+0x60>
 8007008:	68b5      	ldr	r5, [r6, #8]
 800700a:	e7df      	b.n	8006fcc <_vfiprintf_r+0x20>
 800700c:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <_vfiprintf_r+0x248>)
 800700e:	429d      	cmp	r5, r3
 8007010:	bf08      	it	eq
 8007012:	68f5      	ldreq	r5, [r6, #12]
 8007014:	e7da      	b.n	8006fcc <_vfiprintf_r+0x20>
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	0598      	lsls	r0, r3, #22
 800701a:	d4ed      	bmi.n	8006ff8 <_vfiprintf_r+0x4c>
 800701c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701e:	f000 fb80 	bl	8007722 <__retarget_lock_release_recursive>
 8007022:	e7e9      	b.n	8006ff8 <_vfiprintf_r+0x4c>
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702e:	2330      	movs	r3, #48	; 0x30
 8007030:	f04f 0901 	mov.w	r9, #1
 8007034:	f8cd 800c 	str.w	r8, [sp, #12]
 8007038:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80071f8 <_vfiprintf_r+0x24c>
 800703c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007040:	4623      	mov	r3, r4
 8007042:	469a      	mov	sl, r3
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	b10a      	cbz	r2, 800704e <_vfiprintf_r+0xa2>
 800704a:	2a25      	cmp	r2, #37	; 0x25
 800704c:	d1f9      	bne.n	8007042 <_vfiprintf_r+0x96>
 800704e:	ebba 0b04 	subs.w	fp, sl, r4
 8007052:	d00b      	beq.n	800706c <_vfiprintf_r+0xc0>
 8007054:	465b      	mov	r3, fp
 8007056:	4622      	mov	r2, r4
 8007058:	4629      	mov	r1, r5
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ff94 	bl	8006f88 <__sfputs_r>
 8007060:	3001      	adds	r0, #1
 8007062:	f000 80aa 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	445a      	add	r2, fp
 800706a:	9209      	str	r2, [sp, #36]	; 0x24
 800706c:	f89a 3000 	ldrb.w	r3, [sl]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a2 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708c:	931a      	str	r3, [sp, #104]	; 0x68
 800708e:	4654      	mov	r4, sl
 8007090:	2205      	movs	r2, #5
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4858      	ldr	r0, [pc, #352]	; (80071f8 <_vfiprintf_r+0x24c>)
 8007098:	f7ff f8d0 	bl	800623c <memchr>
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	b9d8      	cbnz	r0, 80070d8 <_vfiprintf_r+0x12c>
 80070a0:	06d1      	lsls	r1, r2, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2320      	movmi	r3, #32
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070aa:	0713      	lsls	r3, r2, #28
 80070ac:	bf44      	itt	mi
 80070ae:	232b      	movmi	r3, #43	; 0x2b
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d015      	beq.n	80070e8 <_vfiprintf_r+0x13c>
 80070bc:	4654      	mov	r4, sl
 80070be:	2000      	movs	r0, #0
 80070c0:	f04f 0c0a 	mov.w	ip, #10
 80070c4:	9a07      	ldr	r2, [sp, #28]
 80070c6:	4621      	mov	r1, r4
 80070c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070cc:	3b30      	subs	r3, #48	; 0x30
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d94e      	bls.n	8007170 <_vfiprintf_r+0x1c4>
 80070d2:	b1b0      	cbz	r0, 8007102 <_vfiprintf_r+0x156>
 80070d4:	9207      	str	r2, [sp, #28]
 80070d6:	e014      	b.n	8007102 <_vfiprintf_r+0x156>
 80070d8:	eba0 0308 	sub.w	r3, r0, r8
 80070dc:	fa09 f303 	lsl.w	r3, r9, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	46a2      	mov	sl, r4
 80070e4:	9304      	str	r3, [sp, #16]
 80070e6:	e7d2      	b.n	800708e <_vfiprintf_r+0xe2>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfbb      	ittet	lt
 80070f4:	425b      	neglt	r3, r3
 80070f6:	f042 0202 	orrlt.w	r2, r2, #2
 80070fa:	9307      	strge	r3, [sp, #28]
 80070fc:	9307      	strlt	r3, [sp, #28]
 80070fe:	bfb8      	it	lt
 8007100:	9204      	strlt	r2, [sp, #16]
 8007102:	7823      	ldrb	r3, [r4, #0]
 8007104:	2b2e      	cmp	r3, #46	; 0x2e
 8007106:	d10c      	bne.n	8007122 <_vfiprintf_r+0x176>
 8007108:	7863      	ldrb	r3, [r4, #1]
 800710a:	2b2a      	cmp	r3, #42	; 0x2a
 800710c:	d135      	bne.n	800717a <_vfiprintf_r+0x1ce>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	3402      	adds	r4, #2
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	9203      	str	r2, [sp, #12]
 8007118:	2b00      	cmp	r3, #0
 800711a:	bfb8      	it	lt
 800711c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 80071fc <_vfiprintf_r+0x250>
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	7821      	ldrb	r1, [r4, #0]
 800712c:	f7ff f886 	bl	800623c <memchr>
 8007130:	b140      	cbz	r0, 8007144 <_vfiprintf_r+0x198>
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	eba0 000a 	sub.w	r0, r0, sl
 8007138:	fa03 f000 	lsl.w	r0, r3, r0
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	3401      	adds	r4, #1
 8007140:	4303      	orrs	r3, r0
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	2206      	movs	r2, #6
 800714a:	482d      	ldr	r0, [pc, #180]	; (8007200 <_vfiprintf_r+0x254>)
 800714c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007150:	f7ff f874 	bl	800623c <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d03f      	beq.n	80071d8 <_vfiprintf_r+0x22c>
 8007158:	4b2a      	ldr	r3, [pc, #168]	; (8007204 <_vfiprintf_r+0x258>)
 800715a:	bb1b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x1f8>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	443b      	add	r3, r7
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	e767      	b.n	8007040 <_vfiprintf_r+0x94>
 8007170:	460c      	mov	r4, r1
 8007172:	2001      	movs	r0, #1
 8007174:	fb0c 3202 	mla	r2, ip, r2, r3
 8007178:	e7a5      	b.n	80070c6 <_vfiprintf_r+0x11a>
 800717a:	2300      	movs	r3, #0
 800717c:	f04f 0c0a 	mov.w	ip, #10
 8007180:	4619      	mov	r1, r3
 8007182:	3401      	adds	r4, #1
 8007184:	9305      	str	r3, [sp, #20]
 8007186:	4620      	mov	r0, r4
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_vfiprintf_r+0x1ee>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c5      	beq.n	8007122 <_vfiprintf_r+0x176>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c3      	b.n	8007122 <_vfiprintf_r+0x176>
 800719a:	4604      	mov	r4, r0
 800719c:	2301      	movs	r3, #1
 800719e:	fb0c 2101 	mla	r1, ip, r1, r2
 80071a2:	e7f0      	b.n	8007186 <_vfiprintf_r+0x1da>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4630      	mov	r0, r6
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <_vfiprintf_r+0x25c>)
 80071ae:	a904      	add	r1, sp, #16
 80071b0:	f7fd fdda 	bl	8004d68 <_printf_float>
 80071b4:	4607      	mov	r7, r0
 80071b6:	1c78      	adds	r0, r7, #1
 80071b8:	d1d6      	bne.n	8007168 <_vfiprintf_r+0x1bc>
 80071ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071bc:	07d9      	lsls	r1, r3, #31
 80071be:	d405      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c0:	89ab      	ldrh	r3, [r5, #12]
 80071c2:	059a      	lsls	r2, r3, #22
 80071c4:	d402      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c8:	f000 faab 	bl	8007722 <__retarget_lock_release_recursive>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af12 	bmi.w	8006ff8 <_vfiprintf_r+0x4c>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	e711      	b.n	8006ffc <_vfiprintf_r+0x50>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4630      	mov	r0, r6
 80071e0:	4b09      	ldr	r3, [pc, #36]	; (8007208 <_vfiprintf_r+0x25c>)
 80071e2:	a904      	add	r1, sp, #16
 80071e4:	f7fe f85c 	bl	80052a0 <_printf_i>
 80071e8:	e7e4      	b.n	80071b4 <_vfiprintf_r+0x208>
 80071ea:	bf00      	nop
 80071ec:	08007e14 	.word	0x08007e14
 80071f0:	08007e34 	.word	0x08007e34
 80071f4:	08007df4 	.word	0x08007df4
 80071f8:	08007c9c 	.word	0x08007c9c
 80071fc:	08007ca2 	.word	0x08007ca2
 8007200:	08007ca6 	.word	0x08007ca6
 8007204:	08004d69 	.word	0x08004d69
 8007208:	08006f89 	.word	0x08006f89

0800720c <__swbuf_r>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	460e      	mov	r6, r1
 8007210:	4614      	mov	r4, r2
 8007212:	4605      	mov	r5, r0
 8007214:	b118      	cbz	r0, 800721e <__swbuf_r+0x12>
 8007216:	6983      	ldr	r3, [r0, #24]
 8007218:	b90b      	cbnz	r3, 800721e <__swbuf_r+0x12>
 800721a:	f000 f9e3 	bl	80075e4 <__sinit>
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <__swbuf_r+0x98>)
 8007220:	429c      	cmp	r4, r3
 8007222:	d12b      	bne.n	800727c <__swbuf_r+0x70>
 8007224:	686c      	ldr	r4, [r5, #4]
 8007226:	69a3      	ldr	r3, [r4, #24]
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	071a      	lsls	r2, r3, #28
 800722e:	d52f      	bpl.n	8007290 <__swbuf_r+0x84>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	b36b      	cbz	r3, 8007290 <__swbuf_r+0x84>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	b2f6      	uxtb	r6, r6
 800723a:	1ac0      	subs	r0, r0, r3
 800723c:	6963      	ldr	r3, [r4, #20]
 800723e:	4637      	mov	r7, r6
 8007240:	4283      	cmp	r3, r0
 8007242:	dc04      	bgt.n	800724e <__swbuf_r+0x42>
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	f000 f938 	bl	80074bc <_fflush_r>
 800724c:	bb30      	cbnz	r0, 800729c <__swbuf_r+0x90>
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	3001      	adds	r0, #1
 8007252:	3b01      	subs	r3, #1
 8007254:	60a3      	str	r3, [r4, #8]
 8007256:	6823      	ldr	r3, [r4, #0]
 8007258:	1c5a      	adds	r2, r3, #1
 800725a:	6022      	str	r2, [r4, #0]
 800725c:	701e      	strb	r6, [r3, #0]
 800725e:	6963      	ldr	r3, [r4, #20]
 8007260:	4283      	cmp	r3, r0
 8007262:	d004      	beq.n	800726e <__swbuf_r+0x62>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	07db      	lsls	r3, r3, #31
 8007268:	d506      	bpl.n	8007278 <__swbuf_r+0x6c>
 800726a:	2e0a      	cmp	r6, #10
 800726c:	d104      	bne.n	8007278 <__swbuf_r+0x6c>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f923 	bl	80074bc <_fflush_r>
 8007276:	b988      	cbnz	r0, 800729c <__swbuf_r+0x90>
 8007278:	4638      	mov	r0, r7
 800727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <__swbuf_r+0x9c>)
 800727e:	429c      	cmp	r4, r3
 8007280:	d101      	bne.n	8007286 <__swbuf_r+0x7a>
 8007282:	68ac      	ldr	r4, [r5, #8]
 8007284:	e7cf      	b.n	8007226 <__swbuf_r+0x1a>
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <__swbuf_r+0xa0>)
 8007288:	429c      	cmp	r4, r3
 800728a:	bf08      	it	eq
 800728c:	68ec      	ldreq	r4, [r5, #12]
 800728e:	e7ca      	b.n	8007226 <__swbuf_r+0x1a>
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f81a 	bl	80072cc <__swsetup_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	d0cb      	beq.n	8007234 <__swbuf_r+0x28>
 800729c:	f04f 37ff 	mov.w	r7, #4294967295
 80072a0:	e7ea      	b.n	8007278 <__swbuf_r+0x6c>
 80072a2:	bf00      	nop
 80072a4:	08007e14 	.word	0x08007e14
 80072a8:	08007e34 	.word	0x08007e34
 80072ac:	08007df4 	.word	0x08007df4

080072b0 <__ascii_wctomb>:
 80072b0:	4603      	mov	r3, r0
 80072b2:	4608      	mov	r0, r1
 80072b4:	b141      	cbz	r1, 80072c8 <__ascii_wctomb+0x18>
 80072b6:	2aff      	cmp	r2, #255	; 0xff
 80072b8:	d904      	bls.n	80072c4 <__ascii_wctomb+0x14>
 80072ba:	228a      	movs	r2, #138	; 0x8a
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	601a      	str	r2, [r3, #0]
 80072c2:	4770      	bx	lr
 80072c4:	2001      	movs	r0, #1
 80072c6:	700a      	strb	r2, [r1, #0]
 80072c8:	4770      	bx	lr
	...

080072cc <__swsetup_r>:
 80072cc:	4b32      	ldr	r3, [pc, #200]	; (8007398 <__swsetup_r+0xcc>)
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	681d      	ldr	r5, [r3, #0]
 80072d2:	4606      	mov	r6, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	b125      	cbz	r5, 80072e2 <__swsetup_r+0x16>
 80072d8:	69ab      	ldr	r3, [r5, #24]
 80072da:	b913      	cbnz	r3, 80072e2 <__swsetup_r+0x16>
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f981 	bl	80075e4 <__sinit>
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <__swsetup_r+0xd0>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d10f      	bne.n	8007308 <__swsetup_r+0x3c>
 80072e8:	686c      	ldr	r4, [r5, #4]
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f0:	0719      	lsls	r1, r3, #28
 80072f2:	d42c      	bmi.n	800734e <__swsetup_r+0x82>
 80072f4:	06dd      	lsls	r5, r3, #27
 80072f6:	d411      	bmi.n	800731c <__swsetup_r+0x50>
 80072f8:	2309      	movs	r3, #9
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007300:	f04f 30ff 	mov.w	r0, #4294967295
 8007304:	81a3      	strh	r3, [r4, #12]
 8007306:	e03e      	b.n	8007386 <__swsetup_r+0xba>
 8007308:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <__swsetup_r+0xd4>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d101      	bne.n	8007312 <__swsetup_r+0x46>
 800730e:	68ac      	ldr	r4, [r5, #8]
 8007310:	e7eb      	b.n	80072ea <__swsetup_r+0x1e>
 8007312:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <__swsetup_r+0xd8>)
 8007314:	429c      	cmp	r4, r3
 8007316:	bf08      	it	eq
 8007318:	68ec      	ldreq	r4, [r5, #12]
 800731a:	e7e6      	b.n	80072ea <__swsetup_r+0x1e>
 800731c:	0758      	lsls	r0, r3, #29
 800731e:	d512      	bpl.n	8007346 <__swsetup_r+0x7a>
 8007320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007322:	b141      	cbz	r1, 8007336 <__swsetup_r+0x6a>
 8007324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007328:	4299      	cmp	r1, r3
 800732a:	d002      	beq.n	8007332 <__swsetup_r+0x66>
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff fb37 	bl	80069a0 <_free_r>
 8007332:	2300      	movs	r3, #0
 8007334:	6363      	str	r3, [r4, #52]	; 0x34
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	2300      	movs	r3, #0
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f043 0308 	orr.w	r3, r3, #8
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	b94b      	cbnz	r3, 8007366 <__swsetup_r+0x9a>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735c:	d003      	beq.n	8007366 <__swsetup_r+0x9a>
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f000 fa05 	bl	8007770 <__smakebuf_r>
 8007366:	89a0      	ldrh	r0, [r4, #12]
 8007368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800736c:	f010 0301 	ands.w	r3, r0, #1
 8007370:	d00a      	beq.n	8007388 <__swsetup_r+0xbc>
 8007372:	2300      	movs	r3, #0
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6963      	ldr	r3, [r4, #20]
 8007378:	425b      	negs	r3, r3
 800737a:	61a3      	str	r3, [r4, #24]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	b943      	cbnz	r3, 8007392 <__swsetup_r+0xc6>
 8007380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007384:	d1ba      	bne.n	80072fc <__swsetup_r+0x30>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	0781      	lsls	r1, r0, #30
 800738a:	bf58      	it	pl
 800738c:	6963      	ldrpl	r3, [r4, #20]
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	e7f4      	b.n	800737c <__swsetup_r+0xb0>
 8007392:	2000      	movs	r0, #0
 8007394:	e7f7      	b.n	8007386 <__swsetup_r+0xba>
 8007396:	bf00      	nop
 8007398:	20000014 	.word	0x20000014
 800739c:	08007e14 	.word	0x08007e14
 80073a0:	08007e34 	.word	0x08007e34
 80073a4:	08007df4 	.word	0x08007df4

080073a8 <abort>:
 80073a8:	2006      	movs	r0, #6
 80073aa:	b508      	push	{r3, lr}
 80073ac:	f000 fa50 	bl	8007850 <raise>
 80073b0:	2001      	movs	r0, #1
 80073b2:	f7fa fc96 	bl	8001ce2 <_exit>
	...

080073b8 <__sflush_r>:
 80073b8:	898a      	ldrh	r2, [r1, #12]
 80073ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073bc:	4605      	mov	r5, r0
 80073be:	0710      	lsls	r0, r2, #28
 80073c0:	460c      	mov	r4, r1
 80073c2:	d457      	bmi.n	8007474 <__sflush_r+0xbc>
 80073c4:	684b      	ldr	r3, [r1, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	dc04      	bgt.n	80073d4 <__sflush_r+0x1c>
 80073ca:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	dc01      	bgt.n	80073d4 <__sflush_r+0x1c>
 80073d0:	2000      	movs	r0, #0
 80073d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80073d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073d6:	2e00      	cmp	r6, #0
 80073d8:	d0fa      	beq.n	80073d0 <__sflush_r+0x18>
 80073da:	2300      	movs	r3, #0
 80073dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073e0:	682f      	ldr	r7, [r5, #0]
 80073e2:	602b      	str	r3, [r5, #0]
 80073e4:	d032      	beq.n	800744c <__sflush_r+0x94>
 80073e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073e8:	89a3      	ldrh	r3, [r4, #12]
 80073ea:	075a      	lsls	r2, r3, #29
 80073ec:	d505      	bpl.n	80073fa <__sflush_r+0x42>
 80073ee:	6863      	ldr	r3, [r4, #4]
 80073f0:	1ac0      	subs	r0, r0, r3
 80073f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073f4:	b10b      	cbz	r3, 80073fa <__sflush_r+0x42>
 80073f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073f8:	1ac0      	subs	r0, r0, r3
 80073fa:	2300      	movs	r3, #0
 80073fc:	4602      	mov	r2, r0
 80073fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007400:	4628      	mov	r0, r5
 8007402:	6a21      	ldr	r1, [r4, #32]
 8007404:	47b0      	blx	r6
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	89a3      	ldrh	r3, [r4, #12]
 800740a:	d106      	bne.n	800741a <__sflush_r+0x62>
 800740c:	6829      	ldr	r1, [r5, #0]
 800740e:	291d      	cmp	r1, #29
 8007410:	d82c      	bhi.n	800746c <__sflush_r+0xb4>
 8007412:	4a29      	ldr	r2, [pc, #164]	; (80074b8 <__sflush_r+0x100>)
 8007414:	40ca      	lsrs	r2, r1
 8007416:	07d6      	lsls	r6, r2, #31
 8007418:	d528      	bpl.n	800746c <__sflush_r+0xb4>
 800741a:	2200      	movs	r2, #0
 800741c:	6062      	str	r2, [r4, #4]
 800741e:	6922      	ldr	r2, [r4, #16]
 8007420:	04d9      	lsls	r1, r3, #19
 8007422:	6022      	str	r2, [r4, #0]
 8007424:	d504      	bpl.n	8007430 <__sflush_r+0x78>
 8007426:	1c42      	adds	r2, r0, #1
 8007428:	d101      	bne.n	800742e <__sflush_r+0x76>
 800742a:	682b      	ldr	r3, [r5, #0]
 800742c:	b903      	cbnz	r3, 8007430 <__sflush_r+0x78>
 800742e:	6560      	str	r0, [r4, #84]	; 0x54
 8007430:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007432:	602f      	str	r7, [r5, #0]
 8007434:	2900      	cmp	r1, #0
 8007436:	d0cb      	beq.n	80073d0 <__sflush_r+0x18>
 8007438:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800743c:	4299      	cmp	r1, r3
 800743e:	d002      	beq.n	8007446 <__sflush_r+0x8e>
 8007440:	4628      	mov	r0, r5
 8007442:	f7ff faad 	bl	80069a0 <_free_r>
 8007446:	2000      	movs	r0, #0
 8007448:	6360      	str	r0, [r4, #52]	; 0x34
 800744a:	e7c2      	b.n	80073d2 <__sflush_r+0x1a>
 800744c:	6a21      	ldr	r1, [r4, #32]
 800744e:	2301      	movs	r3, #1
 8007450:	4628      	mov	r0, r5
 8007452:	47b0      	blx	r6
 8007454:	1c41      	adds	r1, r0, #1
 8007456:	d1c7      	bne.n	80073e8 <__sflush_r+0x30>
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0c4      	beq.n	80073e8 <__sflush_r+0x30>
 800745e:	2b1d      	cmp	r3, #29
 8007460:	d001      	beq.n	8007466 <__sflush_r+0xae>
 8007462:	2b16      	cmp	r3, #22
 8007464:	d101      	bne.n	800746a <__sflush_r+0xb2>
 8007466:	602f      	str	r7, [r5, #0]
 8007468:	e7b2      	b.n	80073d0 <__sflush_r+0x18>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007470:	81a3      	strh	r3, [r4, #12]
 8007472:	e7ae      	b.n	80073d2 <__sflush_r+0x1a>
 8007474:	690f      	ldr	r7, [r1, #16]
 8007476:	2f00      	cmp	r7, #0
 8007478:	d0aa      	beq.n	80073d0 <__sflush_r+0x18>
 800747a:	0793      	lsls	r3, r2, #30
 800747c:	bf18      	it	ne
 800747e:	2300      	movne	r3, #0
 8007480:	680e      	ldr	r6, [r1, #0]
 8007482:	bf08      	it	eq
 8007484:	694b      	ldreq	r3, [r1, #20]
 8007486:	1bf6      	subs	r6, r6, r7
 8007488:	600f      	str	r7, [r1, #0]
 800748a:	608b      	str	r3, [r1, #8]
 800748c:	2e00      	cmp	r6, #0
 800748e:	dd9f      	ble.n	80073d0 <__sflush_r+0x18>
 8007490:	4633      	mov	r3, r6
 8007492:	463a      	mov	r2, r7
 8007494:	4628      	mov	r0, r5
 8007496:	6a21      	ldr	r1, [r4, #32]
 8007498:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800749c:	47e0      	blx	ip
 800749e:	2800      	cmp	r0, #0
 80074a0:	dc06      	bgt.n	80074b0 <__sflush_r+0xf8>
 80074a2:	89a3      	ldrh	r3, [r4, #12]
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ac:	81a3      	strh	r3, [r4, #12]
 80074ae:	e790      	b.n	80073d2 <__sflush_r+0x1a>
 80074b0:	4407      	add	r7, r0
 80074b2:	1a36      	subs	r6, r6, r0
 80074b4:	e7ea      	b.n	800748c <__sflush_r+0xd4>
 80074b6:	bf00      	nop
 80074b8:	20400001 	.word	0x20400001

080074bc <_fflush_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	690b      	ldr	r3, [r1, #16]
 80074c0:	4605      	mov	r5, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	b913      	cbnz	r3, 80074cc <_fflush_r+0x10>
 80074c6:	2500      	movs	r5, #0
 80074c8:	4628      	mov	r0, r5
 80074ca:	bd38      	pop	{r3, r4, r5, pc}
 80074cc:	b118      	cbz	r0, 80074d6 <_fflush_r+0x1a>
 80074ce:	6983      	ldr	r3, [r0, #24]
 80074d0:	b90b      	cbnz	r3, 80074d6 <_fflush_r+0x1a>
 80074d2:	f000 f887 	bl	80075e4 <__sinit>
 80074d6:	4b14      	ldr	r3, [pc, #80]	; (8007528 <_fflush_r+0x6c>)
 80074d8:	429c      	cmp	r4, r3
 80074da:	d11b      	bne.n	8007514 <_fflush_r+0x58>
 80074dc:	686c      	ldr	r4, [r5, #4]
 80074de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d0ef      	beq.n	80074c6 <_fflush_r+0xa>
 80074e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074e8:	07d0      	lsls	r0, r2, #31
 80074ea:	d404      	bmi.n	80074f6 <_fflush_r+0x3a>
 80074ec:	0599      	lsls	r1, r3, #22
 80074ee:	d402      	bmi.n	80074f6 <_fflush_r+0x3a>
 80074f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074f2:	f000 f915 	bl	8007720 <__retarget_lock_acquire_recursive>
 80074f6:	4628      	mov	r0, r5
 80074f8:	4621      	mov	r1, r4
 80074fa:	f7ff ff5d 	bl	80073b8 <__sflush_r>
 80074fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007500:	4605      	mov	r5, r0
 8007502:	07da      	lsls	r2, r3, #31
 8007504:	d4e0      	bmi.n	80074c8 <_fflush_r+0xc>
 8007506:	89a3      	ldrh	r3, [r4, #12]
 8007508:	059b      	lsls	r3, r3, #22
 800750a:	d4dd      	bmi.n	80074c8 <_fflush_r+0xc>
 800750c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800750e:	f000 f908 	bl	8007722 <__retarget_lock_release_recursive>
 8007512:	e7d9      	b.n	80074c8 <_fflush_r+0xc>
 8007514:	4b05      	ldr	r3, [pc, #20]	; (800752c <_fflush_r+0x70>)
 8007516:	429c      	cmp	r4, r3
 8007518:	d101      	bne.n	800751e <_fflush_r+0x62>
 800751a:	68ac      	ldr	r4, [r5, #8]
 800751c:	e7df      	b.n	80074de <_fflush_r+0x22>
 800751e:	4b04      	ldr	r3, [pc, #16]	; (8007530 <_fflush_r+0x74>)
 8007520:	429c      	cmp	r4, r3
 8007522:	bf08      	it	eq
 8007524:	68ec      	ldreq	r4, [r5, #12]
 8007526:	e7da      	b.n	80074de <_fflush_r+0x22>
 8007528:	08007e14 	.word	0x08007e14
 800752c:	08007e34 	.word	0x08007e34
 8007530:	08007df4 	.word	0x08007df4

08007534 <std>:
 8007534:	2300      	movs	r3, #0
 8007536:	b510      	push	{r4, lr}
 8007538:	4604      	mov	r4, r0
 800753a:	e9c0 3300 	strd	r3, r3, [r0]
 800753e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007542:	6083      	str	r3, [r0, #8]
 8007544:	8181      	strh	r1, [r0, #12]
 8007546:	6643      	str	r3, [r0, #100]	; 0x64
 8007548:	81c2      	strh	r2, [r0, #14]
 800754a:	6183      	str	r3, [r0, #24]
 800754c:	4619      	mov	r1, r3
 800754e:	2208      	movs	r2, #8
 8007550:	305c      	adds	r0, #92	; 0x5c
 8007552:	f7fd fb63 	bl	8004c1c <memset>
 8007556:	4b05      	ldr	r3, [pc, #20]	; (800756c <std+0x38>)
 8007558:	6224      	str	r4, [r4, #32]
 800755a:	6263      	str	r3, [r4, #36]	; 0x24
 800755c:	4b04      	ldr	r3, [pc, #16]	; (8007570 <std+0x3c>)
 800755e:	62a3      	str	r3, [r4, #40]	; 0x28
 8007560:	4b04      	ldr	r3, [pc, #16]	; (8007574 <std+0x40>)
 8007562:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007564:	4b04      	ldr	r3, [pc, #16]	; (8007578 <std+0x44>)
 8007566:	6323      	str	r3, [r4, #48]	; 0x30
 8007568:	bd10      	pop	{r4, pc}
 800756a:	bf00      	nop
 800756c:	08007889 	.word	0x08007889
 8007570:	080078ab 	.word	0x080078ab
 8007574:	080078e3 	.word	0x080078e3
 8007578:	08007907 	.word	0x08007907

0800757c <_cleanup_r>:
 800757c:	4901      	ldr	r1, [pc, #4]	; (8007584 <_cleanup_r+0x8>)
 800757e:	f000 b8af 	b.w	80076e0 <_fwalk_reent>
 8007582:	bf00      	nop
 8007584:	080074bd 	.word	0x080074bd

08007588 <__sfmoreglue>:
 8007588:	2268      	movs	r2, #104	; 0x68
 800758a:	b570      	push	{r4, r5, r6, lr}
 800758c:	1e4d      	subs	r5, r1, #1
 800758e:	4355      	muls	r5, r2
 8007590:	460e      	mov	r6, r1
 8007592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007596:	f7ff fa6b 	bl	8006a70 <_malloc_r>
 800759a:	4604      	mov	r4, r0
 800759c:	b140      	cbz	r0, 80075b0 <__sfmoreglue+0x28>
 800759e:	2100      	movs	r1, #0
 80075a0:	e9c0 1600 	strd	r1, r6, [r0]
 80075a4:	300c      	adds	r0, #12
 80075a6:	60a0      	str	r0, [r4, #8]
 80075a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075ac:	f7fd fb36 	bl	8004c1c <memset>
 80075b0:	4620      	mov	r0, r4
 80075b2:	bd70      	pop	{r4, r5, r6, pc}

080075b4 <__sfp_lock_acquire>:
 80075b4:	4801      	ldr	r0, [pc, #4]	; (80075bc <__sfp_lock_acquire+0x8>)
 80075b6:	f000 b8b3 	b.w	8007720 <__retarget_lock_acquire_recursive>
 80075ba:	bf00      	nop
 80075bc:	20000335 	.word	0x20000335

080075c0 <__sfp_lock_release>:
 80075c0:	4801      	ldr	r0, [pc, #4]	; (80075c8 <__sfp_lock_release+0x8>)
 80075c2:	f000 b8ae 	b.w	8007722 <__retarget_lock_release_recursive>
 80075c6:	bf00      	nop
 80075c8:	20000335 	.word	0x20000335

080075cc <__sinit_lock_acquire>:
 80075cc:	4801      	ldr	r0, [pc, #4]	; (80075d4 <__sinit_lock_acquire+0x8>)
 80075ce:	f000 b8a7 	b.w	8007720 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20000336 	.word	0x20000336

080075d8 <__sinit_lock_release>:
 80075d8:	4801      	ldr	r0, [pc, #4]	; (80075e0 <__sinit_lock_release+0x8>)
 80075da:	f000 b8a2 	b.w	8007722 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20000336 	.word	0x20000336

080075e4 <__sinit>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	f7ff fff0 	bl	80075cc <__sinit_lock_acquire>
 80075ec:	69a3      	ldr	r3, [r4, #24]
 80075ee:	b11b      	cbz	r3, 80075f8 <__sinit+0x14>
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f7ff bff0 	b.w	80075d8 <__sinit_lock_release>
 80075f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80075fc:	6523      	str	r3, [r4, #80]	; 0x50
 80075fe:	4b13      	ldr	r3, [pc, #76]	; (800764c <__sinit+0x68>)
 8007600:	4a13      	ldr	r2, [pc, #76]	; (8007650 <__sinit+0x6c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	62a2      	str	r2, [r4, #40]	; 0x28
 8007606:	42a3      	cmp	r3, r4
 8007608:	bf08      	it	eq
 800760a:	2301      	moveq	r3, #1
 800760c:	4620      	mov	r0, r4
 800760e:	bf08      	it	eq
 8007610:	61a3      	streq	r3, [r4, #24]
 8007612:	f000 f81f 	bl	8007654 <__sfp>
 8007616:	6060      	str	r0, [r4, #4]
 8007618:	4620      	mov	r0, r4
 800761a:	f000 f81b 	bl	8007654 <__sfp>
 800761e:	60a0      	str	r0, [r4, #8]
 8007620:	4620      	mov	r0, r4
 8007622:	f000 f817 	bl	8007654 <__sfp>
 8007626:	2200      	movs	r2, #0
 8007628:	2104      	movs	r1, #4
 800762a:	60e0      	str	r0, [r4, #12]
 800762c:	6860      	ldr	r0, [r4, #4]
 800762e:	f7ff ff81 	bl	8007534 <std>
 8007632:	2201      	movs	r2, #1
 8007634:	2109      	movs	r1, #9
 8007636:	68a0      	ldr	r0, [r4, #8]
 8007638:	f7ff ff7c 	bl	8007534 <std>
 800763c:	2202      	movs	r2, #2
 800763e:	2112      	movs	r1, #18
 8007640:	68e0      	ldr	r0, [r4, #12]
 8007642:	f7ff ff77 	bl	8007534 <std>
 8007646:	2301      	movs	r3, #1
 8007648:	61a3      	str	r3, [r4, #24]
 800764a:	e7d1      	b.n	80075f0 <__sinit+0xc>
 800764c:	08007a78 	.word	0x08007a78
 8007650:	0800757d 	.word	0x0800757d

08007654 <__sfp>:
 8007654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007656:	4607      	mov	r7, r0
 8007658:	f7ff ffac 	bl	80075b4 <__sfp_lock_acquire>
 800765c:	4b1e      	ldr	r3, [pc, #120]	; (80076d8 <__sfp+0x84>)
 800765e:	681e      	ldr	r6, [r3, #0]
 8007660:	69b3      	ldr	r3, [r6, #24]
 8007662:	b913      	cbnz	r3, 800766a <__sfp+0x16>
 8007664:	4630      	mov	r0, r6
 8007666:	f7ff ffbd 	bl	80075e4 <__sinit>
 800766a:	3648      	adds	r6, #72	; 0x48
 800766c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007670:	3b01      	subs	r3, #1
 8007672:	d503      	bpl.n	800767c <__sfp+0x28>
 8007674:	6833      	ldr	r3, [r6, #0]
 8007676:	b30b      	cbz	r3, 80076bc <__sfp+0x68>
 8007678:	6836      	ldr	r6, [r6, #0]
 800767a:	e7f7      	b.n	800766c <__sfp+0x18>
 800767c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007680:	b9d5      	cbnz	r5, 80076b8 <__sfp+0x64>
 8007682:	4b16      	ldr	r3, [pc, #88]	; (80076dc <__sfp+0x88>)
 8007684:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007688:	60e3      	str	r3, [r4, #12]
 800768a:	6665      	str	r5, [r4, #100]	; 0x64
 800768c:	f000 f847 	bl	800771e <__retarget_lock_init_recursive>
 8007690:	f7ff ff96 	bl	80075c0 <__sfp_lock_release>
 8007694:	2208      	movs	r2, #8
 8007696:	4629      	mov	r1, r5
 8007698:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800769c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076a0:	6025      	str	r5, [r4, #0]
 80076a2:	61a5      	str	r5, [r4, #24]
 80076a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076a8:	f7fd fab8 	bl	8004c1c <memset>
 80076ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076b4:	4620      	mov	r0, r4
 80076b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b8:	3468      	adds	r4, #104	; 0x68
 80076ba:	e7d9      	b.n	8007670 <__sfp+0x1c>
 80076bc:	2104      	movs	r1, #4
 80076be:	4638      	mov	r0, r7
 80076c0:	f7ff ff62 	bl	8007588 <__sfmoreglue>
 80076c4:	4604      	mov	r4, r0
 80076c6:	6030      	str	r0, [r6, #0]
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d1d5      	bne.n	8007678 <__sfp+0x24>
 80076cc:	f7ff ff78 	bl	80075c0 <__sfp_lock_release>
 80076d0:	230c      	movs	r3, #12
 80076d2:	603b      	str	r3, [r7, #0]
 80076d4:	e7ee      	b.n	80076b4 <__sfp+0x60>
 80076d6:	bf00      	nop
 80076d8:	08007a78 	.word	0x08007a78
 80076dc:	ffff0001 	.word	0xffff0001

080076e0 <_fwalk_reent>:
 80076e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076e4:	4606      	mov	r6, r0
 80076e6:	4688      	mov	r8, r1
 80076e8:	2700      	movs	r7, #0
 80076ea:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076f2:	f1b9 0901 	subs.w	r9, r9, #1
 80076f6:	d505      	bpl.n	8007704 <_fwalk_reent+0x24>
 80076f8:	6824      	ldr	r4, [r4, #0]
 80076fa:	2c00      	cmp	r4, #0
 80076fc:	d1f7      	bne.n	80076ee <_fwalk_reent+0xe>
 80076fe:	4638      	mov	r0, r7
 8007700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007704:	89ab      	ldrh	r3, [r5, #12]
 8007706:	2b01      	cmp	r3, #1
 8007708:	d907      	bls.n	800771a <_fwalk_reent+0x3a>
 800770a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800770e:	3301      	adds	r3, #1
 8007710:	d003      	beq.n	800771a <_fwalk_reent+0x3a>
 8007712:	4629      	mov	r1, r5
 8007714:	4630      	mov	r0, r6
 8007716:	47c0      	blx	r8
 8007718:	4307      	orrs	r7, r0
 800771a:	3568      	adds	r5, #104	; 0x68
 800771c:	e7e9      	b.n	80076f2 <_fwalk_reent+0x12>

0800771e <__retarget_lock_init_recursive>:
 800771e:	4770      	bx	lr

08007720 <__retarget_lock_acquire_recursive>:
 8007720:	4770      	bx	lr

08007722 <__retarget_lock_release_recursive>:
 8007722:	4770      	bx	lr

08007724 <__swhatbuf_r>:
 8007724:	b570      	push	{r4, r5, r6, lr}
 8007726:	460e      	mov	r6, r1
 8007728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772c:	4614      	mov	r4, r2
 800772e:	2900      	cmp	r1, #0
 8007730:	461d      	mov	r5, r3
 8007732:	b096      	sub	sp, #88	; 0x58
 8007734:	da08      	bge.n	8007748 <__swhatbuf_r+0x24>
 8007736:	2200      	movs	r2, #0
 8007738:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800773c:	602a      	str	r2, [r5, #0]
 800773e:	061a      	lsls	r2, r3, #24
 8007740:	d410      	bmi.n	8007764 <__swhatbuf_r+0x40>
 8007742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007746:	e00e      	b.n	8007766 <__swhatbuf_r+0x42>
 8007748:	466a      	mov	r2, sp
 800774a:	f000 f903 	bl	8007954 <_fstat_r>
 800774e:	2800      	cmp	r0, #0
 8007750:	dbf1      	blt.n	8007736 <__swhatbuf_r+0x12>
 8007752:	9a01      	ldr	r2, [sp, #4]
 8007754:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007758:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800775c:	425a      	negs	r2, r3
 800775e:	415a      	adcs	r2, r3
 8007760:	602a      	str	r2, [r5, #0]
 8007762:	e7ee      	b.n	8007742 <__swhatbuf_r+0x1e>
 8007764:	2340      	movs	r3, #64	; 0x40
 8007766:	2000      	movs	r0, #0
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	b016      	add	sp, #88	; 0x58
 800776c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007770 <__smakebuf_r>:
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007774:	079d      	lsls	r5, r3, #30
 8007776:	4606      	mov	r6, r0
 8007778:	460c      	mov	r4, r1
 800777a:	d507      	bpl.n	800778c <__smakebuf_r+0x1c>
 800777c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007780:	6023      	str	r3, [r4, #0]
 8007782:	6123      	str	r3, [r4, #16]
 8007784:	2301      	movs	r3, #1
 8007786:	6163      	str	r3, [r4, #20]
 8007788:	b002      	add	sp, #8
 800778a:	bd70      	pop	{r4, r5, r6, pc}
 800778c:	466a      	mov	r2, sp
 800778e:	ab01      	add	r3, sp, #4
 8007790:	f7ff ffc8 	bl	8007724 <__swhatbuf_r>
 8007794:	9900      	ldr	r1, [sp, #0]
 8007796:	4605      	mov	r5, r0
 8007798:	4630      	mov	r0, r6
 800779a:	f7ff f969 	bl	8006a70 <_malloc_r>
 800779e:	b948      	cbnz	r0, 80077b4 <__smakebuf_r+0x44>
 80077a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077a4:	059a      	lsls	r2, r3, #22
 80077a6:	d4ef      	bmi.n	8007788 <__smakebuf_r+0x18>
 80077a8:	f023 0303 	bic.w	r3, r3, #3
 80077ac:	f043 0302 	orr.w	r3, r3, #2
 80077b0:	81a3      	strh	r3, [r4, #12]
 80077b2:	e7e3      	b.n	800777c <__smakebuf_r+0xc>
 80077b4:	4b0d      	ldr	r3, [pc, #52]	; (80077ec <__smakebuf_r+0x7c>)
 80077b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80077b8:	89a3      	ldrh	r3, [r4, #12]
 80077ba:	6020      	str	r0, [r4, #0]
 80077bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c0:	81a3      	strh	r3, [r4, #12]
 80077c2:	9b00      	ldr	r3, [sp, #0]
 80077c4:	6120      	str	r0, [r4, #16]
 80077c6:	6163      	str	r3, [r4, #20]
 80077c8:	9b01      	ldr	r3, [sp, #4]
 80077ca:	b15b      	cbz	r3, 80077e4 <__smakebuf_r+0x74>
 80077cc:	4630      	mov	r0, r6
 80077ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077d2:	f000 f8d1 	bl	8007978 <_isatty_r>
 80077d6:	b128      	cbz	r0, 80077e4 <__smakebuf_r+0x74>
 80077d8:	89a3      	ldrh	r3, [r4, #12]
 80077da:	f023 0303 	bic.w	r3, r3, #3
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	81a3      	strh	r3, [r4, #12]
 80077e4:	89a0      	ldrh	r0, [r4, #12]
 80077e6:	4305      	orrs	r5, r0
 80077e8:	81a5      	strh	r5, [r4, #12]
 80077ea:	e7cd      	b.n	8007788 <__smakebuf_r+0x18>
 80077ec:	0800757d 	.word	0x0800757d

080077f0 <_malloc_usable_size_r>:
 80077f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f4:	1f18      	subs	r0, r3, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bfbc      	itt	lt
 80077fa:	580b      	ldrlt	r3, [r1, r0]
 80077fc:	18c0      	addlt	r0, r0, r3
 80077fe:	4770      	bx	lr

08007800 <_raise_r>:
 8007800:	291f      	cmp	r1, #31
 8007802:	b538      	push	{r3, r4, r5, lr}
 8007804:	4604      	mov	r4, r0
 8007806:	460d      	mov	r5, r1
 8007808:	d904      	bls.n	8007814 <_raise_r+0x14>
 800780a:	2316      	movs	r3, #22
 800780c:	6003      	str	r3, [r0, #0]
 800780e:	f04f 30ff 	mov.w	r0, #4294967295
 8007812:	bd38      	pop	{r3, r4, r5, pc}
 8007814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007816:	b112      	cbz	r2, 800781e <_raise_r+0x1e>
 8007818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800781c:	b94b      	cbnz	r3, 8007832 <_raise_r+0x32>
 800781e:	4620      	mov	r0, r4
 8007820:	f000 f830 	bl	8007884 <_getpid_r>
 8007824:	462a      	mov	r2, r5
 8007826:	4601      	mov	r1, r0
 8007828:	4620      	mov	r0, r4
 800782a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800782e:	f000 b817 	b.w	8007860 <_kill_r>
 8007832:	2b01      	cmp	r3, #1
 8007834:	d00a      	beq.n	800784c <_raise_r+0x4c>
 8007836:	1c59      	adds	r1, r3, #1
 8007838:	d103      	bne.n	8007842 <_raise_r+0x42>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	2001      	movs	r0, #1
 8007840:	e7e7      	b.n	8007812 <_raise_r+0x12>
 8007842:	2400      	movs	r4, #0
 8007844:	4628      	mov	r0, r5
 8007846:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800784a:	4798      	blx	r3
 800784c:	2000      	movs	r0, #0
 800784e:	e7e0      	b.n	8007812 <_raise_r+0x12>

08007850 <raise>:
 8007850:	4b02      	ldr	r3, [pc, #8]	; (800785c <raise+0xc>)
 8007852:	4601      	mov	r1, r0
 8007854:	6818      	ldr	r0, [r3, #0]
 8007856:	f7ff bfd3 	b.w	8007800 <_raise_r>
 800785a:	bf00      	nop
 800785c:	20000014 	.word	0x20000014

08007860 <_kill_r>:
 8007860:	b538      	push	{r3, r4, r5, lr}
 8007862:	2300      	movs	r3, #0
 8007864:	4d06      	ldr	r5, [pc, #24]	; (8007880 <_kill_r+0x20>)
 8007866:	4604      	mov	r4, r0
 8007868:	4608      	mov	r0, r1
 800786a:	4611      	mov	r1, r2
 800786c:	602b      	str	r3, [r5, #0]
 800786e:	f7fa fa28 	bl	8001cc2 <_kill>
 8007872:	1c43      	adds	r3, r0, #1
 8007874:	d102      	bne.n	800787c <_kill_r+0x1c>
 8007876:	682b      	ldr	r3, [r5, #0]
 8007878:	b103      	cbz	r3, 800787c <_kill_r+0x1c>
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	bd38      	pop	{r3, r4, r5, pc}
 800787e:	bf00      	nop
 8007880:	20000330 	.word	0x20000330

08007884 <_getpid_r>:
 8007884:	f7fa ba16 	b.w	8001cb4 <_getpid>

08007888 <__sread>:
 8007888:	b510      	push	{r4, lr}
 800788a:	460c      	mov	r4, r1
 800788c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007890:	f000 f894 	bl	80079bc <_read_r>
 8007894:	2800      	cmp	r0, #0
 8007896:	bfab      	itete	ge
 8007898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800789a:	89a3      	ldrhlt	r3, [r4, #12]
 800789c:	181b      	addge	r3, r3, r0
 800789e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078a2:	bfac      	ite	ge
 80078a4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078a6:	81a3      	strhlt	r3, [r4, #12]
 80078a8:	bd10      	pop	{r4, pc}

080078aa <__swrite>:
 80078aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ae:	461f      	mov	r7, r3
 80078b0:	898b      	ldrh	r3, [r1, #12]
 80078b2:	4605      	mov	r5, r0
 80078b4:	05db      	lsls	r3, r3, #23
 80078b6:	460c      	mov	r4, r1
 80078b8:	4616      	mov	r6, r2
 80078ba:	d505      	bpl.n	80078c8 <__swrite+0x1e>
 80078bc:	2302      	movs	r3, #2
 80078be:	2200      	movs	r2, #0
 80078c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c4:	f000 f868 	bl	8007998 <_lseek_r>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	4632      	mov	r2, r6
 80078cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078d0:	81a3      	strh	r3, [r4, #12]
 80078d2:	4628      	mov	r0, r5
 80078d4:	463b      	mov	r3, r7
 80078d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078de:	f000 b817 	b.w	8007910 <_write_r>

080078e2 <__sseek>:
 80078e2:	b510      	push	{r4, lr}
 80078e4:	460c      	mov	r4, r1
 80078e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078ea:	f000 f855 	bl	8007998 <_lseek_r>
 80078ee:	1c43      	adds	r3, r0, #1
 80078f0:	89a3      	ldrh	r3, [r4, #12]
 80078f2:	bf15      	itete	ne
 80078f4:	6560      	strne	r0, [r4, #84]	; 0x54
 80078f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80078fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80078fe:	81a3      	strheq	r3, [r4, #12]
 8007900:	bf18      	it	ne
 8007902:	81a3      	strhne	r3, [r4, #12]
 8007904:	bd10      	pop	{r4, pc}

08007906 <__sclose>:
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 b813 	b.w	8007934 <_close_r>
	...

08007910 <_write_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	4611      	mov	r1, r2
 8007918:	2200      	movs	r2, #0
 800791a:	4d05      	ldr	r5, [pc, #20]	; (8007930 <_write_r+0x20>)
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7fa fa06 	bl	8001d30 <_write>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_write_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_write_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	20000330 	.word	0x20000330

08007934 <_close_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	2300      	movs	r3, #0
 8007938:	4d05      	ldr	r5, [pc, #20]	; (8007950 <_close_r+0x1c>)
 800793a:	4604      	mov	r4, r0
 800793c:	4608      	mov	r0, r1
 800793e:	602b      	str	r3, [r5, #0]
 8007940:	f7fa fa12 	bl	8001d68 <_close>
 8007944:	1c43      	adds	r3, r0, #1
 8007946:	d102      	bne.n	800794e <_close_r+0x1a>
 8007948:	682b      	ldr	r3, [r5, #0]
 800794a:	b103      	cbz	r3, 800794e <_close_r+0x1a>
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	bd38      	pop	{r3, r4, r5, pc}
 8007950:	20000330 	.word	0x20000330

08007954 <_fstat_r>:
 8007954:	b538      	push	{r3, r4, r5, lr}
 8007956:	2300      	movs	r3, #0
 8007958:	4d06      	ldr	r5, [pc, #24]	; (8007974 <_fstat_r+0x20>)
 800795a:	4604      	mov	r4, r0
 800795c:	4608      	mov	r0, r1
 800795e:	4611      	mov	r1, r2
 8007960:	602b      	str	r3, [r5, #0]
 8007962:	f7fa fa0c 	bl	8001d7e <_fstat>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	d102      	bne.n	8007970 <_fstat_r+0x1c>
 800796a:	682b      	ldr	r3, [r5, #0]
 800796c:	b103      	cbz	r3, 8007970 <_fstat_r+0x1c>
 800796e:	6023      	str	r3, [r4, #0]
 8007970:	bd38      	pop	{r3, r4, r5, pc}
 8007972:	bf00      	nop
 8007974:	20000330 	.word	0x20000330

08007978 <_isatty_r>:
 8007978:	b538      	push	{r3, r4, r5, lr}
 800797a:	2300      	movs	r3, #0
 800797c:	4d05      	ldr	r5, [pc, #20]	; (8007994 <_isatty_r+0x1c>)
 800797e:	4604      	mov	r4, r0
 8007980:	4608      	mov	r0, r1
 8007982:	602b      	str	r3, [r5, #0]
 8007984:	f7fa fa0a 	bl	8001d9c <_isatty>
 8007988:	1c43      	adds	r3, r0, #1
 800798a:	d102      	bne.n	8007992 <_isatty_r+0x1a>
 800798c:	682b      	ldr	r3, [r5, #0]
 800798e:	b103      	cbz	r3, 8007992 <_isatty_r+0x1a>
 8007990:	6023      	str	r3, [r4, #0]
 8007992:	bd38      	pop	{r3, r4, r5, pc}
 8007994:	20000330 	.word	0x20000330

08007998 <_lseek_r>:
 8007998:	b538      	push	{r3, r4, r5, lr}
 800799a:	4604      	mov	r4, r0
 800799c:	4608      	mov	r0, r1
 800799e:	4611      	mov	r1, r2
 80079a0:	2200      	movs	r2, #0
 80079a2:	4d05      	ldr	r5, [pc, #20]	; (80079b8 <_lseek_r+0x20>)
 80079a4:	602a      	str	r2, [r5, #0]
 80079a6:	461a      	mov	r2, r3
 80079a8:	f7fa fa02 	bl	8001db0 <_lseek>
 80079ac:	1c43      	adds	r3, r0, #1
 80079ae:	d102      	bne.n	80079b6 <_lseek_r+0x1e>
 80079b0:	682b      	ldr	r3, [r5, #0]
 80079b2:	b103      	cbz	r3, 80079b6 <_lseek_r+0x1e>
 80079b4:	6023      	str	r3, [r4, #0]
 80079b6:	bd38      	pop	{r3, r4, r5, pc}
 80079b8:	20000330 	.word	0x20000330

080079bc <_read_r>:
 80079bc:	b538      	push	{r3, r4, r5, lr}
 80079be:	4604      	mov	r4, r0
 80079c0:	4608      	mov	r0, r1
 80079c2:	4611      	mov	r1, r2
 80079c4:	2200      	movs	r2, #0
 80079c6:	4d05      	ldr	r5, [pc, #20]	; (80079dc <_read_r+0x20>)
 80079c8:	602a      	str	r2, [r5, #0]
 80079ca:	461a      	mov	r2, r3
 80079cc:	f7fa f993 	bl	8001cf6 <_read>
 80079d0:	1c43      	adds	r3, r0, #1
 80079d2:	d102      	bne.n	80079da <_read_r+0x1e>
 80079d4:	682b      	ldr	r3, [r5, #0]
 80079d6:	b103      	cbz	r3, 80079da <_read_r+0x1e>
 80079d8:	6023      	str	r3, [r4, #0]
 80079da:	bd38      	pop	{r3, r4, r5, pc}
 80079dc:	20000330 	.word	0x20000330

080079e0 <_init>:
 80079e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079e2:	bf00      	nop
 80079e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079e6:	bc08      	pop	{r3}
 80079e8:	469e      	mov	lr, r3
 80079ea:	4770      	bx	lr

080079ec <_fini>:
 80079ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ee:	bf00      	nop
 80079f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f2:	bc08      	pop	{r3}
 80079f4:	469e      	mov	lr, r3
 80079f6:	4770      	bx	lr
