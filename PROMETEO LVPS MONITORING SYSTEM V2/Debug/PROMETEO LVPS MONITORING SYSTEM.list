
PROMETEO LVPS MONITORING SYSTEM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08007810  08007810  00017810  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c6c  08007c6c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08007c6c  08007c6c  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007c6c  08007c6c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c6c  08007c6c  00017c6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c70  08007c70  00017c70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007c74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000154  200001e0  08007e54  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007e54  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af6b  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a52  00000000  00000000  0002b174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0002cbc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002d5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d38  00000000  00000000  0002df78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ca85  00000000  00000000  00045cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085eef  00000000  00000000  00052735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d8624  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bac  00000000  00000000  000d8674  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	080077f8 	.word	0x080077f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	080077f8 	.word	0x080077f8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_frsub>:
 8000c90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c94:	e002      	b.n	8000c9c <__addsf3>
 8000c96:	bf00      	nop

08000c98 <__aeabi_fsub>:
 8000c98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c9c <__addsf3>:
 8000c9c:	0042      	lsls	r2, r0, #1
 8000c9e:	bf1f      	itttt	ne
 8000ca0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ca4:	ea92 0f03 	teqne	r2, r3
 8000ca8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000cac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cb0:	d06a      	beq.n	8000d88 <__addsf3+0xec>
 8000cb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000cb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000cba:	bfc1      	itttt	gt
 8000cbc:	18d2      	addgt	r2, r2, r3
 8000cbe:	4041      	eorgt	r1, r0
 8000cc0:	4048      	eorgt	r0, r1
 8000cc2:	4041      	eorgt	r1, r0
 8000cc4:	bfb8      	it	lt
 8000cc6:	425b      	neglt	r3, r3
 8000cc8:	2b19      	cmp	r3, #25
 8000cca:	bf88      	it	hi
 8000ccc:	4770      	bxhi	lr
 8000cce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000cd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000cda:	bf18      	it	ne
 8000cdc:	4240      	negne	r0, r0
 8000cde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ce2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ce6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cea:	bf18      	it	ne
 8000cec:	4249      	negne	r1, r1
 8000cee:	ea92 0f03 	teq	r2, r3
 8000cf2:	d03f      	beq.n	8000d74 <__addsf3+0xd8>
 8000cf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000cf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000cfc:	eb10 000c 	adds.w	r0, r0, ip
 8000d00:	f1c3 0320 	rsb	r3, r3, #32
 8000d04:	fa01 f103 	lsl.w	r1, r1, r3
 8000d08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__addsf3+0x78>
 8000d0e:	4249      	negs	r1, r1
 8000d10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000d14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000d18:	d313      	bcc.n	8000d42 <__addsf3+0xa6>
 8000d1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d1e:	d306      	bcc.n	8000d2e <__addsf3+0x92>
 8000d20:	0840      	lsrs	r0, r0, #1
 8000d22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000d26:	f102 0201 	add.w	r2, r2, #1
 8000d2a:	2afe      	cmp	r2, #254	; 0xfe
 8000d2c:	d251      	bcs.n	8000dd2 <__addsf3+0x136>
 8000d2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000d32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d36:	bf08      	it	eq
 8000d38:	f020 0001 	biceq.w	r0, r0, #1
 8000d3c:	ea40 0003 	orr.w	r0, r0, r3
 8000d40:	4770      	bx	lr
 8000d42:	0049      	lsls	r1, r1, #1
 8000d44:	eb40 0000 	adc.w	r0, r0, r0
 8000d48:	3a01      	subs	r2, #1
 8000d4a:	bf28      	it	cs
 8000d4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d50:	d2ed      	bcs.n	8000d2e <__addsf3+0x92>
 8000d52:	fab0 fc80 	clz	ip, r0
 8000d56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000d5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d62:	bfaa      	itet	ge
 8000d64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d68:	4252      	neglt	r2, r2
 8000d6a:	4318      	orrge	r0, r3
 8000d6c:	bfbc      	itt	lt
 8000d6e:	40d0      	lsrlt	r0, r2
 8000d70:	4318      	orrlt	r0, r3
 8000d72:	4770      	bx	lr
 8000d74:	f092 0f00 	teq	r2, #0
 8000d78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d7c:	bf06      	itte	eq
 8000d7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d82:	3201      	addeq	r2, #1
 8000d84:	3b01      	subne	r3, #1
 8000d86:	e7b5      	b.n	8000cf4 <__addsf3+0x58>
 8000d88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d90:	bf18      	it	ne
 8000d92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d96:	d021      	beq.n	8000ddc <__addsf3+0x140>
 8000d98:	ea92 0f03 	teq	r2, r3
 8000d9c:	d004      	beq.n	8000da8 <__addsf3+0x10c>
 8000d9e:	f092 0f00 	teq	r2, #0
 8000da2:	bf08      	it	eq
 8000da4:	4608      	moveq	r0, r1
 8000da6:	4770      	bx	lr
 8000da8:	ea90 0f01 	teq	r0, r1
 8000dac:	bf1c      	itt	ne
 8000dae:	2000      	movne	r0, #0
 8000db0:	4770      	bxne	lr
 8000db2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000db6:	d104      	bne.n	8000dc2 <__addsf3+0x126>
 8000db8:	0040      	lsls	r0, r0, #1
 8000dba:	bf28      	it	cs
 8000dbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000dc6:	bf3c      	itt	cc
 8000dc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000dcc:	4770      	bxcc	lr
 8000dce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000dd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	4770      	bx	lr
 8000ddc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000de0:	bf16      	itet	ne
 8000de2:	4608      	movne	r0, r1
 8000de4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000de8:	4601      	movne	r1, r0
 8000dea:	0242      	lsls	r2, r0, #9
 8000dec:	bf06      	itte	eq
 8000dee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000df2:	ea90 0f01 	teqeq	r0, r1
 8000df6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dfa:	4770      	bx	lr

08000dfc <__aeabi_ui2f>:
 8000dfc:	f04f 0300 	mov.w	r3, #0
 8000e00:	e004      	b.n	8000e0c <__aeabi_i2f+0x8>
 8000e02:	bf00      	nop

08000e04 <__aeabi_i2f>:
 8000e04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000e08:	bf48      	it	mi
 8000e0a:	4240      	negmi	r0, r0
 8000e0c:	ea5f 0c00 	movs.w	ip, r0
 8000e10:	bf08      	it	eq
 8000e12:	4770      	bxeq	lr
 8000e14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000e18:	4601      	mov	r1, r0
 8000e1a:	f04f 0000 	mov.w	r0, #0
 8000e1e:	e01c      	b.n	8000e5a <__aeabi_l2f+0x2a>

08000e20 <__aeabi_ul2f>:
 8000e20:	ea50 0201 	orrs.w	r2, r0, r1
 8000e24:	bf08      	it	eq
 8000e26:	4770      	bxeq	lr
 8000e28:	f04f 0300 	mov.w	r3, #0
 8000e2c:	e00a      	b.n	8000e44 <__aeabi_l2f+0x14>
 8000e2e:	bf00      	nop

08000e30 <__aeabi_l2f>:
 8000e30:	ea50 0201 	orrs.w	r2, r0, r1
 8000e34:	bf08      	it	eq
 8000e36:	4770      	bxeq	lr
 8000e38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e3c:	d502      	bpl.n	8000e44 <__aeabi_l2f+0x14>
 8000e3e:	4240      	negs	r0, r0
 8000e40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e44:	ea5f 0c01 	movs.w	ip, r1
 8000e48:	bf02      	ittt	eq
 8000e4a:	4684      	moveq	ip, r0
 8000e4c:	4601      	moveq	r1, r0
 8000e4e:	2000      	moveq	r0, #0
 8000e50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e54:	bf08      	it	eq
 8000e56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e5e:	fabc f28c 	clz	r2, ip
 8000e62:	3a08      	subs	r2, #8
 8000e64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e68:	db10      	blt.n	8000e8c <__aeabi_l2f+0x5c>
 8000e6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e6e:	4463      	add	r3, ip
 8000e70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e74:	f1c2 0220 	rsb	r2, r2, #32
 8000e78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000e80:	eb43 0002 	adc.w	r0, r3, r2
 8000e84:	bf08      	it	eq
 8000e86:	f020 0001 	biceq.w	r0, r0, #1
 8000e8a:	4770      	bx	lr
 8000e8c:	f102 0220 	add.w	r2, r2, #32
 8000e90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e94:	f1c2 0220 	rsb	r2, r2, #32
 8000e98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000ea0:	eb43 0002 	adc.w	r0, r3, r2
 8000ea4:	bf08      	it	eq
 8000ea6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000eaa:	4770      	bx	lr

08000eac <NEXTION_SendString>:

uint8_t Cmd_End[3] = {0xFF,0xFF,0xFF};  // command end sequence for Nextion
uint8_t Rx_Data[5]; //data from display

void NEXTION_SendString (char *ID, float string)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af02      	add	r7, sp, #8
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	6039      	str	r1, [r7, #0]
	char buf[20];
	int len = sprintf (buf, "%s.txt=\"%.2f\"", ID, string);
 8000eb6:	6838      	ldr	r0, [r7, #0]
 8000eb8:	f7ff fb6a 	bl	8000590 <__aeabi_f2d>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	f107 0008 	add.w	r0, r7, #8
 8000ec4:	e9cd 2300 	strd	r2, r3, [sp]
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	490b      	ldr	r1, [pc, #44]	; (8000ef8 <NEXTION_SendString+0x4c>)
 8000ecc:	f004 fa1a 	bl	8005304 <siprintf>
 8000ed0:	61f8      	str	r0, [r7, #28]
	HAL_UART_Transmit(&huart2, (uint8_t *)buf, len, 200);
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	b29a      	uxth	r2, r3
 8000ed6:	f107 0108 	add.w	r1, r7, #8
 8000eda:	23c8      	movs	r3, #200	; 0xc8
 8000edc:	4807      	ldr	r0, [pc, #28]	; (8000efc <NEXTION_SendString+0x50>)
 8000ede:	f002 ff57 	bl	8003d90 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, Cmd_End, 3, 100);
 8000ee2:	2364      	movs	r3, #100	; 0x64
 8000ee4:	2203      	movs	r2, #3
 8000ee6:	4906      	ldr	r1, [pc, #24]	; (8000f00 <NEXTION_SendString+0x54>)
 8000ee8:	4804      	ldr	r0, [pc, #16]	; (8000efc <NEXTION_SendString+0x50>)
 8000eea:	f002 ff51 	bl	8003d90 <HAL_UART_Transmit>
}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	08007810 	.word	0x08007810
 8000efc:	200002a4 	.word	0x200002a4
 8000f00:	20000000 	.word	0x20000000
 8000f04:	00000000 	.word	0x00000000

08000f08 <ADS1115>:
int16_t reading;
float voltage[4];
float current[4];
const float voltageConv = 6.114 / 32768.0;

void ADS1115(int ADS1115_ADDRESS){
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af02      	add	r7, sp, #8
 8000f0e:	6078      	str	r0, [r7, #4]

	for(int i=0; i< 4; i++){
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
 8000f14:	e092      	b.n	800103c <ADS1115+0x134>
				ADSwrite[0] = 0x01;
 8000f16:	4b9c      	ldr	r3, [pc, #624]	; (8001188 <ADS1115+0x280>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	701a      	strb	r2, [r3, #0]

				switch(i){
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	2b03      	cmp	r3, #3
 8000f20:	d81a      	bhi.n	8000f58 <ADS1115+0x50>
 8000f22:	a201      	add	r2, pc, #4	; (adr r2, 8000f28 <ADS1115+0x20>)
 8000f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f28:	08000f39 	.word	0x08000f39
 8000f2c:	08000f41 	.word	0x08000f41
 8000f30:	08000f49 	.word	0x08000f49
 8000f34:	08000f51 	.word	0x08000f51
					case(0):
						ADSwrite[1] = 0xC1; //11000001
 8000f38:	4b93      	ldr	r3, [pc, #588]	; (8001188 <ADS1115+0x280>)
 8000f3a:	22c1      	movs	r2, #193	; 0xc1
 8000f3c:	705a      	strb	r2, [r3, #1]
					break;
 8000f3e:	e00b      	b.n	8000f58 <ADS1115+0x50>
					case(1):
						ADSwrite[1] = 0xD1; //11010001
 8000f40:	4b91      	ldr	r3, [pc, #580]	; (8001188 <ADS1115+0x280>)
 8000f42:	22d1      	movs	r2, #209	; 0xd1
 8000f44:	705a      	strb	r2, [r3, #1]
					break;
 8000f46:	e007      	b.n	8000f58 <ADS1115+0x50>
					case(2):
						ADSwrite[1] = 0xE1;
 8000f48:	4b8f      	ldr	r3, [pc, #572]	; (8001188 <ADS1115+0x280>)
 8000f4a:	22e1      	movs	r2, #225	; 0xe1
 8000f4c:	705a      	strb	r2, [r3, #1]
					break;
 8000f4e:	e003      	b.n	8000f58 <ADS1115+0x50>
					case(3):
						ADSwrite[1] = 0xF1;
 8000f50:	4b8d      	ldr	r3, [pc, #564]	; (8001188 <ADS1115+0x280>)
 8000f52:	22f1      	movs	r2, #241	; 0xf1
 8000f54:	705a      	strb	r2, [r3, #1]
					break;
 8000f56:	bf00      	nop
				}

				ADSwrite[2] = 0x83; //10000011 LSB
 8000f58:	4b8b      	ldr	r3, [pc, #556]	; (8001188 <ADS1115+0x280>)
 8000f5a:	2283      	movs	r2, #131	; 0x83
 8000f5c:	709a      	strb	r2, [r3, #2]

				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1, ADSwrite, 3, 100);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	b299      	uxth	r1, r3
 8000f66:	2364      	movs	r3, #100	; 0x64
 8000f68:	9300      	str	r3, [sp, #0]
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	4a86      	ldr	r2, [pc, #536]	; (8001188 <ADS1115+0x280>)
 8000f6e:	4887      	ldr	r0, [pc, #540]	; (800118c <ADS1115+0x284>)
 8000f70:	f001 fbbe 	bl	80026f0 <HAL_I2C_Master_Transmit>
				ADSwrite[0] = 0x00;
 8000f74:	4b84      	ldr	r3, [pc, #528]	; (8001188 <ADS1115+0x280>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	701a      	strb	r2, [r3, #0]
				HAL_I2C_Master_Transmit(&hi2c1, ADS1115_ADDRESS << 1 , ADSwrite, 1 ,100);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	b29b      	uxth	r3, r3
 8000f7e:	005b      	lsls	r3, r3, #1
 8000f80:	b299      	uxth	r1, r3
 8000f82:	2364      	movs	r3, #100	; 0x64
 8000f84:	9300      	str	r3, [sp, #0]
 8000f86:	2301      	movs	r3, #1
 8000f88:	4a7f      	ldr	r2, [pc, #508]	; (8001188 <ADS1115+0x280>)
 8000f8a:	4880      	ldr	r0, [pc, #512]	; (800118c <ADS1115+0x284>)
 8000f8c:	f001 fbb0 	bl	80026f0 <HAL_I2C_Master_Transmit>
				HAL_Delay(20);
 8000f90:	2014      	movs	r0, #20
 8000f92:	f000 fee9 	bl	8001d68 <HAL_Delay>

				HAL_I2C_Master_Receive(&hi2c1, ADS1115_ADDRESS <<1, ADSwrite, 2, 100);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	b29b      	uxth	r3, r3
 8000f9a:	005b      	lsls	r3, r3, #1
 8000f9c:	b299      	uxth	r1, r3
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	4a78      	ldr	r2, [pc, #480]	; (8001188 <ADS1115+0x280>)
 8000fa6:	4879      	ldr	r0, [pc, #484]	; (800118c <ADS1115+0x284>)
 8000fa8:	f001 fca0 	bl	80028ec <HAL_I2C_Master_Receive>
				reading = (ADSwrite[0] << 8 | ADSwrite[1] );
 8000fac:	4b76      	ldr	r3, [pc, #472]	; (8001188 <ADS1115+0x280>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	021b      	lsls	r3, r3, #8
 8000fb2:	b21a      	sxth	r2, r3
 8000fb4:	4b74      	ldr	r3, [pc, #464]	; (8001188 <ADS1115+0x280>)
 8000fb6:	785b      	ldrb	r3, [r3, #1]
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21a      	sxth	r2, r3
 8000fbe:	4b74      	ldr	r3, [pc, #464]	; (8001190 <ADS1115+0x288>)
 8000fc0:	801a      	strh	r2, [r3, #0]
				if(reading < 0) {
 8000fc2:	4b73      	ldr	r3, [pc, #460]	; (8001190 <ADS1115+0x288>)
 8000fc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	da02      	bge.n	8000fd2 <ADS1115+0xca>
					reading = 0;
 8000fcc:	4b70      	ldr	r3, [pc, #448]	; (8001190 <ADS1115+0x288>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	801a      	strh	r2, [r3, #0]
				}
				voltage[i] = reading * voltageConv;
 8000fd2:	4b6f      	ldr	r3, [pc, #444]	; (8001190 <ADS1115+0x288>)
 8000fd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f7ff ff13 	bl	8000e04 <__aeabi_i2f>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a6c      	ldr	r2, [pc, #432]	; (8001194 <ADS1115+0x28c>)
 8000fe2:	4611      	mov	r1, r2
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff f8bb 	bl	8000160 <__aeabi_fmul>
 8000fea:	4603      	mov	r3, r0
 8000fec:	4619      	mov	r1, r3
 8000fee:	4a6a      	ldr	r2, [pc, #424]	; (8001198 <ADS1115+0x290>)
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				current[i]=(voltage[i]-2.43)/0.185;
 8000ff6:	4a68      	ldr	r2, [pc, #416]	; (8001198 <ADS1115+0x290>)
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fac6 	bl	8000590 <__aeabi_f2d>
 8001004:	a35a      	add	r3, pc, #360	; (adr r3, 8001170 <ADS1115+0x268>)
 8001006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800100a:	f7ff f961 	bl	80002d0 <__aeabi_dsub>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	a358      	add	r3, pc, #352	; (adr r3, 8001178 <ADS1115+0x270>)
 8001018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101c:	f7ff fc3a 	bl	8000894 <__aeabi_ddiv>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fde2 	bl	8000bf0 <__aeabi_d2f>
 800102c:	4602      	mov	r2, r0
 800102e:	495b      	ldr	r1, [pc, #364]	; (800119c <ADS1115+0x294>)
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i=0; i< 4; i++){
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	3301      	adds	r3, #1
 800103a:	617b      	str	r3, [r7, #20]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b03      	cmp	r3, #3
 8001040:	f77f af69 	ble.w	8000f16 <ADS1115+0xe>
			}
	if(ADS1115_ADDRESS == 0x48){
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b48      	cmp	r3, #72	; 0x48
 8001048:	d161      	bne.n	800110e <ADS1115+0x206>
		if(current[0]<=0.2 && current[1]<=0.2 && current[2]<=0.2  && current[3]<= 0.2 ){
 800104a:	4b54      	ldr	r3, [pc, #336]	; (800119c <ADS1115+0x294>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4618      	mov	r0, r3
 8001050:	f7ff fa9e 	bl	8000590 <__aeabi_f2d>
 8001054:	a34a      	add	r3, pc, #296	; (adr r3, 8001180 <ADS1115+0x278>)
 8001056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800105a:	f7ff fd6d 	bl	8000b38 <__aeabi_dcmple>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d035      	beq.n	80010d0 <ADS1115+0x1c8>
 8001064:	4b4d      	ldr	r3, [pc, #308]	; (800119c <ADS1115+0x294>)
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa91 	bl	8000590 <__aeabi_f2d>
 800106e:	a344      	add	r3, pc, #272	; (adr r3, 8001180 <ADS1115+0x278>)
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	f7ff fd60 	bl	8000b38 <__aeabi_dcmple>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d028      	beq.n	80010d0 <ADS1115+0x1c8>
 800107e:	4b47      	ldr	r3, [pc, #284]	; (800119c <ADS1115+0x294>)
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	4618      	mov	r0, r3
 8001084:	f7ff fa84 	bl	8000590 <__aeabi_f2d>
 8001088:	a33d      	add	r3, pc, #244	; (adr r3, 8001180 <ADS1115+0x278>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff fd53 	bl	8000b38 <__aeabi_dcmple>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d01b      	beq.n	80010d0 <ADS1115+0x1c8>
 8001098:	4b40      	ldr	r3, [pc, #256]	; (800119c <ADS1115+0x294>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fa77 	bl	8000590 <__aeabi_f2d>
 80010a2:	a337      	add	r3, pc, #220	; (adr r3, 8001180 <ADS1115+0x278>)
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f7ff fd46 	bl	8000b38 <__aeabi_dcmple>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00e      	beq.n	80010d0 <ADS1115+0x1c8>
			for(int i = 0; i<4; i++){
 80010b2:	2300      	movs	r3, #0
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	e008      	b.n	80010ca <ADS1115+0x1c2>
				current[i]=0;
 80010b8:	4a38      	ldr	r2, [pc, #224]	; (800119c <ADS1115+0x294>)
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	f04f 0100 	mov.w	r1, #0
 80010c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i<4; i++){
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	3301      	adds	r3, #1
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	2b03      	cmp	r3, #3
 80010ce:	ddf3      	ble.n	80010b8 <ADS1115+0x1b0>
			}

		}
		NEXTION_SendString("t4", current[0]);
 80010d0:	4b32      	ldr	r3, [pc, #200]	; (800119c <ADS1115+0x294>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	4832      	ldr	r0, [pc, #200]	; (80011a0 <ADS1115+0x298>)
 80010d8:	f7ff fee8 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t16", current[1]);
 80010dc:	4b2f      	ldr	r3, [pc, #188]	; (800119c <ADS1115+0x294>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	4619      	mov	r1, r3
 80010e2:	4830      	ldr	r0, [pc, #192]	; (80011a4 <ADS1115+0x29c>)
 80010e4:	f7ff fee2 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t5", current[1]);
 80010e8:	4b2c      	ldr	r3, [pc, #176]	; (800119c <ADS1115+0x294>)
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	4619      	mov	r1, r3
 80010ee:	482e      	ldr	r0, [pc, #184]	; (80011a8 <ADS1115+0x2a0>)
 80010f0:	f7ff fedc 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t6", current[2]);
 80010f4:	4b29      	ldr	r3, [pc, #164]	; (800119c <ADS1115+0x294>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	4619      	mov	r1, r3
 80010fa:	482c      	ldr	r0, [pc, #176]	; (80011ac <ADS1115+0x2a4>)
 80010fc:	f7ff fed6 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t7", current[3]);
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <ADS1115+0x294>)
 8001102:	68db      	ldr	r3, [r3, #12]
 8001104:	4619      	mov	r1, r3
 8001106:	482a      	ldr	r0, [pc, #168]	; (80011b0 <ADS1115+0x2a8>)
 8001108:	f7ff fed0 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t12", current[0]);
		NEXTION_SendString("t13", current[1]);
		NEXTION_SendString("t14", current[2]);
		NEXTION_SendString("t15", current[3]);
	}
}
 800110c:	e0ea      	b.n	80012e4 <ADS1115+0x3dc>
	} else if (ADS1115_ADDRESS == 0x49){
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	2b49      	cmp	r3, #73	; 0x49
 8001112:	d159      	bne.n	80011c8 <ADS1115+0x2c0>
		NEXTION_SendString("t0", voltage[0]*3.0);
 8001114:	4b20      	ldr	r3, [pc, #128]	; (8001198 <ADS1115+0x290>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4926      	ldr	r1, [pc, #152]	; (80011b4 <ADS1115+0x2ac>)
 800111a:	4618      	mov	r0, r3
 800111c:	f7ff f820 	bl	8000160 <__aeabi_fmul>
 8001120:	4603      	mov	r3, r0
 8001122:	4619      	mov	r1, r3
 8001124:	4824      	ldr	r0, [pc, #144]	; (80011b8 <ADS1115+0x2b0>)
 8001126:	f7ff fec1 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t1", voltage[1]*3.0);
 800112a:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <ADS1115+0x290>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	4921      	ldr	r1, [pc, #132]	; (80011b4 <ADS1115+0x2ac>)
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff f815 	bl	8000160 <__aeabi_fmul>
 8001136:	4603      	mov	r3, r0
 8001138:	4619      	mov	r1, r3
 800113a:	4820      	ldr	r0, [pc, #128]	; (80011bc <ADS1115+0x2b4>)
 800113c:	f7ff feb6 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t2", voltage[2]*3.0);
 8001140:	4b15      	ldr	r3, [pc, #84]	; (8001198 <ADS1115+0x290>)
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	491b      	ldr	r1, [pc, #108]	; (80011b4 <ADS1115+0x2ac>)
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff f80a 	bl	8000160 <__aeabi_fmul>
 800114c:	4603      	mov	r3, r0
 800114e:	4619      	mov	r1, r3
 8001150:	481b      	ldr	r0, [pc, #108]	; (80011c0 <ADS1115+0x2b8>)
 8001152:	f7ff feab 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t3", voltage[3]*3.0);
 8001156:	4b10      	ldr	r3, [pc, #64]	; (8001198 <ADS1115+0x290>)
 8001158:	68db      	ldr	r3, [r3, #12]
 800115a:	4916      	ldr	r1, [pc, #88]	; (80011b4 <ADS1115+0x2ac>)
 800115c:	4618      	mov	r0, r3
 800115e:	f7fe ffff 	bl	8000160 <__aeabi_fmul>
 8001162:	4603      	mov	r3, r0
 8001164:	4619      	mov	r1, r3
 8001166:	4817      	ldr	r0, [pc, #92]	; (80011c4 <ADS1115+0x2bc>)
 8001168:	f7ff fea0 	bl	8000eac <NEXTION_SendString>
}
 800116c:	e0ba      	b.n	80012e4 <ADS1115+0x3dc>
 800116e:	bf00      	nop
 8001170:	d70a3d71 	.word	0xd70a3d71
 8001174:	400370a3 	.word	0x400370a3
 8001178:	7ae147ae 	.word	0x7ae147ae
 800117c:	3fc7ae14 	.word	0x3fc7ae14
 8001180:	9999999a 	.word	0x9999999a
 8001184:	3fc99999 	.word	0x3fc99999
 8001188:	200002f4 	.word	0x200002f4
 800118c:	200001fc 	.word	0x200001fc
 8001190:	200002fa 	.word	0x200002fa
 8001194:	3943a5e3 	.word	0x3943a5e3
 8001198:	200002fc 	.word	0x200002fc
 800119c:	2000030c 	.word	0x2000030c
 80011a0:	08007820 	.word	0x08007820
 80011a4:	08007824 	.word	0x08007824
 80011a8:	08007828 	.word	0x08007828
 80011ac:	0800782c 	.word	0x0800782c
 80011b0:	08007830 	.word	0x08007830
 80011b4:	40400000 	.word	0x40400000
 80011b8:	08007834 	.word	0x08007834
 80011bc:	08007838 	.word	0x08007838
 80011c0:	0800783c 	.word	0x0800783c
 80011c4:	08007840 	.word	0x08007840
	}else if (ADS1115_ADDRESS == 0x4A){
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2b4a      	cmp	r3, #74	; 0x4a
 80011cc:	d12c      	bne.n	8001228 <ADS1115+0x320>
		NEXTION_SendString("t8", voltage[0]*3.0);
 80011ce:	4b4a      	ldr	r3, [pc, #296]	; (80012f8 <ADS1115+0x3f0>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	494a      	ldr	r1, [pc, #296]	; (80012fc <ADS1115+0x3f4>)
 80011d4:	4618      	mov	r0, r3
 80011d6:	f7fe ffc3 	bl	8000160 <__aeabi_fmul>
 80011da:	4603      	mov	r3, r0
 80011dc:	4619      	mov	r1, r3
 80011de:	4848      	ldr	r0, [pc, #288]	; (8001300 <ADS1115+0x3f8>)
 80011e0:	f7ff fe64 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t9", voltage[1]*3.0);
 80011e4:	4b44      	ldr	r3, [pc, #272]	; (80012f8 <ADS1115+0x3f0>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	4944      	ldr	r1, [pc, #272]	; (80012fc <ADS1115+0x3f4>)
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7fe ffb8 	bl	8000160 <__aeabi_fmul>
 80011f0:	4603      	mov	r3, r0
 80011f2:	4619      	mov	r1, r3
 80011f4:	4843      	ldr	r0, [pc, #268]	; (8001304 <ADS1115+0x3fc>)
 80011f6:	f7ff fe59 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t10", voltage[2]*3.0);
 80011fa:	4b3f      	ldr	r3, [pc, #252]	; (80012f8 <ADS1115+0x3f0>)
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	493f      	ldr	r1, [pc, #252]	; (80012fc <ADS1115+0x3f4>)
 8001200:	4618      	mov	r0, r3
 8001202:	f7fe ffad 	bl	8000160 <__aeabi_fmul>
 8001206:	4603      	mov	r3, r0
 8001208:	4619      	mov	r1, r3
 800120a:	483f      	ldr	r0, [pc, #252]	; (8001308 <ADS1115+0x400>)
 800120c:	f7ff fe4e 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t11", voltage[3]*3.0);
 8001210:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <ADS1115+0x3f0>)
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	4939      	ldr	r1, [pc, #228]	; (80012fc <ADS1115+0x3f4>)
 8001216:	4618      	mov	r0, r3
 8001218:	f7fe ffa2 	bl	8000160 <__aeabi_fmul>
 800121c:	4603      	mov	r3, r0
 800121e:	4619      	mov	r1, r3
 8001220:	483a      	ldr	r0, [pc, #232]	; (800130c <ADS1115+0x404>)
 8001222:	f7ff fe43 	bl	8000eac <NEXTION_SendString>
}
 8001226:	e05d      	b.n	80012e4 <ADS1115+0x3dc>
	}else if(ADS1115_ADDRESS == 0x4B){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b4b      	cmp	r3, #75	; 0x4b
 800122c:	d15a      	bne.n	80012e4 <ADS1115+0x3dc>
		if(current[0]<=0.2 && current[1]<=0.2 && current[2]<=0.2  && current[3]<= 0.2 ){
 800122e:	4b38      	ldr	r3, [pc, #224]	; (8001310 <ADS1115+0x408>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff f9ac 	bl	8000590 <__aeabi_f2d>
 8001238:	a32d      	add	r3, pc, #180	; (adr r3, 80012f0 <ADS1115+0x3e8>)
 800123a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800123e:	f7ff fc7b 	bl	8000b38 <__aeabi_dcmple>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d035      	beq.n	80012b4 <ADS1115+0x3ac>
 8001248:	4b31      	ldr	r3, [pc, #196]	; (8001310 <ADS1115+0x408>)
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f99f 	bl	8000590 <__aeabi_f2d>
 8001252:	a327      	add	r3, pc, #156	; (adr r3, 80012f0 <ADS1115+0x3e8>)
 8001254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001258:	f7ff fc6e 	bl	8000b38 <__aeabi_dcmple>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d028      	beq.n	80012b4 <ADS1115+0x3ac>
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <ADS1115+0x408>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	4618      	mov	r0, r3
 8001268:	f7ff f992 	bl	8000590 <__aeabi_f2d>
 800126c:	a320      	add	r3, pc, #128	; (adr r3, 80012f0 <ADS1115+0x3e8>)
 800126e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001272:	f7ff fc61 	bl	8000b38 <__aeabi_dcmple>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d01b      	beq.n	80012b4 <ADS1115+0x3ac>
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <ADS1115+0x408>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff f985 	bl	8000590 <__aeabi_f2d>
 8001286:	a31a      	add	r3, pc, #104	; (adr r3, 80012f0 <ADS1115+0x3e8>)
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f7ff fc54 	bl	8000b38 <__aeabi_dcmple>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00e      	beq.n	80012b4 <ADS1115+0x3ac>
			for(int i = 0; i<4; i++){
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	e008      	b.n	80012ae <ADS1115+0x3a6>
				current[i]=0;
 800129c:	4a1c      	ldr	r2, [pc, #112]	; (8001310 <ADS1115+0x408>)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	f04f 0100 	mov.w	r1, #0
 80012a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(int i = 0; i<4; i++){
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	3301      	adds	r3, #1
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	2b03      	cmp	r3, #3
 80012b2:	ddf3      	ble.n	800129c <ADS1115+0x394>
		NEXTION_SendString("t12", current[0]);
 80012b4:	4b16      	ldr	r3, [pc, #88]	; (8001310 <ADS1115+0x408>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4619      	mov	r1, r3
 80012ba:	4816      	ldr	r0, [pc, #88]	; (8001314 <ADS1115+0x40c>)
 80012bc:	f7ff fdf6 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t13", current[1]);
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <ADS1115+0x408>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	4619      	mov	r1, r3
 80012c6:	4814      	ldr	r0, [pc, #80]	; (8001318 <ADS1115+0x410>)
 80012c8:	f7ff fdf0 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t14", current[2]);
 80012cc:	4b10      	ldr	r3, [pc, #64]	; (8001310 <ADS1115+0x408>)
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	4619      	mov	r1, r3
 80012d2:	4812      	ldr	r0, [pc, #72]	; (800131c <ADS1115+0x414>)
 80012d4:	f7ff fdea 	bl	8000eac <NEXTION_SendString>
		NEXTION_SendString("t15", current[3]);
 80012d8:	4b0d      	ldr	r3, [pc, #52]	; (8001310 <ADS1115+0x408>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	4619      	mov	r1, r3
 80012de:	4810      	ldr	r0, [pc, #64]	; (8001320 <ADS1115+0x418>)
 80012e0:	f7ff fde4 	bl	8000eac <NEXTION_SendString>
}
 80012e4:	bf00      	nop
 80012e6:	3718      	adds	r7, #24
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	f3af 8000 	nop.w
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fc99999 	.word	0x3fc99999
 80012f8:	200002fc 	.word	0x200002fc
 80012fc:	40400000 	.word	0x40400000
 8001300:	08007844 	.word	0x08007844
 8001304:	08007848 	.word	0x08007848
 8001308:	0800784c 	.word	0x0800784c
 800130c:	08007850 	.word	0x08007850
 8001310:	2000030c 	.word	0x2000030c
 8001314:	08007854 	.word	0x08007854
 8001318:	08007858 	.word	0x08007858
 800131c:	0800785c 	.word	0x0800785c
 8001320:	08007860 	.word	0x08007860

08001324 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
	  HAL_UART_Receive_IT(huart, Rx_Data, 2);
 800132c:	2202      	movs	r2, #2
 800132e:	4969      	ldr	r1, [pc, #420]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f002 fdb0 	bl	8003e96 <HAL_UART_Receive_IT>

	  if (Rx_Data[0] == 0x02) // if the dual state button is pressed
 8001336:	4b67      	ldr	r3, [pc, #412]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d115      	bne.n	800136a <HAL_UART_RxCpltCallback+0x46>
	  {
		  // Get the value
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 800133e:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001340:	785b      	ldrb	r3, [r3, #1]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d105      	bne.n	8001352 <HAL_UART_RxCpltCallback+0x2e>
 8001346:	2201      	movs	r2, #1
 8001348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800134c:	4862      	ldr	r0, [pc, #392]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 800134e:	f001 f873 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
 8001352:	4b60      	ldr	r3, [pc, #384]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001354:	785b      	ldrb	r3, [r3, #1]
 8001356:	2b01      	cmp	r3, #1
 8001358:	f040 80b7 	bne.w	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001362:	485d      	ldr	r0, [pc, #372]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001364:	f001 f868 	bl	8002438 <HAL_GPIO_WritePin>
		  // Get the value
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
	  }

}
 8001368:	e0af      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  } else if (Rx_Data[0] == 0x03) // if the dual state button is pressed
 800136a:	4b5a      	ldr	r3, [pc, #360]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b03      	cmp	r3, #3
 8001370:	d115      	bne.n	800139e <HAL_UART_RxCpltCallback+0x7a>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001372:	4b58      	ldr	r3, [pc, #352]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001374:	785b      	ldrb	r3, [r3, #1]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_UART_RxCpltCallback+0x62>
 800137a:	2201      	movs	r2, #1
 800137c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001380:	4855      	ldr	r0, [pc, #340]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001382:	f001 f859 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 0);
 8001386:	4b53      	ldr	r3, [pc, #332]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001388:	785b      	ldrb	r3, [r3, #1]
 800138a:	2b01      	cmp	r3, #1
 800138c:	f040 809d 	bne.w	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001396:	4850      	ldr	r0, [pc, #320]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 8001398:	f001 f84e 	bl	8002438 <HAL_GPIO_WritePin>
}
 800139c:	e095      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x04) // if the dual state button is pressed
 800139e:	4b4d      	ldr	r3, [pc, #308]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	d115      	bne.n	80013d2 <HAL_UART_RxCpltCallback+0xae>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80013a6:	4b4b      	ldr	r3, [pc, #300]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013a8:	785b      	ldrb	r3, [r3, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d105      	bne.n	80013ba <HAL_UART_RxCpltCallback+0x96>
 80013ae:	2201      	movs	r2, #1
 80013b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013b4:	4848      	ldr	r0, [pc, #288]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 80013b6:	f001 f83f 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 0);
 80013ba:	4b46      	ldr	r3, [pc, #280]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013bc:	785b      	ldrb	r3, [r3, #1]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	f040 8083 	bne.w	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 80013c4:	2200      	movs	r2, #0
 80013c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013ca:	4843      	ldr	r0, [pc, #268]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 80013cc:	f001 f834 	bl	8002438 <HAL_GPIO_WritePin>
}
 80013d0:	e07b      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x05) // if the dual state button is pressed
 80013d2:	4b40      	ldr	r3, [pc, #256]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013d4:	781b      	ldrb	r3, [r3, #0]
 80013d6:	2b05      	cmp	r3, #5
 80013d8:	d114      	bne.n	8001404 <HAL_UART_RxCpltCallback+0xe0>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 80013da:	4b3e      	ldr	r3, [pc, #248]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013dc:	785b      	ldrb	r3, [r3, #1]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d105      	bne.n	80013ee <HAL_UART_RxCpltCallback+0xca>
 80013e2:	2201      	movs	r2, #1
 80013e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013e8:	483b      	ldr	r0, [pc, #236]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 80013ea:	f001 f825 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 0);
 80013ee:	4b39      	ldr	r3, [pc, #228]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80013f0:	785b      	ldrb	r3, [r3, #1]
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d169      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 80013f6:	2200      	movs	r2, #0
 80013f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80013fc:	4836      	ldr	r0, [pc, #216]	; (80014d8 <HAL_UART_RxCpltCallback+0x1b4>)
 80013fe:	f001 f81b 	bl	8002438 <HAL_GPIO_WritePin>
}
 8001402:	e062      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x06) // if the dual state button is pressed
 8001404:	4b33      	ldr	r3, [pc, #204]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b06      	cmp	r3, #6
 800140a:	d114      	bne.n	8001436 <HAL_UART_RxCpltCallback+0x112>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800140e:	785b      	ldrb	r3, [r3, #1]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_UART_RxCpltCallback+0xfc>
 8001414:	2201      	movs	r2, #1
 8001416:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800141a:	4830      	ldr	r0, [pc, #192]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 800141c:	f001 f80c 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 0);
 8001420:	4b2c      	ldr	r3, [pc, #176]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001422:	785b      	ldrb	r3, [r3, #1]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d150      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800142e:	482b      	ldr	r0, [pc, #172]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 8001430:	f001 f802 	bl	8002438 <HAL_GPIO_WritePin>
}
 8001434:	e049      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x07) // if the dual state button is pressed
 8001436:	4b27      	ldr	r3, [pc, #156]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b07      	cmp	r3, #7
 800143c:	d114      	bne.n	8001468 <HAL_UART_RxCpltCallback+0x144>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 800143e:	4b25      	ldr	r3, [pc, #148]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001440:	785b      	ldrb	r3, [r3, #1]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d105      	bne.n	8001452 <HAL_UART_RxCpltCallback+0x12e>
 8001446:	2201      	movs	r2, #1
 8001448:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800144c:	4823      	ldr	r0, [pc, #140]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 800144e:	f000 fff3 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 0);
 8001452:	4b20      	ldr	r3, [pc, #128]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001454:	785b      	ldrb	r3, [r3, #1]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d137      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 800145a:	2200      	movs	r2, #0
 800145c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001460:	481e      	ldr	r0, [pc, #120]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 8001462:	f000 ffe9 	bl	8002438 <HAL_GPIO_WritePin>
}
 8001466:	e030      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x08) // if the dual state button is pressed
 8001468:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b08      	cmp	r3, #8
 800146e:	d114      	bne.n	800149a <HAL_UART_RxCpltCallback+0x176>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001472:	785b      	ldrb	r3, [r3, #1]
 8001474:	2b00      	cmp	r3, #0
 8001476:	d105      	bne.n	8001484 <HAL_UART_RxCpltCallback+0x160>
 8001478:	2201      	movs	r2, #1
 800147a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147e:	4817      	ldr	r0, [pc, #92]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 8001480:	f000 ffda 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 0);
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 8001486:	785b      	ldrb	r3, [r3, #1]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d11e      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 800148c:	2200      	movs	r2, #0
 800148e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001492:	4812      	ldr	r0, [pc, #72]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 8001494:	f000 ffd0 	bl	8002438 <HAL_GPIO_WritePin>
}
 8001498:	e017      	b.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
	  }else if (Rx_Data[0] == 0x09) // if the dual state button is pressed
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b09      	cmp	r3, #9
 80014a0:	d113      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
		  if (Rx_Data[1] == 0) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80014a4:	785b      	ldrb	r3, [r3, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d105      	bne.n	80014b6 <HAL_UART_RxCpltCallback+0x192>
 80014aa:	2201      	movs	r2, #1
 80014ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b0:	480a      	ldr	r0, [pc, #40]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 80014b2:	f000 ffc1 	bl	8002438 <HAL_GPIO_WritePin>
		  if (Rx_Data[1] == 1) HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 0);
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <HAL_UART_RxCpltCallback+0x1b0>)
 80014b8:	785b      	ldrb	r3, [r3, #1]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d105      	bne.n	80014ca <HAL_UART_RxCpltCallback+0x1a6>
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014c4:	4805      	ldr	r0, [pc, #20]	; (80014dc <HAL_UART_RxCpltCallback+0x1b8>)
 80014c6:	f000 ffb7 	bl	8002438 <HAL_GPIO_WritePin>
}
 80014ca:	bf00      	nop
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	200002ec 	.word	0x200002ec
 80014d8:	40010800 	.word	0x40010800
 80014dc:	40010c00 	.word	0x40010c00

080014e0 <main>:

int main(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e4:	f000 fbde 	bl	8001ca4 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80014e8:	f000 f85c 	bl	80015a4 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ec:	f000 f926 	bl	800173c <MX_GPIO_Init>
  MX_I2C1_Init();
 80014f0:	f000 f89e 	bl	8001630 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014f4:	f000 f8f8 	bl	80016e8 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80014f8:	f000 f8c8 	bl	800168c <MX_I2C2_Init>


  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 1);
 80014fc:	2201      	movs	r2, #1
 80014fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001502:	4824      	ldr	r0, [pc, #144]	; (8001594 <main+0xb4>)
 8001504:	f000 ff98 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 8001508:	2201      	movs	r2, #1
 800150a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800150e:	4821      	ldr	r0, [pc, #132]	; (8001594 <main+0xb4>)
 8001510:	f000 ff92 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 8001514:	2201      	movs	r2, #1
 8001516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800151a:	481e      	ldr	r0, [pc, #120]	; (8001594 <main+0xb4>)
 800151c:	f000 ff8c 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, 1);
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001526:	481b      	ldr	r0, [pc, #108]	; (8001594 <main+0xb4>)
 8001528:	f000 ff86 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, 1);
 800152c:	2201      	movs	r2, #1
 800152e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001532:	4819      	ldr	r0, [pc, #100]	; (8001598 <main+0xb8>)
 8001534:	f000 ff80 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, 1);
 8001538:	2201      	movs	r2, #1
 800153a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153e:	4816      	ldr	r0, [pc, #88]	; (8001598 <main+0xb8>)
 8001540:	f000 ff7a 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8001544:	2201      	movs	r2, #1
 8001546:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800154a:	4813      	ldr	r0, [pc, #76]	; (8001598 <main+0xb8>)
 800154c:	f000 ff74 	bl	8002438 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, 1);
 8001550:	2201      	movs	r2, #1
 8001552:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001556:	4810      	ldr	r0, [pc, #64]	; (8001598 <main+0xb8>)
 8001558:	f000 ff6e 	bl	8002438 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, Rx_Data, 2);
 800155c:	2202      	movs	r2, #2
 800155e:	490f      	ldr	r1, [pc, #60]	; (800159c <main+0xbc>)
 8001560:	480f      	ldr	r0, [pc, #60]	; (80015a0 <main+0xc0>)
 8001562:	f002 fc98 	bl	8003e96 <HAL_UART_Receive_IT>

  while (1)
  {


	  ADS1115(0x48);
 8001566:	2048      	movs	r0, #72	; 0x48
 8001568:	f7ff fcce 	bl	8000f08 <ADS1115>
	  HAL_Delay(250);
 800156c:	20fa      	movs	r0, #250	; 0xfa
 800156e:	f000 fbfb 	bl	8001d68 <HAL_Delay>
	  ADS1115(0x49);
 8001572:	2049      	movs	r0, #73	; 0x49
 8001574:	f7ff fcc8 	bl	8000f08 <ADS1115>
	  HAL_Delay(250);
 8001578:	20fa      	movs	r0, #250	; 0xfa
 800157a:	f000 fbf5 	bl	8001d68 <HAL_Delay>
	  ADS1115(0x4B);
 800157e:	204b      	movs	r0, #75	; 0x4b
 8001580:	f7ff fcc2 	bl	8000f08 <ADS1115>
	  HAL_Delay(250);
 8001584:	20fa      	movs	r0, #250	; 0xfa
 8001586:	f000 fbef 	bl	8001d68 <HAL_Delay>
	  ADS1115(0x4A);
 800158a:	204a      	movs	r0, #74	; 0x4a
 800158c:	f7ff fcbc 	bl	8000f08 <ADS1115>
	  ADS1115(0x48);
 8001590:	e7e9      	b.n	8001566 <main+0x86>
 8001592:	bf00      	nop
 8001594:	40010800 	.word	0x40010800
 8001598:	40010c00 	.word	0x40010c00
 800159c:	200002ec 	.word	0x200002ec
 80015a0:	200002a4 	.word	0x200002a4

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b090      	sub	sp, #64	; 0x40
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 0318 	add.w	r3, r7, #24
 80015ae:	2228      	movs	r2, #40	; 0x28
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f003 fa3e 	bl	8004a34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	1d3b      	adds	r3, r7, #4
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ce:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	2301      	movs	r3, #1
 80015d6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d8:	2302      	movs	r3, #2
 80015da:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80015e2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80015e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e8:	f107 0318 	add.w	r3, r7, #24
 80015ec:	4618      	mov	r0, r3
 80015ee:	f001 ff6f 	bl	80034d0 <HAL_RCC_OscConfig>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <SystemClock_Config+0x58>
  {
    Error_Handler();
 80015f8:	f000 f940 	bl	800187c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fc:	230f      	movs	r3, #15
 80015fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001600:	2302      	movs	r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001608:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800160c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f002 f9dc 	bl	80039d4 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001622:	f000 f92b 	bl	800187c <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3740      	adds	r7, #64	; 0x40
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
	...

08001630 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001634:	4b12      	ldr	r3, [pc, #72]	; (8001680 <MX_I2C1_Init+0x50>)
 8001636:	4a13      	ldr	r2, [pc, #76]	; (8001684 <MX_I2C1_Init+0x54>)
 8001638:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800163a:	4b11      	ldr	r3, [pc, #68]	; (8001680 <MX_I2C1_Init+0x50>)
 800163c:	4a12      	ldr	r2, [pc, #72]	; (8001688 <MX_I2C1_Init+0x58>)
 800163e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001640:	4b0f      	ldr	r3, [pc, #60]	; (8001680 <MX_I2C1_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001646:	4b0e      	ldr	r3, [pc, #56]	; (8001680 <MX_I2C1_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <MX_I2C1_Init+0x50>)
 800164e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001652:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001654:	4b0a      	ldr	r3, [pc, #40]	; (8001680 <MX_I2C1_Init+0x50>)
 8001656:	2200      	movs	r2, #0
 8001658:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <MX_I2C1_Init+0x50>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001660:	4b07      	ldr	r3, [pc, #28]	; (8001680 <MX_I2C1_Init+0x50>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <MX_I2C1_Init+0x50>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	; (8001680 <MX_I2C1_Init+0x50>)
 800166e:	f000 fefb 	bl	8002468 <HAL_I2C_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001678:	f000 f900 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	200001fc 	.word	0x200001fc
 8001684:	40005400 	.word	0x40005400
 8001688:	000186a0 	.word	0x000186a0

0800168c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <MX_I2C2_Init+0x50>)
 8001692:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <MX_I2C2_Init+0x54>)
 8001694:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001696:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_I2C2_Init+0x50>)
 8001698:	4a12      	ldr	r2, [pc, #72]	; (80016e4 <MX_I2C2_Init+0x58>)
 800169a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800169c:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <MX_I2C2_Init+0x50>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 60;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_I2C2_Init+0x50>)
 80016a4:	223c      	movs	r2, #60	; 0x3c
 80016a6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_I2C2_Init+0x50>)
 80016aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016ae:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016b0:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <MX_I2C2_Init+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_I2C2_Init+0x50>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80016bc:	4b07      	ldr	r3, [pc, #28]	; (80016dc <MX_I2C2_Init+0x50>)
 80016be:	2240      	movs	r2, #64	; 0x40
 80016c0:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_I2C2_Init+0x50>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80016c8:	4804      	ldr	r0, [pc, #16]	; (80016dc <MX_I2C2_Init+0x50>)
 80016ca:	f000 fecd 	bl	8002468 <HAL_I2C_Init>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016d4:	f000 f8d2 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000250 	.word	0x20000250
 80016e0:	40005800 	.word	0x40005800
 80016e4:	000186a0 	.word	0x000186a0

080016e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016ec:	4b11      	ldr	r3, [pc, #68]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 80016ee:	4a12      	ldr	r2, [pc, #72]	; (8001738 <MX_USART2_UART_Init+0x50>)
 80016f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001706:	4b0b      	ldr	r3, [pc, #44]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800170c:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 800170e:	220c      	movs	r2, #12
 8001710:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001712:	4b08      	ldr	r3, [pc, #32]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001718:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800171e:	4805      	ldr	r0, [pc, #20]	; (8001734 <MX_USART2_UART_Init+0x4c>)
 8001720:	f002 fae6 	bl	8003cf0 <HAL_UART_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800172a:	f000 f8a7 	bl	800187c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	200002a4 	.word	0x200002a4
 8001738:	40004400 	.word	0x40004400

0800173c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001742:	f107 0310 	add.w	r3, r7, #16
 8001746:	2200      	movs	r2, #0
 8001748:	601a      	str	r2, [r3, #0]
 800174a:	605a      	str	r2, [r3, #4]
 800174c:	609a      	str	r2, [r3, #8]
 800174e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001750:	4b46      	ldr	r3, [pc, #280]	; (800186c <MX_GPIO_Init+0x130>)
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	4a45      	ldr	r2, [pc, #276]	; (800186c <MX_GPIO_Init+0x130>)
 8001756:	f043 0310 	orr.w	r3, r3, #16
 800175a:	6193      	str	r3, [r2, #24]
 800175c:	4b43      	ldr	r3, [pc, #268]	; (800186c <MX_GPIO_Init+0x130>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001768:	4b40      	ldr	r3, [pc, #256]	; (800186c <MX_GPIO_Init+0x130>)
 800176a:	699b      	ldr	r3, [r3, #24]
 800176c:	4a3f      	ldr	r2, [pc, #252]	; (800186c <MX_GPIO_Init+0x130>)
 800176e:	f043 0320 	orr.w	r3, r3, #32
 8001772:	6193      	str	r3, [r2, #24]
 8001774:	4b3d      	ldr	r3, [pc, #244]	; (800186c <MX_GPIO_Init+0x130>)
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0320 	and.w	r3, r3, #32
 800177c:	60bb      	str	r3, [r7, #8]
 800177e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001780:	4b3a      	ldr	r3, [pc, #232]	; (800186c <MX_GPIO_Init+0x130>)
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <MX_GPIO_Init+0x130>)
 8001786:	f043 0304 	orr.w	r3, r3, #4
 800178a:	6193      	str	r3, [r2, #24]
 800178c:	4b37      	ldr	r3, [pc, #220]	; (800186c <MX_GPIO_Init+0x130>)
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	; (800186c <MX_GPIO_Init+0x130>)
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	4a33      	ldr	r2, [pc, #204]	; (800186c <MX_GPIO_Init+0x130>)
 800179e:	f043 0308 	orr.w	r3, r3, #8
 80017a2:	6193      	str	r3, [r2, #24]
 80017a4:	4b31      	ldr	r3, [pc, #196]	; (800186c <MX_GPIO_Init+0x130>)
 80017a6:	699b      	ldr	r3, [r3, #24]
 80017a8:	f003 0308 	and.w	r3, r3, #8
 80017ac:	603b      	str	r3, [r7, #0]
 80017ae:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80017b0:	2200      	movs	r2, #0
 80017b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b6:	482e      	ldr	r0, [pc, #184]	; (8001870 <MX_GPIO_Init+0x134>)
 80017b8:	f000 fe3e 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80017bc:	2200      	movs	r2, #0
 80017be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80017c2:	482c      	ldr	r0, [pc, #176]	; (8001874 <MX_GPIO_Init+0x138>)
 80017c4:	f000 fe38 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	f44f 4119 	mov.w	r1, #39168	; 0x9900
 80017ce:	482a      	ldr	r0, [pc, #168]	; (8001878 <MX_GPIO_Init+0x13c>)
 80017d0:	f000 fe32 	bl	8002438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017da:	2301      	movs	r3, #1
 80017dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2302      	movs	r3, #2
 80017e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 0310 	add.w	r3, r7, #16
 80017ea:	4619      	mov	r1, r3
 80017ec:	4820      	ldr	r0, [pc, #128]	; (8001870 <MX_GPIO_Init+0x134>)
 80017ee:	f000 fc9f 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80017f2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80017f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f8:	2301      	movs	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	2302      	movs	r3, #2
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001804:	f107 0310 	add.w	r3, r7, #16
 8001808:	4619      	mov	r1, r3
 800180a:	481a      	ldr	r0, [pc, #104]	; (8001874 <MX_GPIO_Init+0x138>)
 800180c:	f000 fc90 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15;
 8001810:	f44f 4319 	mov.w	r3, #39168	; 0x9900
 8001814:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001816:	2301      	movs	r3, #1
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800181a:	2300      	movs	r3, #0
 800181c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181e:	2302      	movs	r3, #2
 8001820:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 0310 	add.w	r3, r7, #16
 8001826:	4619      	mov	r1, r3
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_GPIO_Init+0x13c>)
 800182a:	f000 fc81 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800182e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001838:	2303      	movs	r3, #3
 800183a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	4619      	mov	r1, r3
 8001842:	480d      	ldr	r0, [pc, #52]	; (8001878 <MX_GPIO_Init+0x13c>)
 8001844:	f000 fc74 	bl	8002130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001848:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001856:	f107 0310 	add.w	r3, r7, #16
 800185a:	4619      	mov	r1, r3
 800185c:	4806      	ldr	r0, [pc, #24]	; (8001878 <MX_GPIO_Init+0x13c>)
 800185e:	f000 fc67 	bl	8002130 <HAL_GPIO_Init>

}
 8001862:	bf00      	nop
 8001864:	3720      	adds	r7, #32
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000
 8001870:	40011000 	.word	0x40011000
 8001874:	40010c00 	.word	0x40010c00
 8001878:	40010800 	.word	0x40010800

0800187c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001880:	b672      	cpsid	i
}
 8001882:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001884:	e7fe      	b.n	8001884 <Error_Handler+0x8>
	...

08001888 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <HAL_MspInit+0x5c>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a14      	ldr	r2, [pc, #80]	; (80018e4 <HAL_MspInit+0x5c>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <HAL_MspInit+0x5c>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <HAL_MspInit+0x5c>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	; (80018e4 <HAL_MspInit+0x5c>)
 80018ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b0:	61d3      	str	r3, [r2, #28]
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <HAL_MspInit+0x5c>)
 80018b4:	69db      	ldr	r3, [r3, #28]
 80018b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018ba:	607b      	str	r3, [r7, #4]
 80018bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018be:	4b0a      	ldr	r3, [pc, #40]	; (80018e8 <HAL_MspInit+0x60>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018d2:	60fb      	str	r3, [r7, #12]
 80018d4:	4a04      	ldr	r2, [pc, #16]	; (80018e8 <HAL_MspInit+0x60>)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018da:	bf00      	nop
 80018dc:	3714      	adds	r7, #20
 80018de:	46bd      	mov	sp, r7
 80018e0:	bc80      	pop	{r7}
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000

080018ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 0318 	add.w	r3, r7, #24
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a2b      	ldr	r2, [pc, #172]	; (80019b4 <HAL_I2C_MspInit+0xc8>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d124      	bne.n	8001956 <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800190c:	4b2a      	ldr	r3, [pc, #168]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001912:	f043 0308 	orr.w	r3, r3, #8
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b27      	ldr	r3, [pc, #156]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	617b      	str	r3, [r7, #20]
 8001922:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001924:	23c0      	movs	r3, #192	; 0xc0
 8001926:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001928:	2312      	movs	r3, #18
 800192a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800192c:	2303      	movs	r3, #3
 800192e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0318 	add.w	r3, r7, #24
 8001934:	4619      	mov	r1, r3
 8001936:	4821      	ldr	r0, [pc, #132]	; (80019bc <HAL_I2C_MspInit+0xd0>)
 8001938:	f000 fbfa 	bl	8002130 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800193c:	4b1e      	ldr	r3, [pc, #120]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 800193e:	69db      	ldr	r3, [r3, #28]
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001942:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001946:	61d3      	str	r3, [r2, #28]
 8001948:	4b1b      	ldr	r3, [pc, #108]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 800194a:	69db      	ldr	r3, [r3, #28]
 800194c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001950:	613b      	str	r3, [r7, #16]
 8001952:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001954:	e029      	b.n	80019aa <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a19      	ldr	r2, [pc, #100]	; (80019c0 <HAL_I2C_MspInit+0xd4>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d124      	bne.n	80019aa <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001960:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001962:	699b      	ldr	r3, [r3, #24]
 8001964:	4a14      	ldr	r2, [pc, #80]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001966:	f043 0308 	orr.w	r3, r3, #8
 800196a:	6193      	str	r3, [r2, #24]
 800196c:	4b12      	ldr	r3, [pc, #72]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 800196e:	699b      	ldr	r3, [r3, #24]
 8001970:	f003 0308 	and.w	r3, r3, #8
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001978:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800197c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800197e:	2312      	movs	r3, #18
 8001980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001986:	f107 0318 	add.w	r3, r7, #24
 800198a:	4619      	mov	r1, r3
 800198c:	480b      	ldr	r0, [pc, #44]	; (80019bc <HAL_I2C_MspInit+0xd0>)
 800198e:	f000 fbcf 	bl	8002130 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001992:	4b09      	ldr	r3, [pc, #36]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001994:	69db      	ldr	r3, [r3, #28]
 8001996:	4a08      	ldr	r2, [pc, #32]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 8001998:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800199c:	61d3      	str	r3, [r2, #28]
 800199e:	4b06      	ldr	r3, [pc, #24]	; (80019b8 <HAL_I2C_MspInit+0xcc>)
 80019a0:	69db      	ldr	r3, [r3, #28]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	bf00      	nop
 80019ac:	3728      	adds	r7, #40	; 0x28
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40005400 	.word	0x40005400
 80019b8:	40021000 	.word	0x40021000
 80019bc:	40010c00 	.word	0x40010c00
 80019c0:	40005800 	.word	0x40005800

080019c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b088      	sub	sp, #32
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	2200      	movs	r2, #0
 80019d2:	601a      	str	r2, [r3, #0]
 80019d4:	605a      	str	r2, [r3, #4]
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a1f      	ldr	r2, [pc, #124]	; (8001a5c <HAL_UART_MspInit+0x98>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d137      	bne.n	8001a54 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 80019e6:	69db      	ldr	r3, [r3, #28]
 80019e8:	4a1d      	ldr	r2, [pc, #116]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 80019ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 80019fe:	699b      	ldr	r3, [r3, #24]
 8001a00:	4a17      	ldr	r2, [pc, #92]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 8001a02:	f043 0304 	orr.w	r3, r3, #4
 8001a06:	6193      	str	r3, [r2, #24]
 8001a08:	4b15      	ldr	r3, [pc, #84]	; (8001a60 <HAL_UART_MspInit+0x9c>)
 8001a0a:	699b      	ldr	r3, [r3, #24]
 8001a0c:	f003 0304 	and.w	r3, r3, #4
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a14:	2304      	movs	r3, #4
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480f      	ldr	r0, [pc, #60]	; (8001a64 <HAL_UART_MspInit+0xa0>)
 8001a28:	f000 fb82 	bl	8002130 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a2c:	2308      	movs	r3, #8
 8001a2e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4809      	ldr	r0, [pc, #36]	; (8001a64 <HAL_UART_MspInit+0xa0>)
 8001a40:	f000 fb76 	bl	8002130 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a44:	2200      	movs	r2, #0
 8001a46:	2100      	movs	r1, #0
 8001a48:	2026      	movs	r0, #38	; 0x26
 8001a4a:	f000 fa88 	bl	8001f5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a4e:	2026      	movs	r0, #38	; 0x26
 8001a50:	f000 faa1 	bl	8001f96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a54:	bf00      	nop
 8001a56:	3720      	adds	r7, #32
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40004400 	.word	0x40004400
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40010800 	.word	0x40010800

08001a68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a6c:	e7fe      	b.n	8001a6c <NMI_Handler+0x4>

08001a6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <HardFault_Handler+0x4>

08001a74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a78:	e7fe      	b.n	8001a78 <MemManage_Handler+0x4>

08001a7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7a:	b480      	push	{r7}
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <BusFault_Handler+0x4>

08001a80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a84:	e7fe      	b.n	8001a84 <UsageFault_Handler+0x4>

08001a86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bc80      	pop	{r7}
 8001a9c:	4770      	bx	lr

08001a9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bc80      	pop	{r7}
 8001aa8:	4770      	bx	lr

08001aaa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aae:	f000 f93f 	bl	8001d30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
	...

08001ab8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001abc:	4802      	ldr	r0, [pc, #8]	; (8001ac8 <USART2_IRQHandler+0x10>)
 8001abe:	f002 fa0f 	bl	8003ee0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002a4 	.word	0x200002a4

08001acc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return 1;
 8001ad0:	2301      	movs	r3, #1
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <_kill>:

int _kill(int pid, int sig)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
 8001ae2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ae4:	f002 ff7c 	bl	80049e0 <__errno>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2216      	movs	r2, #22
 8001aec:	601a      	str	r2, [r3, #0]
  return -1;
 8001aee:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <_exit>:

void _exit (int status)
{
 8001afa:	b580      	push	{r7, lr}
 8001afc:	b082      	sub	sp, #8
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b02:	f04f 31ff 	mov.w	r1, #4294967295
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffe7 	bl	8001ada <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b0c:	e7fe      	b.n	8001b0c <_exit+0x12>

08001b0e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	60b9      	str	r1, [r7, #8]
 8001b18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	617b      	str	r3, [r7, #20]
 8001b1e:	e00a      	b.n	8001b36 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b20:	f3af 8000 	nop.w
 8001b24:	4601      	mov	r1, r0
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	1c5a      	adds	r2, r3, #1
 8001b2a:	60ba      	str	r2, [r7, #8]
 8001b2c:	b2ca      	uxtb	r2, r1
 8001b2e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	3301      	adds	r3, #1
 8001b34:	617b      	str	r3, [r7, #20]
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	dbf0      	blt.n	8001b20 <_read+0x12>
  }

  return len;
 8001b3e:	687b      	ldr	r3, [r7, #4]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3718      	adds	r7, #24
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}

08001b48 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	60f8      	str	r0, [r7, #12]
 8001b50:	60b9      	str	r1, [r7, #8]
 8001b52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	e009      	b.n	8001b6e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	1c5a      	adds	r2, r3, #1
 8001b5e:	60ba      	str	r2, [r7, #8]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	dbf1      	blt.n	8001b5a <_write+0x12>
  }
  return len;
 8001b76:	687b      	ldr	r3, [r7, #4]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <_close>:

int _close(int file)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr

08001b96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b96:	b480      	push	{r7}
 8001b98:	b083      	sub	sp, #12
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	6078      	str	r0, [r7, #4]
 8001b9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ba6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <_isatty>:

int _isatty(int file)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bc80      	pop	{r7}
 8001bc6:	4770      	bx	lr

08001bc8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b085      	sub	sp, #20
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	60f8      	str	r0, [r7, #12]
 8001bd0:	60b9      	str	r1, [r7, #8]
 8001bd2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bd4:	2300      	movs	r3, #0
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	3714      	adds	r7, #20
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bc80      	pop	{r7}
 8001bde:	4770      	bx	lr

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f002 fee6 	bl	80049e0 <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20005000 	.word	0x20005000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	2000031c 	.word	0x2000031c
 8001c48:	20000338 	.word	0x20000338

08001c4c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c50:	bf00      	nop
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bc80      	pop	{r7}
 8001c56:	4770      	bx	lr

08001c58 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c58:	f7ff fff8 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c5c:	480b      	ldr	r0, [pc, #44]	; (8001c8c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001c5e:	490c      	ldr	r1, [pc, #48]	; (8001c90 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001c60:	4a0c      	ldr	r2, [pc, #48]	; (8001c94 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001c62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c64:	e002      	b.n	8001c6c <LoopCopyDataInit>

08001c66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6a:	3304      	adds	r3, #4

08001c6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c70:	d3f9      	bcc.n	8001c66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001c74:	4c09      	ldr	r4, [pc, #36]	; (8001c9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c78:	e001      	b.n	8001c7e <LoopFillZerobss>

08001c7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c7c:	3204      	adds	r2, #4

08001c7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c80:	d3fb      	bcc.n	8001c7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c82:	f002 feb3 	bl	80049ec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001c86:	f7ff fc2b 	bl	80014e0 <main>
  bx lr
 8001c8a:	4770      	bx	lr
  ldr r0, =_sdata
 8001c8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c90:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001c94:	08007c74 	.word	0x08007c74
  ldr r2, =_sbss
 8001c98:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001c9c:	20000334 	.word	0x20000334

08001ca0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001ca0:	e7fe      	b.n	8001ca0 <ADC1_2_IRQHandler>
	...

08001ca4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ca8:	4b08      	ldr	r3, [pc, #32]	; (8001ccc <HAL_Init+0x28>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a07      	ldr	r2, [pc, #28]	; (8001ccc <HAL_Init+0x28>)
 8001cae:	f043 0310 	orr.w	r3, r3, #16
 8001cb2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cb4:	2003      	movs	r0, #3
 8001cb6:	f000 f947 	bl	8001f48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cba:	200f      	movs	r0, #15
 8001cbc:	f000 f808 	bl	8001cd0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cc0:	f7ff fde2 	bl	8001888 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	40022000 	.word	0x40022000

08001cd0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cd8:	4b12      	ldr	r3, [pc, #72]	; (8001d24 <HAL_InitTick+0x54>)
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b12      	ldr	r3, [pc, #72]	; (8001d28 <HAL_InitTick+0x58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ce6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f000 f95f 	bl	8001fb2 <HAL_SYSTICK_Config>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e00e      	b.n	8001d1c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2b0f      	cmp	r3, #15
 8001d02:	d80a      	bhi.n	8001d1a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d04:	2200      	movs	r2, #0
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	f04f 30ff 	mov.w	r0, #4294967295
 8001d0c:	f000 f927 	bl	8001f5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d10:	4a06      	ldr	r2, [pc, #24]	; (8001d2c <HAL_InitTick+0x5c>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
 8001d18:	e000      	b.n	8001d1c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3708      	adds	r7, #8
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	20000004 	.word	0x20000004
 8001d28:	2000000c 	.word	0x2000000c
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d34:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <HAL_IncTick+0x1c>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4b05      	ldr	r3, [pc, #20]	; (8001d50 <HAL_IncTick+0x20>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4413      	add	r3, r2
 8001d40:	4a03      	ldr	r2, [pc, #12]	; (8001d50 <HAL_IncTick+0x20>)
 8001d42:	6013      	str	r3, [r2, #0]
}
 8001d44:	bf00      	nop
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bc80      	pop	{r7}
 8001d4a:	4770      	bx	lr
 8001d4c:	2000000c 	.word	0x2000000c
 8001d50:	20000320 	.word	0x20000320

08001d54 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return uwTick;
 8001d58:	4b02      	ldr	r3, [pc, #8]	; (8001d64 <HAL_GetTick+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000320 	.word	0x20000320

08001d68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d70:	f7ff fff0 	bl	8001d54 <HAL_GetTick>
 8001d74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d80:	d005      	beq.n	8001d8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_Delay+0x44>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d8e:	bf00      	nop
 8001d90:	f7ff ffe0 	bl	8001d54 <HAL_GetTick>
 8001d94:	4602      	mov	r2, r0
 8001d96:	68bb      	ldr	r3, [r7, #8]
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d8f7      	bhi.n	8001d90 <HAL_Delay+0x28>
  {
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3710      	adds	r7, #16
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	2000000c 	.word	0x2000000c

08001db0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dc0:	4b0c      	ldr	r3, [pc, #48]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dcc:	4013      	ands	r3, r2
 8001dce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001de0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001de2:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <__NVIC_SetPriorityGrouping+0x44>)
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	60d3      	str	r3, [r2, #12]
}
 8001de8:	bf00      	nop
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bc80      	pop	{r7}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <__NVIC_GetPriorityGrouping+0x18>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	0a1b      	lsrs	r3, r3, #8
 8001e02:	f003 0307 	and.w	r3, r3, #7
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	db0b      	blt.n	8001e3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	f003 021f 	and.w	r2, r3, #31
 8001e2c:	4906      	ldr	r1, [pc, #24]	; (8001e48 <__NVIC_EnableIRQ+0x34>)
 8001e2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e32:	095b      	lsrs	r3, r3, #5
 8001e34:	2001      	movs	r0, #1
 8001e36:	fa00 f202 	lsl.w	r2, r0, r2
 8001e3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr
 8001e48:	e000e100 	.word	0xe000e100

08001e4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	6039      	str	r1, [r7, #0]
 8001e56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	db0a      	blt.n	8001e76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	b2da      	uxtb	r2, r3
 8001e64:	490c      	ldr	r1, [pc, #48]	; (8001e98 <__NVIC_SetPriority+0x4c>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	0112      	lsls	r2, r2, #4
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	440b      	add	r3, r1
 8001e70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e74:	e00a      	b.n	8001e8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	b2da      	uxtb	r2, r3
 8001e7a:	4908      	ldr	r1, [pc, #32]	; (8001e9c <__NVIC_SetPriority+0x50>)
 8001e7c:	79fb      	ldrb	r3, [r7, #7]
 8001e7e:	f003 030f 	and.w	r3, r3, #15
 8001e82:	3b04      	subs	r3, #4
 8001e84:	0112      	lsls	r2, r2, #4
 8001e86:	b2d2      	uxtb	r2, r2
 8001e88:	440b      	add	r3, r1
 8001e8a:	761a      	strb	r2, [r3, #24]
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000e100 	.word	0xe000e100
 8001e9c:	e000ed00 	.word	0xe000ed00

08001ea0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b089      	sub	sp, #36	; 0x24
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	60b9      	str	r1, [r7, #8]
 8001eaa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	f1c3 0307 	rsb	r3, r3, #7
 8001eba:	2b04      	cmp	r3, #4
 8001ebc:	bf28      	it	cs
 8001ebe:	2304      	movcs	r3, #4
 8001ec0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ec2:	69fb      	ldr	r3, [r7, #28]
 8001ec4:	3304      	adds	r3, #4
 8001ec6:	2b06      	cmp	r3, #6
 8001ec8:	d902      	bls.n	8001ed0 <NVIC_EncodePriority+0x30>
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3b03      	subs	r3, #3
 8001ece:	e000      	b.n	8001ed2 <NVIC_EncodePriority+0x32>
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ed8:	69bb      	ldr	r3, [r7, #24]
 8001eda:	fa02 f303 	lsl.w	r3, r2, r3
 8001ede:	43da      	mvns	r2, r3
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ee8:	f04f 31ff 	mov.w	r1, #4294967295
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	fa01 f303 	lsl.w	r3, r1, r3
 8001ef2:	43d9      	mvns	r1, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	4313      	orrs	r3, r2
         );
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3724      	adds	r7, #36	; 0x24
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bc80      	pop	{r7}
 8001f02:	4770      	bx	lr

08001f04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f14:	d301      	bcc.n	8001f1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f16:	2301      	movs	r3, #1
 8001f18:	e00f      	b.n	8001f3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f1a:	4a0a      	ldr	r2, [pc, #40]	; (8001f44 <SysTick_Config+0x40>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f22:	210f      	movs	r1, #15
 8001f24:	f04f 30ff 	mov.w	r0, #4294967295
 8001f28:	f7ff ff90 	bl	8001e4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <SysTick_Config+0x40>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f32:	4b04      	ldr	r3, [pc, #16]	; (8001f44 <SysTick_Config+0x40>)
 8001f34:	2207      	movs	r2, #7
 8001f36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000e010 	.word	0xe000e010

08001f48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f50:	6878      	ldr	r0, [r7, #4]
 8001f52:	f7ff ff2d 	bl	8001db0 <__NVIC_SetPriorityGrouping>
}
 8001f56:	bf00      	nop
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}

08001f5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f5e:	b580      	push	{r7, lr}
 8001f60:	b086      	sub	sp, #24
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	4603      	mov	r3, r0
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f70:	f7ff ff42 	bl	8001df8 <__NVIC_GetPriorityGrouping>
 8001f74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f76:	687a      	ldr	r2, [r7, #4]
 8001f78:	68b9      	ldr	r1, [r7, #8]
 8001f7a:	6978      	ldr	r0, [r7, #20]
 8001f7c:	f7ff ff90 	bl	8001ea0 <NVIC_EncodePriority>
 8001f80:	4602      	mov	r2, r0
 8001f82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f86:	4611      	mov	r1, r2
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f7ff ff5f 	bl	8001e4c <__NVIC_SetPriority>
}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fa0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff35 	bl	8001e14 <__NVIC_EnableIRQ>
}
 8001faa:	bf00      	nop
 8001fac:	3708      	adds	r7, #8
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffa2 	bl	8001f04 <SysTick_Config>
 8001fc0:	4603      	mov	r3, r0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fca:	b480      	push	{r7}
 8001fcc:	b085      	sub	sp, #20
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d008      	beq.n	8001ff4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2204      	movs	r2, #4
 8001fe6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e020      	b.n	8002036 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 020e 	bic.w	r2, r2, #14
 8002002:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	681a      	ldr	r2, [r3, #0]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f022 0201 	bic.w	r2, r2, #1
 8002012:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800201c:	2101      	movs	r1, #1
 800201e:	fa01 f202 	lsl.w	r2, r1, r2
 8002022:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2200      	movs	r2, #0
 8002030:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002034:	7bfb      	ldrb	r3, [r7, #15]
}
 8002036:	4618      	mov	r0, r3
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b02      	cmp	r3, #2
 8002056:	d005      	beq.n	8002064 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2204      	movs	r2, #4
 800205c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	73fb      	strb	r3, [r7, #15]
 8002062:	e051      	b.n	8002108 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f022 020e 	bic.w	r2, r2, #14
 8002072:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681a      	ldr	r2, [r3, #0]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f022 0201 	bic.w	r2, r2, #1
 8002082:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a22      	ldr	r2, [pc, #136]	; (8002114 <HAL_DMA_Abort_IT+0xd4>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d029      	beq.n	80020e2 <HAL_DMA_Abort_IT+0xa2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a21      	ldr	r2, [pc, #132]	; (8002118 <HAL_DMA_Abort_IT+0xd8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d022      	beq.n	80020de <HAL_DMA_Abort_IT+0x9e>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_DMA_Abort_IT+0xdc>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d01a      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x98>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a1e      	ldr	r2, [pc, #120]	; (8002120 <HAL_DMA_Abort_IT+0xe0>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d012      	beq.n	80020d2 <HAL_DMA_Abort_IT+0x92>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1c      	ldr	r2, [pc, #112]	; (8002124 <HAL_DMA_Abort_IT+0xe4>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d00a      	beq.n	80020cc <HAL_DMA_Abort_IT+0x8c>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_DMA_Abort_IT+0xe8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d102      	bne.n	80020c6 <HAL_DMA_Abort_IT+0x86>
 80020c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020c4:	e00e      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020ca:	e00b      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80020d0:	e008      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d6:	e005      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020dc:	e002      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020de:	2310      	movs	r3, #16
 80020e0:	e000      	b.n	80020e4 <HAL_DMA_Abort_IT+0xa4>
 80020e2:	2301      	movs	r3, #1
 80020e4:	4a11      	ldr	r2, [pc, #68]	; (800212c <HAL_DMA_Abort_IT+0xec>)
 80020e6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	4798      	blx	r3
    } 
  }
  return status;
 8002108:	7bfb      	ldrb	r3, [r7, #15]
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40020008 	.word	0x40020008
 8002118:	4002001c 	.word	0x4002001c
 800211c:	40020030 	.word	0x40020030
 8002120:	40020044 	.word	0x40020044
 8002124:	40020058 	.word	0x40020058
 8002128:	4002006c 	.word	0x4002006c
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002130:	b480      	push	{r7}
 8002132:	b08b      	sub	sp, #44	; 0x2c
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800213a:	2300      	movs	r3, #0
 800213c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002142:	e169      	b.n	8002418 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002144:	2201      	movs	r2, #1
 8002146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	429a      	cmp	r2, r3
 800215e:	f040 8158 	bne.w	8002412 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	4a9a      	ldr	r2, [pc, #616]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d05e      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800216c:	4a98      	ldr	r2, [pc, #608]	; (80023d0 <HAL_GPIO_Init+0x2a0>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d875      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002172:	4a98      	ldr	r2, [pc, #608]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d058      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002178:	4a96      	ldr	r2, [pc, #600]	; (80023d4 <HAL_GPIO_Init+0x2a4>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d86f      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800217e:	4a96      	ldr	r2, [pc, #600]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d052      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002184:	4a94      	ldr	r2, [pc, #592]	; (80023d8 <HAL_GPIO_Init+0x2a8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d869      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 800218a:	4a94      	ldr	r2, [pc, #592]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d04c      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 8002190:	4a92      	ldr	r2, [pc, #584]	; (80023dc <HAL_GPIO_Init+0x2ac>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d863      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 8002196:	4a92      	ldr	r2, [pc, #584]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d046      	beq.n	800222a <HAL_GPIO_Init+0xfa>
 800219c:	4a90      	ldr	r2, [pc, #576]	; (80023e0 <HAL_GPIO_Init+0x2b0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d85d      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021a2:	2b12      	cmp	r3, #18
 80021a4:	d82a      	bhi.n	80021fc <HAL_GPIO_Init+0xcc>
 80021a6:	2b12      	cmp	r3, #18
 80021a8:	d859      	bhi.n	800225e <HAL_GPIO_Init+0x12e>
 80021aa:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <HAL_GPIO_Init+0x80>)
 80021ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b0:	0800222b 	.word	0x0800222b
 80021b4:	08002205 	.word	0x08002205
 80021b8:	08002217 	.word	0x08002217
 80021bc:	08002259 	.word	0x08002259
 80021c0:	0800225f 	.word	0x0800225f
 80021c4:	0800225f 	.word	0x0800225f
 80021c8:	0800225f 	.word	0x0800225f
 80021cc:	0800225f 	.word	0x0800225f
 80021d0:	0800225f 	.word	0x0800225f
 80021d4:	0800225f 	.word	0x0800225f
 80021d8:	0800225f 	.word	0x0800225f
 80021dc:	0800225f 	.word	0x0800225f
 80021e0:	0800225f 	.word	0x0800225f
 80021e4:	0800225f 	.word	0x0800225f
 80021e8:	0800225f 	.word	0x0800225f
 80021ec:	0800225f 	.word	0x0800225f
 80021f0:	0800225f 	.word	0x0800225f
 80021f4:	0800220d 	.word	0x0800220d
 80021f8:	08002221 	.word	0x08002221
 80021fc:	4a79      	ldr	r2, [pc, #484]	; (80023e4 <HAL_GPIO_Init+0x2b4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002202:	e02c      	b.n	800225e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	623b      	str	r3, [r7, #32]
          break;
 800220a:	e029      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	68db      	ldr	r3, [r3, #12]
 8002210:	3304      	adds	r3, #4
 8002212:	623b      	str	r3, [r7, #32]
          break;
 8002214:	e024      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	3308      	adds	r3, #8
 800221c:	623b      	str	r3, [r7, #32]
          break;
 800221e:	e01f      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	330c      	adds	r3, #12
 8002226:	623b      	str	r3, [r7, #32]
          break;
 8002228:	e01a      	b.n	8002260 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002232:	2304      	movs	r3, #4
 8002234:	623b      	str	r3, [r7, #32]
          break;
 8002236:	e013      	b.n	8002260 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002240:	2308      	movs	r3, #8
 8002242:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	611a      	str	r2, [r3, #16]
          break;
 800224a:	e009      	b.n	8002260 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800224c:	2308      	movs	r3, #8
 800224e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69fa      	ldr	r2, [r7, #28]
 8002254:	615a      	str	r2, [r3, #20]
          break;
 8002256:	e003      	b.n	8002260 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002258:	2300      	movs	r3, #0
 800225a:	623b      	str	r3, [r7, #32]
          break;
 800225c:	e000      	b.n	8002260 <HAL_GPIO_Init+0x130>
          break;
 800225e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	2bff      	cmp	r3, #255	; 0xff
 8002264:	d801      	bhi.n	800226a <HAL_GPIO_Init+0x13a>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	e001      	b.n	800226e <HAL_GPIO_Init+0x13e>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3304      	adds	r3, #4
 800226e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	2bff      	cmp	r3, #255	; 0xff
 8002274:	d802      	bhi.n	800227c <HAL_GPIO_Init+0x14c>
 8002276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	e002      	b.n	8002282 <HAL_GPIO_Init+0x152>
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	3b08      	subs	r3, #8
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	210f      	movs	r1, #15
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	fa01 f303 	lsl.w	r3, r1, r3
 8002290:	43db      	mvns	r3, r3
 8002292:	401a      	ands	r2, r3
 8002294:	6a39      	ldr	r1, [r7, #32]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80b1 	beq.w	8002412 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80022b0:	4b4d      	ldr	r3, [pc, #308]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b2:	699b      	ldr	r3, [r3, #24]
 80022b4:	4a4c      	ldr	r2, [pc, #304]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022b6:	f043 0301 	orr.w	r3, r3, #1
 80022ba:	6193      	str	r3, [r2, #24]
 80022bc:	4b4a      	ldr	r3, [pc, #296]	; (80023e8 <HAL_GPIO_Init+0x2b8>)
 80022be:	699b      	ldr	r3, [r3, #24]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80022c8:	4a48      	ldr	r2, [pc, #288]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 80022ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022cc:	089b      	lsrs	r3, r3, #2
 80022ce:	3302      	adds	r3, #2
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	68fa      	ldr	r2, [r7, #12]
 80022e8:	4013      	ands	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_GPIO_Init+0x2c0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x1ec>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a3f      	ldr	r2, [pc, #252]	; (80023f4 <HAL_GPIO_Init+0x2c4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1e8>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a3e      	ldr	r2, [pc, #248]	; (80023f8 <HAL_GPIO_Init+0x2c8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1e4>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a3d      	ldr	r2, [pc, #244]	; (80023fc <HAL_GPIO_Init+0x2cc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1e0>
 800230c:	2303      	movs	r3, #3
 800230e:	e006      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002310:	2304      	movs	r3, #4
 8002312:	e004      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002314:	2302      	movs	r3, #2
 8002316:	e002      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 8002318:	2301      	movs	r3, #1
 800231a:	e000      	b.n	800231e <HAL_GPIO_Init+0x1ee>
 800231c:	2300      	movs	r3, #0
 800231e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002320:	f002 0203 	and.w	r2, r2, #3
 8002324:	0092      	lsls	r2, r2, #2
 8002326:	4093      	lsls	r3, r2
 8002328:	68fa      	ldr	r2, [r7, #12]
 800232a:	4313      	orrs	r3, r2
 800232c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800232e:	492f      	ldr	r1, [pc, #188]	; (80023ec <HAL_GPIO_Init+0x2bc>)
 8002330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002332:	089b      	lsrs	r3, r3, #2
 8002334:	3302      	adds	r3, #2
 8002336:	68fa      	ldr	r2, [r7, #12]
 8002338:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d006      	beq.n	8002356 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002348:	4b2d      	ldr	r3, [pc, #180]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	492c      	ldr	r1, [pc, #176]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800234e:	69bb      	ldr	r3, [r7, #24]
 8002350:	4313      	orrs	r3, r2
 8002352:	608b      	str	r3, [r1, #8]
 8002354:	e006      	b.n	8002364 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002356:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	69bb      	ldr	r3, [r7, #24]
 800235c:	43db      	mvns	r3, r3
 800235e:	4928      	ldr	r1, [pc, #160]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002360:	4013      	ands	r3, r2
 8002362:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d006      	beq.n	800237e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002370:	4b23      	ldr	r3, [pc, #140]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4922      	ldr	r1, [pc, #136]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	60cb      	str	r3, [r1, #12]
 800237c:	e006      	b.n	800238c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800237e:	4b20      	ldr	r3, [pc, #128]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	69bb      	ldr	r3, [r7, #24]
 8002384:	43db      	mvns	r3, r3
 8002386:	491e      	ldr	r1, [pc, #120]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 8002388:	4013      	ands	r3, r2
 800238a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002398:	4b19      	ldr	r3, [pc, #100]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	4918      	ldr	r1, [pc, #96]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	604b      	str	r3, [r1, #4]
 80023a4:	e006      	b.n	80023b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80023a6:	4b16      	ldr	r3, [pc, #88]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023a8:	685a      	ldr	r2, [r3, #4]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	4914      	ldr	r1, [pc, #80]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d021      	beq.n	8002404 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80023c0:	4b0f      	ldr	r3, [pc, #60]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	490e      	ldr	r1, [pc, #56]	; (8002400 <HAL_GPIO_Init+0x2d0>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	600b      	str	r3, [r1, #0]
 80023cc:	e021      	b.n	8002412 <HAL_GPIO_Init+0x2e2>
 80023ce:	bf00      	nop
 80023d0:	10320000 	.word	0x10320000
 80023d4:	10310000 	.word	0x10310000
 80023d8:	10220000 	.word	0x10220000
 80023dc:	10210000 	.word	0x10210000
 80023e0:	10120000 	.word	0x10120000
 80023e4:	10110000 	.word	0x10110000
 80023e8:	40021000 	.word	0x40021000
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40010800 	.word	0x40010800
 80023f4:	40010c00 	.word	0x40010c00
 80023f8:	40011000 	.word	0x40011000
 80023fc:	40011400 	.word	0x40011400
 8002400:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002404:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_GPIO_Init+0x304>)
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	69bb      	ldr	r3, [r7, #24]
 800240a:	43db      	mvns	r3, r3
 800240c:	4909      	ldr	r1, [pc, #36]	; (8002434 <HAL_GPIO_Init+0x304>)
 800240e:	4013      	ands	r3, r2
 8002410:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002414:	3301      	adds	r3, #1
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	2b00      	cmp	r3, #0
 8002424:	f47f ae8e 	bne.w	8002144 <HAL_GPIO_Init+0x14>
  }
}
 8002428:	bf00      	nop
 800242a:	bf00      	nop
 800242c:	372c      	adds	r7, #44	; 0x2c
 800242e:	46bd      	mov	sp, r7
 8002430:	bc80      	pop	{r7}
 8002432:	4770      	bx	lr
 8002434:	40010400 	.word	0x40010400

08002438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	460b      	mov	r3, r1
 8002442:	807b      	strh	r3, [r7, #2]
 8002444:	4613      	mov	r3, r2
 8002446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002448:	787b      	ldrb	r3, [r7, #1]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d003      	beq.n	8002456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002454:	e003      	b.n	800245e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002456:	887b      	ldrh	r3, [r7, #2]
 8002458:	041a      	lsls	r2, r3, #16
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	611a      	str	r2, [r3, #16]
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr

08002468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d101      	bne.n	800247a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e12b      	b.n	80026d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002480:	b2db      	uxtb	r3, r3
 8002482:	2b00      	cmp	r3, #0
 8002484:	d106      	bne.n	8002494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff fa2c 	bl	80018ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2224      	movs	r2, #36	; 0x24
 8002498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024cc:	f001 fbca 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80024d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	4a81      	ldr	r2, [pc, #516]	; (80026dc <HAL_I2C_Init+0x274>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d807      	bhi.n	80024ec <HAL_I2C_Init+0x84>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a80      	ldr	r2, [pc, #512]	; (80026e0 <HAL_I2C_Init+0x278>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	e006      	b.n	80024fa <HAL_I2C_Init+0x92>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4a7d      	ldr	r2, [pc, #500]	; (80026e4 <HAL_I2C_Init+0x27c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	bf94      	ite	ls
 80024f4:	2301      	movls	r3, #1
 80024f6:	2300      	movhi	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e0e7      	b.n	80026d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	4a78      	ldr	r2, [pc, #480]	; (80026e8 <HAL_I2C_Init+0x280>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	0c9b      	lsrs	r3, r3, #18
 800250c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	430a      	orrs	r2, r1
 8002520:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a6a      	ldr	r2, [pc, #424]	; (80026dc <HAL_I2C_Init+0x274>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d802      	bhi.n	800253c <HAL_I2C_Init+0xd4>
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	3301      	adds	r3, #1
 800253a:	e009      	b.n	8002550 <HAL_I2C_Init+0xe8>
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002542:	fb02 f303 	mul.w	r3, r2, r3
 8002546:	4a69      	ldr	r2, [pc, #420]	; (80026ec <HAL_I2C_Init+0x284>)
 8002548:	fba2 2303 	umull	r2, r3, r2, r3
 800254c:	099b      	lsrs	r3, r3, #6
 800254e:	3301      	adds	r3, #1
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6812      	ldr	r2, [r2, #0]
 8002554:	430b      	orrs	r3, r1
 8002556:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002562:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	495c      	ldr	r1, [pc, #368]	; (80026dc <HAL_I2C_Init+0x274>)
 800256c:	428b      	cmp	r3, r1
 800256e:	d819      	bhi.n	80025a4 <HAL_I2C_Init+0x13c>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1e59      	subs	r1, r3, #1
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	fbb1 f3f3 	udiv	r3, r1, r3
 800257e:	1c59      	adds	r1, r3, #1
 8002580:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002584:	400b      	ands	r3, r1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d00a      	beq.n	80025a0 <HAL_I2C_Init+0x138>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1e59      	subs	r1, r3, #1
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	005b      	lsls	r3, r3, #1
 8002594:	fbb1 f3f3 	udiv	r3, r1, r3
 8002598:	3301      	adds	r3, #1
 800259a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800259e:	e051      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025a0:	2304      	movs	r3, #4
 80025a2:	e04f      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d111      	bne.n	80025d0 <HAL_I2C_Init+0x168>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e58      	subs	r0, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6859      	ldr	r1, [r3, #4]
 80025b4:	460b      	mov	r3, r1
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	440b      	add	r3, r1
 80025ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80025be:	3301      	adds	r3, #1
 80025c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf0c      	ite	eq
 80025c8:	2301      	moveq	r3, #1
 80025ca:	2300      	movne	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	e012      	b.n	80025f6 <HAL_I2C_Init+0x18e>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	1e58      	subs	r0, r3, #1
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6859      	ldr	r1, [r3, #4]
 80025d8:	460b      	mov	r3, r1
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	440b      	add	r3, r1
 80025de:	0099      	lsls	r1, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025e6:	3301      	adds	r3, #1
 80025e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	bf0c      	ite	eq
 80025f0:	2301      	moveq	r3, #1
 80025f2:	2300      	movne	r3, #0
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <HAL_I2C_Init+0x196>
 80025fa:	2301      	movs	r3, #1
 80025fc:	e022      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10e      	bne.n	8002624 <HAL_I2C_Init+0x1bc>
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	1e58      	subs	r0, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6859      	ldr	r1, [r3, #4]
 800260e:	460b      	mov	r3, r1
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	440b      	add	r3, r1
 8002614:	fbb0 f3f3 	udiv	r3, r0, r3
 8002618:	3301      	adds	r3, #1
 800261a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800261e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002622:	e00f      	b.n	8002644 <HAL_I2C_Init+0x1dc>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	1e58      	subs	r0, r3, #1
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	460b      	mov	r3, r1
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	440b      	add	r3, r1
 8002632:	0099      	lsls	r1, r3, #2
 8002634:	440b      	add	r3, r1
 8002636:	fbb0 f3f3 	udiv	r3, r0, r3
 800263a:	3301      	adds	r3, #1
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	6809      	ldr	r1, [r1, #0]
 8002648:	4313      	orrs	r3, r2
 800264a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	431a      	orrs	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	430a      	orrs	r2, r1
 8002666:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002672:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	6911      	ldr	r1, [r2, #16]
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	68d2      	ldr	r2, [r2, #12]
 800267e:	4311      	orrs	r1, r2
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	6812      	ldr	r2, [r2, #0]
 8002684:	430b      	orrs	r3, r1
 8002686:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	695a      	ldr	r2, [r3, #20]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681a      	ldr	r2, [r3, #0]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2220      	movs	r2, #32
 80026be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2200      	movs	r2, #0
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026d0:	2300      	movs	r3, #0
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	000186a0 	.word	0x000186a0
 80026e0:	001e847f 	.word	0x001e847f
 80026e4:	003d08ff 	.word	0x003d08ff
 80026e8:	431bde83 	.word	0x431bde83
 80026ec:	10624dd3 	.word	0x10624dd3

080026f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b088      	sub	sp, #32
 80026f4:	af02      	add	r7, sp, #8
 80026f6:	60f8      	str	r0, [r7, #12]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	460b      	mov	r3, r1
 80026fe:	817b      	strh	r3, [r7, #10]
 8002700:	4613      	mov	r3, r2
 8002702:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002704:	f7ff fb26 	bl	8001d54 <HAL_GetTick>
 8002708:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b20      	cmp	r3, #32
 8002714:	f040 80e0 	bne.w	80028d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2319      	movs	r3, #25
 800271e:	2201      	movs	r2, #1
 8002720:	4970      	ldr	r1, [pc, #448]	; (80028e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fc9e 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800272e:	2302      	movs	r3, #2
 8002730:	e0d3      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002738:	2b01      	cmp	r3, #1
 800273a:	d101      	bne.n	8002740 <HAL_I2C_Master_Transmit+0x50>
 800273c:	2302      	movs	r3, #2
 800273e:	e0cc      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b01      	cmp	r3, #1
 8002754:	d007      	beq.n	8002766 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f042 0201 	orr.w	r2, r2, #1
 8002764:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002774:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2221      	movs	r2, #33	; 0x21
 800277a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2210      	movs	r2, #16
 8002782:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2200      	movs	r2, #0
 800278a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	893a      	ldrh	r2, [r7, #8]
 8002796:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800279c:	b29a      	uxth	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4a50      	ldr	r2, [pc, #320]	; (80028e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80027a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027a8:	8979      	ldrh	r1, [r7, #10]
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	6a3a      	ldr	r2, [r7, #32]
 80027ae:	68f8      	ldr	r0, [r7, #12]
 80027b0:	f000 fb08 	bl	8002dc4 <I2C_MasterRequestWrite>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d001      	beq.n	80027be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e08d      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	695b      	ldr	r3, [r3, #20]
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	613b      	str	r3, [r7, #16]
 80027d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027d4:	e066      	b.n	80028a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	6a39      	ldr	r1, [r7, #32]
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 fd5c 	bl	8003298 <I2C_WaitOnTXEFlagUntilTimeout>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00d      	beq.n	8002802 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d107      	bne.n	80027fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e06b      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002806:	781a      	ldrb	r2, [r3, #0]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800281c:	b29b      	uxth	r3, r3
 800281e:	3b01      	subs	r3, #1
 8002820:	b29a      	uxth	r2, r3
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f003 0304 	and.w	r3, r3, #4
 800283c:	2b04      	cmp	r3, #4
 800283e:	d11b      	bne.n	8002878 <HAL_I2C_Master_Transmit+0x188>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002844:	2b00      	cmp	r3, #0
 8002846:	d017      	beq.n	8002878 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	781a      	ldrb	r2, [r3, #0]
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	1c5a      	adds	r2, r3, #1
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002878:	697a      	ldr	r2, [r7, #20]
 800287a:	6a39      	ldr	r1, [r7, #32]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 fd53 	bl	8003328 <I2C_WaitOnBTFFlagUntilTimeout>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00d      	beq.n	80028a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	2b04      	cmp	r3, #4
 800288e:	d107      	bne.n	80028a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800289e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e01a      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d194      	bne.n	80027d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2220      	movs	r2, #32
 80028c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028d4:	2300      	movs	r3, #0
 80028d6:	e000      	b.n	80028da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028d8:	2302      	movs	r3, #2
  }
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	00100002 	.word	0x00100002
 80028e8:	ffff0000 	.word	0xffff0000

080028ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08c      	sub	sp, #48	; 0x30
 80028f0:	af02      	add	r7, sp, #8
 80028f2:	60f8      	str	r0, [r7, #12]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	461a      	mov	r2, r3
 80028f8:	460b      	mov	r3, r1
 80028fa:	817b      	strh	r3, [r7, #10]
 80028fc:	4613      	mov	r3, r2
 80028fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002904:	f7ff fa26 	bl	8001d54 <HAL_GetTick>
 8002908:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b20      	cmp	r3, #32
 8002914:	f040 824b 	bne.w	8002dae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	2319      	movs	r3, #25
 800291e:	2201      	movs	r2, #1
 8002920:	497f      	ldr	r1, [pc, #508]	; (8002b20 <HAL_I2C_Master_Receive+0x234>)
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 fb9e 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d001      	beq.n	8002932 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800292e:	2302      	movs	r3, #2
 8002930:	e23e      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002938:	2b01      	cmp	r3, #1
 800293a:	d101      	bne.n	8002940 <HAL_I2C_Master_Receive+0x54>
 800293c:	2302      	movs	r3, #2
 800293e:	e237      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b01      	cmp	r3, #1
 8002954:	d007      	beq.n	8002966 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f042 0201 	orr.w	r2, r2, #1
 8002964:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002974:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2222      	movs	r2, #34	; 0x22
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2210      	movs	r2, #16
 8002982:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2200      	movs	r2, #0
 800298a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	893a      	ldrh	r2, [r7, #8]
 8002996:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4a5f      	ldr	r2, [pc, #380]	; (8002b24 <HAL_I2C_Master_Receive+0x238>)
 80029a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80029a8:	8979      	ldrh	r1, [r7, #10]
 80029aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 fa8a 	bl	8002ec8 <I2C_MasterRequestRead>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e1f8      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d113      	bne.n	80029ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	695b      	ldr	r3, [r3, #20]
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e1cc      	b.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d11e      	bne.n	8002a34 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a04:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a06:	b672      	cpsid	i
}
 8002a08:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	695b      	ldr	r3, [r3, #20]
 8002a14:	61bb      	str	r3, [r7, #24]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	61bb      	str	r3, [r7, #24]
 8002a1e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a30:	b662      	cpsie	i
}
 8002a32:	e035      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d11e      	bne.n	8002a7a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a4a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002a4c:	b672      	cpsid	i
}
 8002a4e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002a76:	b662      	cpsie	i
}
 8002a78:	e012      	b.n	8002aa0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002a88:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	613b      	str	r3, [r7, #16]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	613b      	str	r3, [r7, #16]
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	613b      	str	r3, [r7, #16]
 8002a9e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002aa0:	e172      	b.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa6:	2b03      	cmp	r3, #3
 8002aa8:	f200 811f 	bhi.w	8002cea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d123      	bne.n	8002afc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ab6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 fc7d 	bl	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d001      	beq.n	8002ac8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e173      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691a      	ldr	r2, [r3, #16]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad2:	b2d2      	uxtb	r2, r2
 8002ad4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ada:	1c5a      	adds	r2, r3, #1
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	3b01      	subs	r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002afa:	e145      	b.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	2b02      	cmp	r3, #2
 8002b02:	d152      	bne.n	8002baa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4906      	ldr	r1, [pc, #24]	; (8002b28 <HAL_I2C_Master_Receive+0x23c>)
 8002b0e:	68f8      	ldr	r0, [r7, #12]
 8002b10:	f000 faa8 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d008      	beq.n	8002b2c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e148      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
 8002b1e:	bf00      	nop
 8002b20:	00100002 	.word	0x00100002
 8002b24:	ffff0000 	.word	0xffff0000
 8002b28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002b2c:	b672      	cpsid	i
}
 8002b2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	691a      	ldr	r2, [r3, #16]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4a:	b2d2      	uxtb	r2, r2
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b52:	1c5a      	adds	r2, r3, #1
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b5c:	3b01      	subs	r3, #1
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	b29a      	uxth	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002b72:	b662      	cpsie	i
}
 8002b74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b80:	b2d2      	uxtb	r2, r2
 8002b82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b92:	3b01      	subs	r3, #1
 8002b94:	b29a      	uxth	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b9e:	b29b      	uxth	r3, r3
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ba8:	e0ee      	b.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4981      	ldr	r1, [pc, #516]	; (8002db8 <HAL_I2C_Master_Receive+0x4cc>)
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 fa55 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	e0f5      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681a      	ldr	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bd2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002bd4:	b672      	cpsid	i
}
 8002bd6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	b2d2      	uxtb	r2, r2
 8002be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bea:	1c5a      	adds	r2, r3, #1
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002c0a:	4b6c      	ldr	r3, [pc, #432]	; (8002dbc <HAL_I2C_Master_Receive+0x4d0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	08db      	lsrs	r3, r3, #3
 8002c10:	4a6b      	ldr	r2, [pc, #428]	; (8002dc0 <HAL_I2C_Master_Receive+0x4d4>)
 8002c12:	fba2 2303 	umull	r2, r3, r2, r3
 8002c16:	0a1a      	lsrs	r2, r3, #8
 8002c18:	4613      	mov	r3, r2
 8002c1a:	009b      	lsls	r3, r3, #2
 8002c1c:	4413      	add	r3, r2
 8002c1e:	00da      	lsls	r2, r3, #3
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002c2a:	6a3b      	ldr	r3, [r7, #32]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d118      	bne.n	8002c62 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f043 0220 	orr.w	r2, r3, #32
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002c52:	b662      	cpsie	i
}
 8002c54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0a6      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	695b      	ldr	r3, [r3, #20]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b04      	cmp	r3, #4
 8002c6e:	d1d9      	bne.n	8002c24 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691a      	ldr	r2, [r3, #16]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c8a:	b2d2      	uxtb	r2, r2
 8002c8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002cb2:	b662      	cpsie	i
}
 8002cb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	b2d2      	uxtb	r2, r2
 8002cc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ce8:	e04e      	b.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002cee:	68f8      	ldr	r0, [r7, #12]
 8002cf0:	f000 fb62 	bl	80033b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e058      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	3b01      	subs	r3, #1
 8002d2a:	b29a      	uxth	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	f003 0304 	and.w	r3, r3, #4
 8002d3a:	2b04      	cmp	r3, #4
 8002d3c:	d124      	bne.n	8002d88 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d42:	2b03      	cmp	r3, #3
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d54:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	691a      	ldr	r2, [r3, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d60:	b2d2      	uxtb	r2, r2
 8002d62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	1c5a      	adds	r2, r3, #1
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d72:	3b01      	subs	r3, #1
 8002d74:	b29a      	uxth	r2, r3
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d7e:	b29b      	uxth	r3, r3
 8002d80:	3b01      	subs	r3, #1
 8002d82:	b29a      	uxth	r2, r3
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f47f ae88 	bne.w	8002aa2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2220      	movs	r2, #32
 8002d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	e000      	b.n	8002db0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002dae:	2302      	movs	r3, #2
  }
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3728      	adds	r7, #40	; 0x28
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	00010004 	.word	0x00010004
 8002dbc:	20000004 	.word	0x20000004
 8002dc0:	14f8b589 	.word	0x14f8b589

08002dc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b088      	sub	sp, #32
 8002dc8:	af02      	add	r7, sp, #8
 8002dca:	60f8      	str	r0, [r7, #12]
 8002dcc:	607a      	str	r2, [r7, #4]
 8002dce:	603b      	str	r3, [r7, #0]
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d006      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d003      	beq.n	8002dee <I2C_MasterRequestWrite+0x2a>
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dfc:	601a      	str	r2, [r3, #0]
 8002dfe:	e00b      	b.n	8002e18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d107      	bne.n	8002e18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 f91d 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e3e:	d103      	bne.n	8002e48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e035      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e54:	d108      	bne.n	8002e68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002e56:	897b      	ldrh	r3, [r7, #10]
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002e64:	611a      	str	r2, [r3, #16]
 8002e66:	e01b      	b.n	8002ea0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e68:	897b      	ldrh	r3, [r7, #10]
 8002e6a:	11db      	asrs	r3, r3, #7
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0306 	and.w	r3, r3, #6
 8002e72:	b2db      	uxtb	r3, r3
 8002e74:	f063 030f 	orn	r3, r3, #15
 8002e78:	b2da      	uxtb	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	490e      	ldr	r1, [pc, #56]	; (8002ec0 <I2C_MasterRequestWrite+0xfc>)
 8002e86:	68f8      	ldr	r0, [r7, #12]
 8002e88:	f000 f966 	bl	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d001      	beq.n	8002e96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e010      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e96:	897b      	ldrh	r3, [r7, #10]
 8002e98:	b2da      	uxtb	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	4907      	ldr	r1, [pc, #28]	; (8002ec4 <I2C_MasterRequestWrite+0x100>)
 8002ea6:	68f8      	ldr	r0, [r7, #12]
 8002ea8:	f000 f956 	bl	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e000      	b.n	8002eb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002eb6:	2300      	movs	r3, #0
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3718      	adds	r7, #24
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	bd80      	pop	{r7, pc}
 8002ec0:	00010008 	.word	0x00010008
 8002ec4:	00010002 	.word	0x00010002

08002ec8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af02      	add	r7, sp, #8
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	607a      	str	r2, [r7, #4]
 8002ed2:	603b      	str	r3, [r7, #0]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002eec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d006      	beq.n	8002f02 <I2C_MasterRequestRead+0x3a>
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d003      	beq.n	8002f02 <I2C_MasterRequestRead+0x3a>
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f00:	d108      	bne.n	8002f14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f10:	601a      	str	r2, [r3, #0]
 8002f12:	e00b      	b.n	8002f2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f18:	2b11      	cmp	r3, #17
 8002f1a:	d107      	bne.n	8002f2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	9300      	str	r3, [sp, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f893 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d00d      	beq.n	8002f60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f52:	d103      	bne.n	8002f5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e079      	b.n	8003054 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f68:	d108      	bne.n	8002f7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002f6a:	897b      	ldrh	r3, [r7, #10]
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	b2da      	uxtb	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	611a      	str	r2, [r3, #16]
 8002f7a:	e05f      	b.n	800303c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002f7c:	897b      	ldrh	r3, [r7, #10]
 8002f7e:	11db      	asrs	r3, r3, #7
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 0306 	and.w	r3, r3, #6
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f063 030f 	orn	r3, r3, #15
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	4930      	ldr	r1, [pc, #192]	; (800305c <I2C_MasterRequestRead+0x194>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8dc 	bl	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e054      	b.n	8003054 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	687a      	ldr	r2, [r7, #4]
 8002fb8:	4929      	ldr	r1, [pc, #164]	; (8003060 <I2C_MasterRequestRead+0x198>)
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f8cc 	bl	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d001      	beq.n	8002fca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e044      	b.n	8003054 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002fca:	2300      	movs	r3, #0
 8002fcc:	613b      	str	r3, [r7, #16]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	613b      	str	r3, [r7, #16]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	613b      	str	r3, [r7, #16]
 8002fde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002fee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	9300      	str	r3, [sp, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ffc:	68f8      	ldr	r0, [r7, #12]
 8002ffe:	f000 f831 	bl	8003064 <I2C_WaitOnFlagUntilTimeout>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00d      	beq.n	8003024 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003016:	d103      	bne.n	8003020 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800301e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e017      	b.n	8003054 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003024:	897b      	ldrh	r3, [r7, #10]
 8003026:	11db      	asrs	r3, r3, #7
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0306 	and.w	r3, r3, #6
 800302e:	b2db      	uxtb	r3, r3
 8003030:	f063 030e 	orn	r3, r3, #14
 8003034:	b2da      	uxtb	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	687a      	ldr	r2, [r7, #4]
 8003040:	4907      	ldr	r1, [pc, #28]	; (8003060 <I2C_MasterRequestRead+0x198>)
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f888 	bl	8003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e000      	b.n	8003054 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	00010008 	.word	0x00010008
 8003060:	00010002 	.word	0x00010002

08003064 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003074:	e048      	b.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800307c:	d044      	beq.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307e:	f7fe fe69 	bl	8001d54 <HAL_GetTick>
 8003082:	4602      	mov	r2, r0
 8003084:	69bb      	ldr	r3, [r7, #24]
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	683a      	ldr	r2, [r7, #0]
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <I2C_WaitOnFlagUntilTimeout+0x30>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d139      	bne.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	0c1b      	lsrs	r3, r3, #16
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d10d      	bne.n	80030ba <I2C_WaitOnFlagUntilTimeout+0x56>
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	695b      	ldr	r3, [r3, #20]
 80030a4:	43da      	mvns	r2, r3
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	4013      	ands	r3, r2
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	bf0c      	ite	eq
 80030b0:	2301      	moveq	r3, #1
 80030b2:	2300      	movne	r3, #0
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	461a      	mov	r2, r3
 80030b8:	e00c      	b.n	80030d4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	699b      	ldr	r3, [r3, #24]
 80030c0:	43da      	mvns	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	4013      	ands	r3, r2
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	bf0c      	ite	eq
 80030cc:	2301      	moveq	r3, #1
 80030ce:	2300      	movne	r3, #0
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	461a      	mov	r2, r3
 80030d4:	79fb      	ldrb	r3, [r7, #7]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d116      	bne.n	8003108 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2200      	movs	r2, #0
 80030de:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2200      	movs	r2, #0
 80030ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0220 	orr.w	r2, r3, #32
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e023      	b.n	8003150 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	0c1b      	lsrs	r3, r3, #16
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b01      	cmp	r3, #1
 8003110:	d10d      	bne.n	800312e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	695b      	ldr	r3, [r3, #20]
 8003118:	43da      	mvns	r2, r3
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	4013      	ands	r3, r2
 800311e:	b29b      	uxth	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	bf0c      	ite	eq
 8003124:	2301      	moveq	r3, #1
 8003126:	2300      	movne	r3, #0
 8003128:	b2db      	uxtb	r3, r3
 800312a:	461a      	mov	r2, r3
 800312c:	e00c      	b.n	8003148 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	43da      	mvns	r2, r3
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	4013      	ands	r3, r2
 800313a:	b29b      	uxth	r3, r3
 800313c:	2b00      	cmp	r3, #0
 800313e:	bf0c      	ite	eq
 8003140:	2301      	moveq	r3, #1
 8003142:	2300      	movne	r3, #0
 8003144:	b2db      	uxtb	r3, r3
 8003146:	461a      	mov	r2, r3
 8003148:	79fb      	ldrb	r3, [r7, #7]
 800314a:	429a      	cmp	r2, r3
 800314c:	d093      	beq.n	8003076 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3710      	adds	r7, #16
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	60f8      	str	r0, [r7, #12]
 8003160:	60b9      	str	r1, [r7, #8]
 8003162:	607a      	str	r2, [r7, #4]
 8003164:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003166:	e071      	b.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003176:	d123      	bne.n	80031c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003186:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003190:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	2220      	movs	r2, #32
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f043 0204 	orr.w	r2, r3, #4
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2200      	movs	r2, #0
 80031b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e067      	b.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d041      	beq.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031c8:	f7fe fdc4 	bl	8001d54 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d302      	bcc.n	80031de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d136      	bne.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d10c      	bne.n	8003202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	43da      	mvns	r2, r3
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	4013      	ands	r3, r2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	bf14      	ite	ne
 80031fa:	2301      	movne	r3, #1
 80031fc:	2300      	moveq	r3, #0
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e00b      	b.n	800321a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	699b      	ldr	r3, [r3, #24]
 8003208:	43da      	mvns	r2, r3
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	4013      	ands	r3, r2
 800320e:	b29b      	uxth	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	bf14      	ite	ne
 8003214:	2301      	movne	r3, #1
 8003216:	2300      	moveq	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2220      	movs	r2, #32
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e021      	b.n	8003290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	0c1b      	lsrs	r3, r3, #16
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10c      	bne.n	8003270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695b      	ldr	r3, [r3, #20]
 800325c:	43da      	mvns	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4013      	ands	r3, r2
 8003262:	b29b      	uxth	r3, r3
 8003264:	2b00      	cmp	r3, #0
 8003266:	bf14      	ite	ne
 8003268:	2301      	movne	r3, #1
 800326a:	2300      	moveq	r3, #0
 800326c:	b2db      	uxtb	r3, r3
 800326e:	e00b      	b.n	8003288 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	43da      	mvns	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	4013      	ands	r3, r2
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	bf14      	ite	ne
 8003282:	2301      	movne	r3, #1
 8003284:	2300      	moveq	r3, #0
 8003286:	b2db      	uxtb	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	f47f af6d 	bne.w	8003168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800328e:	2300      	movs	r3, #0
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b084      	sub	sp, #16
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032a4:	e034      	b.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f8e3 	bl	8003472 <I2C_IsAcknowledgeFailed>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d001      	beq.n	80032b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e034      	b.n	8003320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032bc:	d028      	beq.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032be:	f7fe fd49 	bl	8001d54 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d302      	bcc.n	80032d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d11d      	bne.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032de:	2b80      	cmp	r3, #128	; 0x80
 80032e0:	d016      	beq.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	f043 0220 	orr.w	r2, r3, #32
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e007      	b.n	8003320 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b80      	cmp	r3, #128	; 0x80
 800331c:	d1c3      	bne.n	80032a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800331e:	2300      	movs	r3, #0
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b084      	sub	sp, #16
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003334:	e034      	b.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003336:	68f8      	ldr	r0, [r7, #12]
 8003338:	f000 f89b 	bl	8003472 <I2C_IsAcknowledgeFailed>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e034      	b.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334c:	d028      	beq.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800334e:	f7fe fd01 	bl	8001d54 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	68ba      	ldr	r2, [r7, #8]
 800335a:	429a      	cmp	r2, r3
 800335c:	d302      	bcc.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11d      	bne.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	f003 0304 	and.w	r3, r3, #4
 800336e:	2b04      	cmp	r3, #4
 8003370:	d016      	beq.n	80033a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2220      	movs	r2, #32
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338c:	f043 0220 	orr.w	r2, r3, #32
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e007      	b.n	80033b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	695b      	ldr	r3, [r3, #20]
 80033a6:	f003 0304 	and.w	r3, r3, #4
 80033aa:	2b04      	cmp	r3, #4
 80033ac:	d1c3      	bne.n	8003336 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3710      	adds	r7, #16
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80033c4:	e049      	b.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	f003 0310 	and.w	r3, r3, #16
 80033d0:	2b10      	cmp	r3, #16
 80033d2:	d119      	bne.n	8003408 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f06f 0210 	mvn.w	r2, #16
 80033dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e030      	b.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003408:	f7fe fca4 	bl	8001d54 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	429a      	cmp	r2, r3
 8003416:	d302      	bcc.n	800341e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d11d      	bne.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	695b      	ldr	r3, [r3, #20]
 8003424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003428:	2b40      	cmp	r3, #64	; 0x40
 800342a:	d016      	beq.n	800345a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2200      	movs	r2, #0
 8003430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f043 0220 	orr.w	r2, r3, #32
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e007      	b.n	800346a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	695b      	ldr	r3, [r3, #20]
 8003460:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d1ae      	bne.n	80033c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003468:	2300      	movs	r3, #0
}
 800346a:	4618      	mov	r0, r3
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003488:	d11b      	bne.n	80034c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003492:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2220      	movs	r2, #32
 800349e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ae:	f043 0204 	orr.w	r2, r3, #4
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bc80      	pop	{r7}
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d101      	bne.n	80034e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e272      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	f000 8087 	beq.w	80035fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f0:	4b92      	ldr	r3, [pc, #584]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 030c 	and.w	r3, r3, #12
 80034f8:	2b04      	cmp	r3, #4
 80034fa:	d00c      	beq.n	8003516 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80034fc:	4b8f      	ldr	r3, [pc, #572]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f003 030c 	and.w	r3, r3, #12
 8003504:	2b08      	cmp	r3, #8
 8003506:	d112      	bne.n	800352e <HAL_RCC_OscConfig+0x5e>
 8003508:	4b8c      	ldr	r3, [pc, #560]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003514:	d10b      	bne.n	800352e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003516:	4b89      	ldr	r3, [pc, #548]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d06c      	beq.n	80035fc <HAL_RCC_OscConfig+0x12c>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d168      	bne.n	80035fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e24c      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003536:	d106      	bne.n	8003546 <HAL_RCC_OscConfig+0x76>
 8003538:	4b80      	ldr	r3, [pc, #512]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a7f      	ldr	r2, [pc, #508]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003542:	6013      	str	r3, [r2, #0]
 8003544:	e02e      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d10c      	bne.n	8003568 <HAL_RCC_OscConfig+0x98>
 800354e:	4b7b      	ldr	r3, [pc, #492]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a7a      	ldr	r2, [pc, #488]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003554:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	4b78      	ldr	r3, [pc, #480]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a77      	ldr	r2, [pc, #476]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003560:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003564:	6013      	str	r3, [r2, #0]
 8003566:	e01d      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003570:	d10c      	bne.n	800358c <HAL_RCC_OscConfig+0xbc>
 8003572:	4b72      	ldr	r3, [pc, #456]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a71      	ldr	r2, [pc, #452]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003578:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	4b6f      	ldr	r3, [pc, #444]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a6e      	ldr	r2, [pc, #440]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003588:	6013      	str	r3, [r2, #0]
 800358a:	e00b      	b.n	80035a4 <HAL_RCC_OscConfig+0xd4>
 800358c:	4b6b      	ldr	r3, [pc, #428]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a6a      	ldr	r2, [pc, #424]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003596:	6013      	str	r3, [r2, #0]
 8003598:	4b68      	ldr	r3, [pc, #416]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a67      	ldr	r2, [pc, #412]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800359e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d013      	beq.n	80035d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fbd2 	bl	8001d54 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b4:	f7fe fbce 	bl	8001d54 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b64      	cmp	r3, #100	; 0x64
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e200      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c6:	4b5d      	ldr	r3, [pc, #372]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0xe4>
 80035d2:	e014      	b.n	80035fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d4:	f7fe fbbe 	bl	8001d54 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035da:	e008      	b.n	80035ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035dc:	f7fe fbba 	bl	8001d54 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b64      	cmp	r3, #100	; 0x64
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1ec      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ee:	4b53      	ldr	r3, [pc, #332]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d1f0      	bne.n	80035dc <HAL_RCC_OscConfig+0x10c>
 80035fa:	e000      	b.n	80035fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0302 	and.w	r3, r3, #2
 8003606:	2b00      	cmp	r3, #0
 8003608:	d063      	beq.n	80036d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360a:	4b4c      	ldr	r3, [pc, #304]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	f003 030c 	and.w	r3, r3, #12
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00b      	beq.n	800362e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003616:	4b49      	ldr	r3, [pc, #292]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f003 030c 	and.w	r3, r3, #12
 800361e:	2b08      	cmp	r3, #8
 8003620:	d11c      	bne.n	800365c <HAL_RCC_OscConfig+0x18c>
 8003622:	4b46      	ldr	r3, [pc, #280]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d116      	bne.n	800365c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362e:	4b43      	ldr	r3, [pc, #268]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0302 	and.w	r3, r3, #2
 8003636:	2b00      	cmp	r3, #0
 8003638:	d005      	beq.n	8003646 <HAL_RCC_OscConfig+0x176>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d001      	beq.n	8003646 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e1c0      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003646:	4b3d      	ldr	r3, [pc, #244]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	695b      	ldr	r3, [r3, #20]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	4939      	ldr	r1, [pc, #228]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365a:	e03a      	b.n	80036d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d020      	beq.n	80036a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003664:	4b36      	ldr	r3, [pc, #216]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 8003666:	2201      	movs	r2, #1
 8003668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366a:	f7fe fb73 	bl	8001d54 <HAL_GetTick>
 800366e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003670:	e008      	b.n	8003684 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003672:	f7fe fb6f 	bl	8001d54 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	1ad3      	subs	r3, r2, r3
 800367c:	2b02      	cmp	r3, #2
 800367e:	d901      	bls.n	8003684 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003680:	2303      	movs	r3, #3
 8003682:	e1a1      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0302 	and.w	r3, r3, #2
 800368c:	2b00      	cmp	r3, #0
 800368e:	d0f0      	beq.n	8003672 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003690:	4b2a      	ldr	r3, [pc, #168]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	00db      	lsls	r3, r3, #3
 800369e:	4927      	ldr	r1, [pc, #156]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]
 80036a4:	e015      	b.n	80036d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a6:	4b26      	ldr	r3, [pc, #152]	; (8003740 <HAL_RCC_OscConfig+0x270>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ac:	f7fe fb52 	bl	8001d54 <HAL_GetTick>
 80036b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b2:	e008      	b.n	80036c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b4:	f7fe fb4e 	bl	8001d54 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	1ad3      	subs	r3, r2, r3
 80036be:	2b02      	cmp	r3, #2
 80036c0:	d901      	bls.n	80036c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036c2:	2303      	movs	r3, #3
 80036c4:	e180      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1f0      	bne.n	80036b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f003 0308 	and.w	r3, r3, #8
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d03a      	beq.n	8003754 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d019      	beq.n	800371a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e6:	4b17      	ldr	r3, [pc, #92]	; (8003744 <HAL_RCC_OscConfig+0x274>)
 80036e8:	2201      	movs	r2, #1
 80036ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ec:	f7fe fb32 	bl	8001d54 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f4:	f7fe fb2e 	bl	8001d54 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b02      	cmp	r3, #2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e160      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003706:	4b0d      	ldr	r3, [pc, #52]	; (800373c <HAL_RCC_OscConfig+0x26c>)
 8003708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003712:	2001      	movs	r0, #1
 8003714:	f000 face 	bl	8003cb4 <RCC_Delay>
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371a:	4b0a      	ldr	r3, [pc, #40]	; (8003744 <HAL_RCC_OscConfig+0x274>)
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003720:	f7fe fb18 	bl	8001d54 <HAL_GetTick>
 8003724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003726:	e00f      	b.n	8003748 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003728:	f7fe fb14 	bl	8001d54 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b02      	cmp	r3, #2
 8003734:	d908      	bls.n	8003748 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003736:	2303      	movs	r3, #3
 8003738:	e146      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	42420000 	.word	0x42420000
 8003744:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b92      	ldr	r3, [pc, #584]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1e9      	bne.n	8003728 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a6 	beq.w	80038ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b8b      	ldr	r3, [pc, #556]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003768:	69db      	ldr	r3, [r3, #28]
 800376a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10d      	bne.n	800378e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	4b88      	ldr	r3, [pc, #544]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	4a87      	ldr	r2, [pc, #540]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800377c:	61d3      	str	r3, [r2, #28]
 800377e:	4b85      	ldr	r3, [pc, #532]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	69db      	ldr	r3, [r3, #28]
 8003782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003786:	60bb      	str	r3, [r7, #8]
 8003788:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378a:	2301      	movs	r3, #1
 800378c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b82      	ldr	r3, [pc, #520]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d118      	bne.n	80037cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379a:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	4a7e      	ldr	r2, [pc, #504]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 80037a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037a6:	f7fe fad5 	bl	8001d54 <HAL_GetTick>
 80037aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037ac:	e008      	b.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037ae:	f7fe fad1 	bl	8001d54 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b64      	cmp	r3, #100	; 0x64
 80037ba:	d901      	bls.n	80037c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e103      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c0:	4b75      	ldr	r3, [pc, #468]	; (8003998 <HAL_RCC_OscConfig+0x4c8>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d0f0      	beq.n	80037ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d106      	bne.n	80037e2 <HAL_RCC_OscConfig+0x312>
 80037d4:	4b6f      	ldr	r3, [pc, #444]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037d6:	6a1b      	ldr	r3, [r3, #32]
 80037d8:	4a6e      	ldr	r2, [pc, #440]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	f043 0301 	orr.w	r3, r3, #1
 80037de:	6213      	str	r3, [r2, #32]
 80037e0:	e02d      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d10c      	bne.n	8003804 <HAL_RCC_OscConfig+0x334>
 80037ea:	4b6a      	ldr	r3, [pc, #424]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	6a1b      	ldr	r3, [r3, #32]
 80037ee:	4a69      	ldr	r2, [pc, #420]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	f023 0301 	bic.w	r3, r3, #1
 80037f4:	6213      	str	r3, [r2, #32]
 80037f6:	4b67      	ldr	r3, [pc, #412]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037f8:	6a1b      	ldr	r3, [r3, #32]
 80037fa:	4a66      	ldr	r2, [pc, #408]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	f023 0304 	bic.w	r3, r3, #4
 8003800:	6213      	str	r3, [r2, #32]
 8003802:	e01c      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b05      	cmp	r3, #5
 800380a:	d10c      	bne.n	8003826 <HAL_RCC_OscConfig+0x356>
 800380c:	4b61      	ldr	r3, [pc, #388]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	4a60      	ldr	r2, [pc, #384]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	f043 0304 	orr.w	r3, r3, #4
 8003816:	6213      	str	r3, [r2, #32]
 8003818:	4b5e      	ldr	r3, [pc, #376]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	4a5d      	ldr	r2, [pc, #372]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	f043 0301 	orr.w	r3, r3, #1
 8003822:	6213      	str	r3, [r2, #32]
 8003824:	e00b      	b.n	800383e <HAL_RCC_OscConfig+0x36e>
 8003826:	4b5b      	ldr	r3, [pc, #364]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	4a5a      	ldr	r2, [pc, #360]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	6213      	str	r3, [r2, #32]
 8003832:	4b58      	ldr	r3, [pc, #352]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	4a57      	ldr	r2, [pc, #348]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	f023 0304 	bic.w	r3, r3, #4
 800383c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d015      	beq.n	8003872 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003846:	f7fe fa85 	bl	8001d54 <HAL_GetTick>
 800384a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800384c:	e00a      	b.n	8003864 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800384e:	f7fe fa81 	bl	8001d54 <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	f241 3288 	movw	r2, #5000	; 0x1388
 800385c:	4293      	cmp	r3, r2
 800385e:	d901      	bls.n	8003864 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e0b1      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003864:	4b4b      	ldr	r3, [pc, #300]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b00      	cmp	r3, #0
 800386e:	d0ee      	beq.n	800384e <HAL_RCC_OscConfig+0x37e>
 8003870:	e014      	b.n	800389c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003872:	f7fe fa6f 	bl	8001d54 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003878:	e00a      	b.n	8003890 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387a:	f7fe fa6b 	bl	8001d54 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	f241 3288 	movw	r2, #5000	; 0x1388
 8003888:	4293      	cmp	r3, r2
 800388a:	d901      	bls.n	8003890 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800388c:	2303      	movs	r3, #3
 800388e:	e09b      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003890:	4b40      	ldr	r3, [pc, #256]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003892:	6a1b      	ldr	r3, [r3, #32]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1ee      	bne.n	800387a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800389c:	7dfb      	ldrb	r3, [r7, #23]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d105      	bne.n	80038ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a2:	4b3c      	ldr	r3, [pc, #240]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038a4:	69db      	ldr	r3, [r3, #28]
 80038a6:	4a3b      	ldr	r2, [pc, #236]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69db      	ldr	r3, [r3, #28]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	f000 8087 	beq.w	80039c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038b8:	4b36      	ldr	r3, [pc, #216]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 030c 	and.w	r3, r3, #12
 80038c0:	2b08      	cmp	r3, #8
 80038c2:	d061      	beq.n	8003988 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	69db      	ldr	r3, [r3, #28]
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d146      	bne.n	800395a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038cc:	4b33      	ldr	r3, [pc, #204]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d2:	f7fe fa3f 	bl	8001d54 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038da:	f7fe fa3b 	bl	8001d54 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e06d      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038ec:	4b29      	ldr	r3, [pc, #164]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6a1b      	ldr	r3, [r3, #32]
 80038fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003900:	d108      	bne.n	8003914 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003902:	4b24      	ldr	r3, [pc, #144]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	4921      	ldr	r1, [pc, #132]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003910:	4313      	orrs	r3, r2
 8003912:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003914:	4b1f      	ldr	r3, [pc, #124]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a19      	ldr	r1, [r3, #32]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	430b      	orrs	r3, r1
 8003926:	491b      	ldr	r1, [pc, #108]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 8003928:	4313      	orrs	r3, r2
 800392a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800392c:	4b1b      	ldr	r3, [pc, #108]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 800392e:	2201      	movs	r2, #1
 8003930:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003932:	f7fe fa0f 	bl	8001d54 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393a:	f7fe fa0b 	bl	8001d54 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e03d      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d0f0      	beq.n	800393a <HAL_RCC_OscConfig+0x46a>
 8003958:	e035      	b.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395a:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_RCC_OscConfig+0x4cc>)
 800395c:	2200      	movs	r2, #0
 800395e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003960:	f7fe f9f8 	bl	8001d54 <HAL_GetTick>
 8003964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003966:	e008      	b.n	800397a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003968:	f7fe f9f4 	bl	8001d54 <HAL_GetTick>
 800396c:	4602      	mov	r2, r0
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	2b02      	cmp	r3, #2
 8003974:	d901      	bls.n	800397a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e026      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	; (8003994 <HAL_RCC_OscConfig+0x4c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d1f0      	bne.n	8003968 <HAL_RCC_OscConfig+0x498>
 8003986:	e01e      	b.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	69db      	ldr	r3, [r3, #28]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d107      	bne.n	80039a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e019      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
 8003994:	40021000 	.word	0x40021000
 8003998:	40007000 	.word	0x40007000
 800399c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a0:	4b0b      	ldr	r3, [pc, #44]	; (80039d0 <HAL_RCC_OscConfig+0x500>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a1b      	ldr	r3, [r3, #32]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d106      	bne.n	80039c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039be:	429a      	cmp	r2, r3
 80039c0:	d001      	beq.n	80039c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e000      	b.n	80039c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40021000 	.word	0x40021000

080039d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e0d0      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e8:	4b6a      	ldr	r3, [pc, #424]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d910      	bls.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039f6:	4b67      	ldr	r3, [pc, #412]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f023 0207 	bic.w	r2, r3, #7
 80039fe:	4965      	ldr	r1, [pc, #404]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a06:	4b63      	ldr	r3, [pc, #396]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d001      	beq.n	8003a18 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a14:	2301      	movs	r3, #1
 8003a16:	e0b8      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d020      	beq.n	8003a66 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d005      	beq.n	8003a3c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a30:	4b59      	ldr	r3, [pc, #356]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	4a58      	ldr	r2, [pc, #352]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a3a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0308 	and.w	r3, r3, #8
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a48:	4b53      	ldr	r3, [pc, #332]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	4a52      	ldr	r2, [pc, #328]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a52:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a54:	4b50      	ldr	r3, [pc, #320]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	494d      	ldr	r1, [pc, #308]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d040      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d107      	bne.n	8003a8a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7a:	4b47      	ldr	r3, [pc, #284]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d115      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e07f      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d107      	bne.n	8003aa2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a92:	4b41      	ldr	r3, [pc, #260]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e073      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa2:	4b3d      	ldr	r3, [pc, #244]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e06b      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab2:	4b39      	ldr	r3, [pc, #228]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f023 0203 	bic.w	r2, r3, #3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	4936      	ldr	r1, [pc, #216]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac4:	f7fe f946 	bl	8001d54 <HAL_GetTick>
 8003ac8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aca:	e00a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003acc:	f7fe f942 	bl	8001d54 <HAL_GetTick>
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	1ad3      	subs	r3, r2, r3
 8003ad6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d901      	bls.n	8003ae2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ade:	2303      	movs	r3, #3
 8003ae0:	e053      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	4b2d      	ldr	r3, [pc, #180]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	f003 020c 	and.w	r2, r3, #12
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	009b      	lsls	r3, r3, #2
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1eb      	bne.n	8003acc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af4:	4b27      	ldr	r3, [pc, #156]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0307 	and.w	r3, r3, #7
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d210      	bcs.n	8003b24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b24      	ldr	r3, [pc, #144]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f023 0207 	bic.w	r2, r3, #7
 8003b0a:	4922      	ldr	r1, [pc, #136]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b12:	4b20      	ldr	r3, [pc, #128]	; (8003b94 <HAL_RCC_ClockConfig+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d001      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e032      	b.n	8003b8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d008      	beq.n	8003b42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b30:	4b19      	ldr	r3, [pc, #100]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	4916      	ldr	r1, [pc, #88]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	00db      	lsls	r3, r3, #3
 8003b5c:	490e      	ldr	r1, [pc, #56]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b62:	f000 f821 	bl	8003ba8 <HAL_RCC_GetSysClockFreq>
 8003b66:	4602      	mov	r2, r0
 8003b68:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <HAL_RCC_ClockConfig+0x1c4>)
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	f003 030f 	and.w	r3, r3, #15
 8003b72:	490a      	ldr	r1, [pc, #40]	; (8003b9c <HAL_RCC_ClockConfig+0x1c8>)
 8003b74:	5ccb      	ldrb	r3, [r1, r3]
 8003b76:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <HAL_RCC_ClockConfig+0x1cc>)
 8003b7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b7e:	4b09      	ldr	r3, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1d0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4618      	mov	r0, r3
 8003b84:	f7fe f8a4 	bl	8001cd0 <HAL_InitTick>

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40022000 	.word	0x40022000
 8003b98:	40021000 	.word	0x40021000
 8003b9c:	08007864 	.word	0x08007864
 8003ba0:	20000004 	.word	0x20000004
 8003ba4:	20000008 	.word	0x20000008

08003ba8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bc2:	4b1e      	ldr	r3, [pc, #120]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	f003 030c 	and.w	r3, r3, #12
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d002      	beq.n	8003bd8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bd2:	2b08      	cmp	r3, #8
 8003bd4:	d003      	beq.n	8003bde <HAL_RCC_GetSysClockFreq+0x36>
 8003bd6:	e027      	b.n	8003c28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bd8:	4b19      	ldr	r3, [pc, #100]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bda:	613b      	str	r3, [r7, #16]
      break;
 8003bdc:	e027      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	0c9b      	lsrs	r3, r3, #18
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	4a17      	ldr	r2, [pc, #92]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003be8:	5cd3      	ldrb	r3, [r2, r3]
 8003bea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d010      	beq.n	8003c18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bf6:	4b11      	ldr	r3, [pc, #68]	; (8003c3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	0c5b      	lsrs	r3, r3, #17
 8003bfc:	f003 0301 	and.w	r3, r3, #1
 8003c00:	4a11      	ldr	r2, [pc, #68]	; (8003c48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c02:	5cd3      	ldrb	r3, [r2, r3]
 8003c04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a0d      	ldr	r2, [pc, #52]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0a:	fb03 f202 	mul.w	r2, r3, r2
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c14:	617b      	str	r3, [r7, #20]
 8003c16:	e004      	b.n	8003c22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a0c      	ldr	r2, [pc, #48]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c1c:	fb02 f303 	mul.w	r3, r2, r3
 8003c20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	613b      	str	r3, [r7, #16]
      break;
 8003c26:	e002      	b.n	8003c2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2a:	613b      	str	r3, [r7, #16]
      break;
 8003c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c2e:	693b      	ldr	r3, [r7, #16]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	371c      	adds	r7, #28
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bc80      	pop	{r7}
 8003c38:	4770      	bx	lr
 8003c3a:	bf00      	nop
 8003c3c:	40021000 	.word	0x40021000
 8003c40:	007a1200 	.word	0x007a1200
 8003c44:	0800787c 	.word	0x0800787c
 8003c48:	0800788c 	.word	0x0800788c
 8003c4c:	003d0900 	.word	0x003d0900

08003c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c50:	b480      	push	{r7}
 8003c52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c54:	4b02      	ldr	r3, [pc, #8]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c56:	681b      	ldr	r3, [r3, #0]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	20000004 	.word	0x20000004

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff2 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08007874 	.word	0x08007874

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffde 	bl	8003c50 <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	0adb      	lsrs	r3, r3, #11
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	08007874 	.word	0x08007874

08003cb4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003cbc:	4b0a      	ldr	r3, [pc, #40]	; (8003ce8 <RCC_Delay+0x34>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <RCC_Delay+0x38>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0a5b      	lsrs	r3, r3, #9
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	fb02 f303 	mul.w	r3, r2, r3
 8003cce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cd0:	bf00      	nop
  }
  while (Delay --);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	1e5a      	subs	r2, r3, #1
 8003cd6:	60fa      	str	r2, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f9      	bne.n	8003cd0 <RCC_Delay+0x1c>
}
 8003cdc:	bf00      	nop
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bc80      	pop	{r7}
 8003ce6:	4770      	bx	lr
 8003ce8:	20000004 	.word	0x20000004
 8003cec:	10624dd3 	.word	0x10624dd3

08003cf0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e042      	b.n	8003d88 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d106      	bne.n	8003d1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7fd fe54 	bl	80019c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2224      	movs	r2, #36	; 0x24
 8003d20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68da      	ldr	r2, [r3, #12]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fdc5 	bl	80048c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	695a      	ldr	r2, [r3, #20]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68da      	ldr	r2, [r3, #12]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2220      	movs	r2, #32
 8003d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b08a      	sub	sp, #40	; 0x28
 8003d94:	af02      	add	r7, sp, #8
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	603b      	str	r3, [r7, #0]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003da0:	2300      	movs	r3, #0
 8003da2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003daa:	b2db      	uxtb	r3, r3
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	d16d      	bne.n	8003e8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d002      	beq.n	8003dbc <HAL_UART_Transmit+0x2c>
 8003db6:	88fb      	ldrh	r3, [r7, #6]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e066      	b.n	8003e8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2221      	movs	r2, #33	; 0x21
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dce:	f7fd ffc1 	bl	8001d54 <HAL_GetTick>
 8003dd2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	88fa      	ldrh	r2, [r7, #6]
 8003dde:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003de8:	d108      	bne.n	8003dfc <HAL_UART_Transmit+0x6c>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	691b      	ldr	r3, [r3, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d104      	bne.n	8003dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003df2:	2300      	movs	r3, #0
 8003df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	e003      	b.n	8003e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e00:	2300      	movs	r3, #0
 8003e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003e04:	e02a      	b.n	8003e5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	2180      	movs	r1, #128	; 0x80
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f000 fb14 	bl	800443e <UART_WaitOnFlagUntilTimeout>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e036      	b.n	8003e8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d10b      	bne.n	8003e3e <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e34:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	3302      	adds	r3, #2
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	e007      	b.n	8003e4e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e3e:	69fb      	ldr	r3, [r7, #28]
 8003e40:	781a      	ldrb	r2, [r3, #0]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	3b01      	subs	r3, #1
 8003e56:	b29a      	uxth	r2, r3
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e60:	b29b      	uxth	r3, r3
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d1cf      	bne.n	8003e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	9300      	str	r3, [sp, #0]
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2140      	movs	r1, #64	; 0x40
 8003e70:	68f8      	ldr	r0, [r7, #12]
 8003e72:	f000 fae4 	bl	800443e <UART_WaitOnFlagUntilTimeout>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003e7c:	2303      	movs	r3, #3
 8003e7e:	e006      	b.n	8003e8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	e000      	b.n	8003e8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e8c:	2302      	movs	r3, #2
  }
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3720      	adds	r7, #32
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e96:	b580      	push	{r7, lr}
 8003e98:	b084      	sub	sp, #16
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	60f8      	str	r0, [r7, #12]
 8003e9e:	60b9      	str	r1, [r7, #8]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d112      	bne.n	8003ed6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Receive_IT+0x26>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e00b      	b.n	8003ed8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ec6:	88fb      	ldrh	r3, [r7, #6]
 8003ec8:	461a      	mov	r2, r3
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f000 fb24 	bl	800451a <UART_Start_Receive_IT>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	e000      	b.n	8003ed8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003ed6:	2302      	movs	r3, #2
  }
}
 8003ed8:	4618      	mov	r0, r3
 8003eda:	3710      	adds	r7, #16
 8003edc:	46bd      	mov	sp, r7
 8003ede:	bd80      	pop	{r7, pc}

08003ee0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b0ba      	sub	sp, #232	; 0xe8
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003f1e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d10f      	bne.n	8003f46 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d009      	beq.n	8003f46 <HAL_UART_IRQHandler+0x66>
 8003f32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fc01 	bl	8004746 <UART_Receive_IT>
      return;
 8003f44:	e25b      	b.n	80043fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003f46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	f000 80de 	beq.w	800410c <HAL_UART_IRQHandler+0x22c>
 8003f50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f60:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80d1 	beq.w	800410c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d00b      	beq.n	8003f8e <HAL_UART_IRQHandler+0xae>
 8003f76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d005      	beq.n	8003f8e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f86:	f043 0201 	orr.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f92:	f003 0304 	and.w	r3, r3, #4
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00b      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xd2>
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003faa:	f043 0202 	orr.w	r2, r3, #2
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003fb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fb6:	f003 0302 	and.w	r3, r3, #2
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d00b      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xf6>
 8003fbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d005      	beq.n	8003fd6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	f043 0204 	orr.w	r2, r3, #4
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fda:	f003 0308 	and.w	r3, r3, #8
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d011      	beq.n	8004006 <HAL_UART_IRQHandler+0x126>
 8003fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fe6:	f003 0320 	and.w	r3, r3, #32
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d105      	bne.n	8003ffa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003fee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ff2:	f003 0301 	and.w	r3, r3, #1
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d005      	beq.n	8004006 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ffe:	f043 0208 	orr.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400a:	2b00      	cmp	r3, #0
 800400c:	f000 81f2 	beq.w	80043f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004010:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_UART_IRQHandler+0x14e>
 800401c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004020:	f003 0320 	and.w	r3, r3, #32
 8004024:	2b00      	cmp	r3, #0
 8004026:	d002      	beq.n	800402e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f000 fb8c 	bl	8004746 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	695b      	ldr	r3, [r3, #20]
 8004034:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004038:	2b00      	cmp	r3, #0
 800403a:	bf14      	ite	ne
 800403c:	2301      	movne	r3, #1
 800403e:	2300      	moveq	r3, #0
 8004040:	b2db      	uxtb	r3, r3
 8004042:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <HAL_UART_IRQHandler+0x17a>
 8004052:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004056:	2b00      	cmp	r3, #0
 8004058:	d04f      	beq.n	80040fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 fa96 	bl	800458c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406a:	2b00      	cmp	r3, #0
 800406c:	d041      	beq.n	80040f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004078:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800407c:	e853 3f00 	ldrex	r3, [r3]
 8004080:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004084:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004088:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800408c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	3314      	adds	r3, #20
 8004096:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800409a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800409e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040aa:	e841 2300 	strex	r3, r2, [r1]
 80040ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1d9      	bne.n	800406e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d013      	beq.n	80040ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c6:	4a7e      	ldr	r2, [pc, #504]	; (80042c0 <HAL_UART_IRQHandler+0x3e0>)
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7fd ffb6 	bl	8002040 <HAL_DMA_Abort_IT>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d016      	beq.n	8004108 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040e0:	687a      	ldr	r2, [r7, #4]
 80040e2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80040e4:	4610      	mov	r0, r2
 80040e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040e8:	e00e      	b.n	8004108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f993 	bl	8004416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f0:	e00a      	b.n	8004108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f98f 	bl	8004416 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f8:	e006      	b.n	8004108 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f98b 	bl	8004416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004106:	e175      	b.n	80043f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	bf00      	nop
    return;
 800410a:	e173      	b.n	80043f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004110:	2b01      	cmp	r3, #1
 8004112:	f040 814f 	bne.w	80043b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004116:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411a:	f003 0310 	and.w	r3, r3, #16
 800411e:	2b00      	cmp	r3, #0
 8004120:	f000 8148 	beq.w	80043b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004128:	f003 0310 	and.w	r3, r3, #16
 800412c:	2b00      	cmp	r3, #0
 800412e:	f000 8141 	beq.w	80043b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004132:	2300      	movs	r3, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	60bb      	str	r3, [r7, #8]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60bb      	str	r3, [r7, #8]
 8004146:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	695b      	ldr	r3, [r3, #20]
 800414e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80b6 	beq.w	80042c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004164:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8145 	beq.w	80043f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004172:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004176:	429a      	cmp	r2, r3
 8004178:	f080 813e 	bcs.w	80043f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004182:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	2b20      	cmp	r3, #32
 800418c:	f000 8088 	beq.w	80042a0 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	330c      	adds	r3, #12
 8004196:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800419e:	e853 3f00 	ldrex	r3, [r3]
 80041a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80041bc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80041c0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041c8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80041cc:	e841 2300 	strex	r3, r2, [r1]
 80041d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80041d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1d9      	bne.n	8004190 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	3314      	adds	r3, #20
 80041e2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80041ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80041ee:	f023 0301 	bic.w	r3, r3, #1
 80041f2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3314      	adds	r3, #20
 80041fc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004200:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004204:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004206:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004208:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800420c:	e841 2300 	strex	r3, r2, [r1]
 8004210:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004212:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e1      	bne.n	80041dc <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3314      	adds	r3, #20
 800421e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004220:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004222:	e853 3f00 	ldrex	r3, [r3]
 8004226:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004228:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800422a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800422e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800423c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800423e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004242:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800424a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e3      	bne.n	8004218 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800426e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004270:	f023 0310 	bic.w	r3, r3, #16
 8004274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	330c      	adds	r3, #12
 800427e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004282:	65ba      	str	r2, [r7, #88]	; 0x58
 8004284:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004286:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004288:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800428a:	e841 2300 	strex	r3, r2, [r1]
 800428e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004290:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1e3      	bne.n	800425e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800429a:	4618      	mov	r0, r3
 800429c:	f7fd fe95 	bl	8001fca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	4619      	mov	r1, r3
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 f8b6 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042bc:	e09c      	b.n	80043f8 <HAL_UART_IRQHandler+0x518>
 80042be:	bf00      	nop
 80042c0:	08004651 	.word	0x08004651
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	1ad3      	subs	r3, r2, r3
 80042d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80042d8:	b29b      	uxth	r3, r3
 80042da:	2b00      	cmp	r3, #0
 80042dc:	f000 808e 	beq.w	80043fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80042e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f000 8089 	beq.w	80043fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004300:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	330c      	adds	r3, #12
 800430a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800430e:	647a      	str	r2, [r7, #68]	; 0x44
 8004310:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004312:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004314:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004316:	e841 2300 	strex	r3, r2, [r1]
 800431a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800431c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1e3      	bne.n	80042ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3314      	adds	r3, #20
 8004328:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	623b      	str	r3, [r7, #32]
   return(result);
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f023 0301 	bic.w	r3, r3, #1
 8004338:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	3314      	adds	r3, #20
 8004342:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004346:	633a      	str	r2, [r7, #48]	; 0x30
 8004348:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800434c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800434e:	e841 2300 	strex	r3, r2, [r1]
 8004352:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1e3      	bne.n	8004322 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2220      	movs	r2, #32
 800435e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60fb      	str	r3, [r7, #12]
   return(result);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	330c      	adds	r3, #12
 8004388:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800438c:	61fa      	str	r2, [r7, #28]
 800438e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004390:	69b9      	ldr	r1, [r7, #24]
 8004392:	69fa      	ldr	r2, [r7, #28]
 8004394:	e841 2300 	strex	r3, r2, [r1]
 8004398:	617b      	str	r3, [r7, #20]
   return(result);
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1e3      	bne.n	8004368 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043aa:	4619      	mov	r1, r3
 80043ac:	6878      	ldr	r0, [r7, #4]
 80043ae:	f000 f83b 	bl	8004428 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043b2:	e023      	b.n	80043fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80043b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d009      	beq.n	80043d4 <HAL_UART_IRQHandler+0x4f4>
 80043c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f953 	bl	8004678 <UART_Transmit_IT>
    return;
 80043d2:	e014      	b.n	80043fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80043d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00e      	beq.n	80043fe <HAL_UART_IRQHandler+0x51e>
 80043e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80043e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d008      	beq.n	80043fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f992 	bl	8004716 <UART_EndTransmit_IT>
    return;
 80043f2:	e004      	b.n	80043fe <HAL_UART_IRQHandler+0x51e>
    return;
 80043f4:	bf00      	nop
 80043f6:	e002      	b.n	80043fe <HAL_UART_IRQHandler+0x51e>
      return;
 80043f8:	bf00      	nop
 80043fa:	e000      	b.n	80043fe <HAL_UART_IRQHandler+0x51e>
      return;
 80043fc:	bf00      	nop
  }
}
 80043fe:	37e8      	adds	r7, #232	; 0xe8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}

08004404 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004404:	b480      	push	{r7}
 8004406:	b083      	sub	sp, #12
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	bc80      	pop	{r7}
 8004414:	4770      	bx	lr

08004416 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004434:	bf00      	nop
 8004436:	370c      	adds	r7, #12
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr

0800443e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800443e:	b580      	push	{r7, lr}
 8004440:	b090      	sub	sp, #64	; 0x40
 8004442:	af00      	add	r7, sp, #0
 8004444:	60f8      	str	r0, [r7, #12]
 8004446:	60b9      	str	r1, [r7, #8]
 8004448:	603b      	str	r3, [r7, #0]
 800444a:	4613      	mov	r3, r2
 800444c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444e:	e050      	b.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004450:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004452:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004456:	d04c      	beq.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800445a:	2b00      	cmp	r3, #0
 800445c:	d007      	beq.n	800446e <UART_WaitOnFlagUntilTimeout+0x30>
 800445e:	f7fd fc79 	bl	8001d54 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446a:	429a      	cmp	r2, r3
 800446c:	d241      	bcs.n	80044f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	330c      	adds	r3, #12
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004478:	e853 3f00 	ldrex	r3, [r3]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004480:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004484:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	330c      	adds	r3, #12
 800448c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800448e:	637a      	str	r2, [r7, #52]	; 0x34
 8004490:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004492:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004494:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004496:	e841 2300 	strex	r3, r2, [r1]
 800449a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800449c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d1e5      	bne.n	800446e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	3314      	adds	r3, #20
 80044a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	e853 3f00 	ldrex	r3, [r3]
 80044b0:	613b      	str	r3, [r7, #16]
   return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f023 0301 	bic.w	r3, r3, #1
 80044b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3314      	adds	r3, #20
 80044c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80044c2:	623a      	str	r2, [r7, #32]
 80044c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c6:	69f9      	ldr	r1, [r7, #28]
 80044c8:	6a3a      	ldr	r2, [r7, #32]
 80044ca:	e841 2300 	strex	r3, r2, [r1]
 80044ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d1e5      	bne.n	80044a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2200      	movs	r2, #0
 80044ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e00f      	b.n	8004512 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4013      	ands	r3, r2
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	429a      	cmp	r2, r3
 8004500:	bf0c      	ite	eq
 8004502:	2301      	moveq	r3, #1
 8004504:	2300      	movne	r3, #0
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	79fb      	ldrb	r3, [r7, #7]
 800450c:	429a      	cmp	r2, r3
 800450e:	d09f      	beq.n	8004450 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3740      	adds	r7, #64	; 0x40
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}

0800451a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800451a:	b480      	push	{r7}
 800451c:	b085      	sub	sp, #20
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	4613      	mov	r3, r2
 8004526:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	88fa      	ldrh	r2, [r7, #6]
 8004532:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	88fa      	ldrh	r2, [r7, #6]
 8004538:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2200      	movs	r2, #0
 800453e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2222      	movs	r2, #34	; 0x22
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68da      	ldr	r2, [r3, #12]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800455e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68da      	ldr	r2, [r3, #12]
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f042 0220 	orr.w	r2, r2, #32
 800457e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3714      	adds	r7, #20
 8004586:	46bd      	mov	sp, r7
 8004588:	bc80      	pop	{r7}
 800458a:	4770      	bx	lr

0800458c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800458c:	b480      	push	{r7}
 800458e:	b095      	sub	sp, #84	; 0x54
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	330c      	adds	r3, #12
 800459a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	e853 3f00 	ldrex	r3, [r3]
 80045a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	330c      	adds	r3, #12
 80045b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045b4:	643a      	str	r2, [r7, #64]	; 0x40
 80045b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045bc:	e841 2300 	strex	r3, r2, [r1]
 80045c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1e5      	bne.n	8004594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	3314      	adds	r3, #20
 80045ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d0:	6a3b      	ldr	r3, [r7, #32]
 80045d2:	e853 3f00 	ldrex	r3, [r3]
 80045d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f023 0301 	bic.w	r3, r3, #1
 80045de:	64bb      	str	r3, [r7, #72]	; 0x48
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	3314      	adds	r3, #20
 80045e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80045ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045f0:	e841 2300 	strex	r3, r2, [r1]
 80045f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1e5      	bne.n	80045c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004600:	2b01      	cmp	r3, #1
 8004602:	d119      	bne.n	8004638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	330c      	adds	r3, #12
 800460a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	e853 3f00 	ldrex	r3, [r3]
 8004612:	60bb      	str	r3, [r7, #8]
   return(result);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	f023 0310 	bic.w	r3, r3, #16
 800461a:	647b      	str	r3, [r7, #68]	; 0x44
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	330c      	adds	r3, #12
 8004622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004624:	61ba      	str	r2, [r7, #24]
 8004626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004628:	6979      	ldr	r1, [r7, #20]
 800462a:	69ba      	ldr	r2, [r7, #24]
 800462c:	e841 2300 	strex	r3, r2, [r1]
 8004630:	613b      	str	r3, [r7, #16]
   return(result);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d1e5      	bne.n	8004604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004646:	bf00      	nop
 8004648:	3754      	adds	r7, #84	; 0x54
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr

08004650 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2200      	movs	r2, #0
 8004662:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800466a:	68f8      	ldr	r0, [r7, #12]
 800466c:	f7ff fed3 	bl	8004416 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004670:	bf00      	nop
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}

08004678 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004678:	b480      	push	{r7}
 800467a:	b085      	sub	sp, #20
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004686:	b2db      	uxtb	r3, r3
 8004688:	2b21      	cmp	r3, #33	; 0x21
 800468a:	d13e      	bne.n	800470a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004694:	d114      	bne.n	80046c0 <UART_Transmit_IT+0x48>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d110      	bne.n	80046c0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a1b      	ldr	r3, [r3, #32]
 80046a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	1c9a      	adds	r2, r3, #2
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	621a      	str	r2, [r3, #32]
 80046be:	e008      	b.n	80046d2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6a1b      	ldr	r3, [r3, #32]
 80046c4:	1c59      	adds	r1, r3, #1
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	6211      	str	r1, [r2, #32]
 80046ca:	781a      	ldrb	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29b      	uxth	r3, r3
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4619      	mov	r1, r3
 80046e0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d10f      	bne.n	8004706 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	68da      	ldr	r2, [r3, #12]
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80046f4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68da      	ldr	r2, [r3, #12]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004704:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	bc80      	pop	{r7}
 8004714:	4770      	bx	lr

08004716 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004716:	b580      	push	{r7, lr}
 8004718:	b082      	sub	sp, #8
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68da      	ldr	r2, [r3, #12]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800472c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7ff fe64 	bl	8004404 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b08c      	sub	sp, #48	; 0x30
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b22      	cmp	r3, #34	; 0x22
 8004758:	f040 80ae 	bne.w	80048b8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004764:	d117      	bne.n	8004796 <UART_Receive_IT+0x50>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d113      	bne.n	8004796 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004776:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	b29b      	uxth	r3, r3
 8004780:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004784:	b29a      	uxth	r2, r3
 8004786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004788:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	629a      	str	r2, [r3, #40]	; 0x28
 8004794:	e026      	b.n	80047e4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800479c:	2300      	movs	r3, #0
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a8:	d007      	beq.n	80047ba <UART_Receive_IT+0x74>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d10a      	bne.n	80047c8 <UART_Receive_IT+0x82>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d106      	bne.n	80047c8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	b2da      	uxtb	r2, r3
 80047c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047c4:	701a      	strb	r2, [r3, #0]
 80047c6:	e008      	b.n	80047da <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047de:	1c5a      	adds	r2, r3, #1
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29b      	uxth	r3, r3
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	4619      	mov	r1, r3
 80047f2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d15d      	bne.n	80048b4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	68da      	ldr	r2, [r3, #12]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f022 0220 	bic.w	r2, r2, #32
 8004806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68da      	ldr	r2, [r3, #12]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004816:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	695a      	ldr	r2, [r3, #20]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f022 0201 	bic.w	r2, r2, #1
 8004826:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	2b01      	cmp	r3, #1
 800483c:	d135      	bne.n	80048aa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	330c      	adds	r3, #12
 800484a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	e853 3f00 	ldrex	r3, [r3]
 8004852:	613b      	str	r3, [r7, #16]
   return(result);
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	f023 0310 	bic.w	r3, r3, #16
 800485a:	627b      	str	r3, [r7, #36]	; 0x24
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	330c      	adds	r3, #12
 8004862:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004864:	623a      	str	r2, [r7, #32]
 8004866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004868:	69f9      	ldr	r1, [r7, #28]
 800486a:	6a3a      	ldr	r2, [r7, #32]
 800486c:	e841 2300 	strex	r3, r2, [r1]
 8004870:	61bb      	str	r3, [r7, #24]
   return(result);
 8004872:	69bb      	ldr	r3, [r7, #24]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1e5      	bne.n	8004844 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0310 	and.w	r3, r3, #16
 8004882:	2b10      	cmp	r3, #16
 8004884:	d10a      	bne.n	800489c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff fdc0 	bl	8004428 <HAL_UARTEx_RxEventCallback>
 80048a8:	e002      	b.n	80048b0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f7fc fd3a 	bl	8001324 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	e002      	b.n	80048ba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3730      	adds	r7, #48	; 0x30
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
	...

080048c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b084      	sub	sp, #16
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	691b      	ldr	r3, [r3, #16]
 80048d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
 80048fa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80048fe:	f023 030c 	bic.w	r3, r3, #12
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	6812      	ldr	r2, [r2, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	430b      	orrs	r3, r1
 800490a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695b      	ldr	r3, [r3, #20]
 8004912:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699a      	ldr	r2, [r3, #24]
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	430a      	orrs	r2, r1
 8004920:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2c      	ldr	r2, [pc, #176]	; (80049d8 <UART_SetConfig+0x114>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d103      	bne.n	8004934 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800492c:	f7ff f9ae 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	e002      	b.n	800493a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004934:	f7ff f996 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8004938:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800493a:	68fa      	ldr	r2, [r7, #12]
 800493c:	4613      	mov	r3, r2
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	4413      	add	r3, r2
 8004942:	009a      	lsls	r2, r3, #2
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	4a22      	ldr	r2, [pc, #136]	; (80049dc <UART_SetConfig+0x118>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	095b      	lsrs	r3, r3, #5
 8004958:	0119      	lsls	r1, r3, #4
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	4613      	mov	r3, r2
 800495e:	009b      	lsls	r3, r3, #2
 8004960:	4413      	add	r3, r2
 8004962:	009a      	lsls	r2, r3, #2
 8004964:	441a      	add	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	009b      	lsls	r3, r3, #2
 800496c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004970:	4b1a      	ldr	r3, [pc, #104]	; (80049dc <UART_SetConfig+0x118>)
 8004972:	fba3 0302 	umull	r0, r3, r3, r2
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	2064      	movs	r0, #100	; 0x64
 800497a:	fb00 f303 	mul.w	r3, r0, r3
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	3332      	adds	r3, #50	; 0x32
 8004984:	4a15      	ldr	r2, [pc, #84]	; (80049dc <UART_SetConfig+0x118>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	095b      	lsrs	r3, r3, #5
 800498c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004990:	4419      	add	r1, r3
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4613      	mov	r3, r2
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	009a      	lsls	r2, r3, #2
 800499c:	441a      	add	r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80049a8:	4b0c      	ldr	r3, [pc, #48]	; (80049dc <UART_SetConfig+0x118>)
 80049aa:	fba3 0302 	umull	r0, r3, r3, r2
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	2064      	movs	r0, #100	; 0x64
 80049b2:	fb00 f303 	mul.w	r3, r0, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	3332      	adds	r3, #50	; 0x32
 80049bc:	4a07      	ldr	r2, [pc, #28]	; (80049dc <UART_SetConfig+0x118>)
 80049be:	fba2 2303 	umull	r2, r3, r2, r3
 80049c2:	095b      	lsrs	r3, r3, #5
 80049c4:	f003 020f 	and.w	r2, r3, #15
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	440a      	add	r2, r1
 80049ce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049d0:	bf00      	nop
 80049d2:	3710      	adds	r7, #16
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}
 80049d8:	40013800 	.word	0x40013800
 80049dc:	51eb851f 	.word	0x51eb851f

080049e0 <__errno>:
 80049e0:	4b01      	ldr	r3, [pc, #4]	; (80049e8 <__errno+0x8>)
 80049e2:	6818      	ldr	r0, [r3, #0]
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	20000010 	.word	0x20000010

080049ec <__libc_init_array>:
 80049ec:	b570      	push	{r4, r5, r6, lr}
 80049ee:	2600      	movs	r6, #0
 80049f0:	4d0c      	ldr	r5, [pc, #48]	; (8004a24 <__libc_init_array+0x38>)
 80049f2:	4c0d      	ldr	r4, [pc, #52]	; (8004a28 <__libc_init_array+0x3c>)
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	42a6      	cmp	r6, r4
 80049fa:	d109      	bne.n	8004a10 <__libc_init_array+0x24>
 80049fc:	f002 fefc 	bl	80077f8 <_init>
 8004a00:	2600      	movs	r6, #0
 8004a02:	4d0a      	ldr	r5, [pc, #40]	; (8004a2c <__libc_init_array+0x40>)
 8004a04:	4c0a      	ldr	r4, [pc, #40]	; (8004a30 <__libc_init_array+0x44>)
 8004a06:	1b64      	subs	r4, r4, r5
 8004a08:	10a4      	asrs	r4, r4, #2
 8004a0a:	42a6      	cmp	r6, r4
 8004a0c:	d105      	bne.n	8004a1a <__libc_init_array+0x2e>
 8004a0e:	bd70      	pop	{r4, r5, r6, pc}
 8004a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a14:	4798      	blx	r3
 8004a16:	3601      	adds	r6, #1
 8004a18:	e7ee      	b.n	80049f8 <__libc_init_array+0xc>
 8004a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a1e:	4798      	blx	r3
 8004a20:	3601      	adds	r6, #1
 8004a22:	e7f2      	b.n	8004a0a <__libc_init_array+0x1e>
 8004a24:	08007c6c 	.word	0x08007c6c
 8004a28:	08007c6c 	.word	0x08007c6c
 8004a2c:	08007c6c 	.word	0x08007c6c
 8004a30:	08007c70 	.word	0x08007c70

08004a34 <memset>:
 8004a34:	4603      	mov	r3, r0
 8004a36:	4402      	add	r2, r0
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d100      	bne.n	8004a3e <memset+0xa>
 8004a3c:	4770      	bx	lr
 8004a3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a42:	e7f9      	b.n	8004a38 <memset+0x4>

08004a44 <__cvt>:
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4a:	461f      	mov	r7, r3
 8004a4c:	bfbb      	ittet	lt
 8004a4e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004a52:	461f      	movlt	r7, r3
 8004a54:	2300      	movge	r3, #0
 8004a56:	232d      	movlt	r3, #45	; 0x2d
 8004a58:	b088      	sub	sp, #32
 8004a5a:	4614      	mov	r4, r2
 8004a5c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004a5e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004a60:	7013      	strb	r3, [r2, #0]
 8004a62:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a64:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004a68:	f023 0820 	bic.w	r8, r3, #32
 8004a6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004a70:	d005      	beq.n	8004a7e <__cvt+0x3a>
 8004a72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004a76:	d100      	bne.n	8004a7a <__cvt+0x36>
 8004a78:	3501      	adds	r5, #1
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	e000      	b.n	8004a80 <__cvt+0x3c>
 8004a7e:	2303      	movs	r3, #3
 8004a80:	aa07      	add	r2, sp, #28
 8004a82:	9204      	str	r2, [sp, #16]
 8004a84:	aa06      	add	r2, sp, #24
 8004a86:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004a8a:	e9cd 3500 	strd	r3, r5, [sp]
 8004a8e:	4622      	mov	r2, r4
 8004a90:	463b      	mov	r3, r7
 8004a92:	f000 fce5 	bl	8005460 <_dtoa_r>
 8004a96:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004a9a:	4606      	mov	r6, r0
 8004a9c:	d102      	bne.n	8004aa4 <__cvt+0x60>
 8004a9e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004aa0:	07db      	lsls	r3, r3, #31
 8004aa2:	d522      	bpl.n	8004aea <__cvt+0xa6>
 8004aa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004aa8:	eb06 0905 	add.w	r9, r6, r5
 8004aac:	d110      	bne.n	8004ad0 <__cvt+0x8c>
 8004aae:	7833      	ldrb	r3, [r6, #0]
 8004ab0:	2b30      	cmp	r3, #48	; 0x30
 8004ab2:	d10a      	bne.n	8004aca <__cvt+0x86>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4639      	mov	r1, r7
 8004abc:	f7fc f828 	bl	8000b10 <__aeabi_dcmpeq>
 8004ac0:	b918      	cbnz	r0, 8004aca <__cvt+0x86>
 8004ac2:	f1c5 0501 	rsb	r5, r5, #1
 8004ac6:	f8ca 5000 	str.w	r5, [sl]
 8004aca:	f8da 3000 	ldr.w	r3, [sl]
 8004ace:	4499      	add	r9, r3
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	4620      	mov	r0, r4
 8004ad6:	4639      	mov	r1, r7
 8004ad8:	f7fc f81a 	bl	8000b10 <__aeabi_dcmpeq>
 8004adc:	b108      	cbz	r0, 8004ae2 <__cvt+0x9e>
 8004ade:	f8cd 901c 	str.w	r9, [sp, #28]
 8004ae2:	2230      	movs	r2, #48	; 0x30
 8004ae4:	9b07      	ldr	r3, [sp, #28]
 8004ae6:	454b      	cmp	r3, r9
 8004ae8:	d307      	bcc.n	8004afa <__cvt+0xb6>
 8004aea:	4630      	mov	r0, r6
 8004aec:	9b07      	ldr	r3, [sp, #28]
 8004aee:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004af0:	1b9b      	subs	r3, r3, r6
 8004af2:	6013      	str	r3, [r2, #0]
 8004af4:	b008      	add	sp, #32
 8004af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afa:	1c59      	adds	r1, r3, #1
 8004afc:	9107      	str	r1, [sp, #28]
 8004afe:	701a      	strb	r2, [r3, #0]
 8004b00:	e7f0      	b.n	8004ae4 <__cvt+0xa0>

08004b02 <__exponent>:
 8004b02:	4603      	mov	r3, r0
 8004b04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b06:	2900      	cmp	r1, #0
 8004b08:	f803 2b02 	strb.w	r2, [r3], #2
 8004b0c:	bfb6      	itet	lt
 8004b0e:	222d      	movlt	r2, #45	; 0x2d
 8004b10:	222b      	movge	r2, #43	; 0x2b
 8004b12:	4249      	neglt	r1, r1
 8004b14:	2909      	cmp	r1, #9
 8004b16:	7042      	strb	r2, [r0, #1]
 8004b18:	dd2b      	ble.n	8004b72 <__exponent+0x70>
 8004b1a:	f10d 0407 	add.w	r4, sp, #7
 8004b1e:	46a4      	mov	ip, r4
 8004b20:	270a      	movs	r7, #10
 8004b22:	fb91 f6f7 	sdiv	r6, r1, r7
 8004b26:	460a      	mov	r2, r1
 8004b28:	46a6      	mov	lr, r4
 8004b2a:	fb07 1516 	mls	r5, r7, r6, r1
 8004b2e:	2a63      	cmp	r2, #99	; 0x63
 8004b30:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8004b34:	4631      	mov	r1, r6
 8004b36:	f104 34ff 	add.w	r4, r4, #4294967295
 8004b3a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004b3e:	dcf0      	bgt.n	8004b22 <__exponent+0x20>
 8004b40:	3130      	adds	r1, #48	; 0x30
 8004b42:	f1ae 0502 	sub.w	r5, lr, #2
 8004b46:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	1c44      	adds	r4, r0, #1
 8004b4e:	4561      	cmp	r1, ip
 8004b50:	d30a      	bcc.n	8004b68 <__exponent+0x66>
 8004b52:	f10d 0209 	add.w	r2, sp, #9
 8004b56:	eba2 020e 	sub.w	r2, r2, lr
 8004b5a:	4565      	cmp	r5, ip
 8004b5c:	bf88      	it	hi
 8004b5e:	2200      	movhi	r2, #0
 8004b60:	4413      	add	r3, r2
 8004b62:	1a18      	subs	r0, r3, r0
 8004b64:	b003      	add	sp, #12
 8004b66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b68:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b6c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004b70:	e7ed      	b.n	8004b4e <__exponent+0x4c>
 8004b72:	2330      	movs	r3, #48	; 0x30
 8004b74:	3130      	adds	r1, #48	; 0x30
 8004b76:	7083      	strb	r3, [r0, #2]
 8004b78:	70c1      	strb	r1, [r0, #3]
 8004b7a:	1d03      	adds	r3, r0, #4
 8004b7c:	e7f1      	b.n	8004b62 <__exponent+0x60>
	...

08004b80 <_printf_float>:
 8004b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b84:	b091      	sub	sp, #68	; 0x44
 8004b86:	460c      	mov	r4, r1
 8004b88:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004b8c:	4616      	mov	r6, r2
 8004b8e:	461f      	mov	r7, r3
 8004b90:	4605      	mov	r5, r0
 8004b92:	f001 fa53 	bl	800603c <_localeconv_r>
 8004b96:	6803      	ldr	r3, [r0, #0]
 8004b98:	4618      	mov	r0, r3
 8004b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8004b9c:	f7fb fad8 	bl	8000150 <strlen>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	930e      	str	r3, [sp, #56]	; 0x38
 8004ba4:	f8d8 3000 	ldr.w	r3, [r8]
 8004ba8:	900a      	str	r0, [sp, #40]	; 0x28
 8004baa:	3307      	adds	r3, #7
 8004bac:	f023 0307 	bic.w	r3, r3, #7
 8004bb0:	f103 0208 	add.w	r2, r3, #8
 8004bb4:	f894 9018 	ldrb.w	r9, [r4, #24]
 8004bb8:	f8d4 b000 	ldr.w	fp, [r4]
 8004bbc:	f8c8 2000 	str.w	r2, [r8]
 8004bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004bc8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004bcc:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004bd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8004bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8004bd6:	4640      	mov	r0, r8
 8004bd8:	4b9c      	ldr	r3, [pc, #624]	; (8004e4c <_printf_float+0x2cc>)
 8004bda:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bdc:	f7fb ffca 	bl	8000b74 <__aeabi_dcmpun>
 8004be0:	bb70      	cbnz	r0, 8004c40 <_printf_float+0xc0>
 8004be2:	f04f 32ff 	mov.w	r2, #4294967295
 8004be6:	4640      	mov	r0, r8
 8004be8:	4b98      	ldr	r3, [pc, #608]	; (8004e4c <_printf_float+0x2cc>)
 8004bea:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004bec:	f7fb ffa4 	bl	8000b38 <__aeabi_dcmple>
 8004bf0:	bb30      	cbnz	r0, 8004c40 <_printf_float+0xc0>
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	4640      	mov	r0, r8
 8004bf8:	4651      	mov	r1, sl
 8004bfa:	f7fb ff93 	bl	8000b24 <__aeabi_dcmplt>
 8004bfe:	b110      	cbz	r0, 8004c06 <_printf_float+0x86>
 8004c00:	232d      	movs	r3, #45	; 0x2d
 8004c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c06:	4b92      	ldr	r3, [pc, #584]	; (8004e50 <_printf_float+0x2d0>)
 8004c08:	4892      	ldr	r0, [pc, #584]	; (8004e54 <_printf_float+0x2d4>)
 8004c0a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004c0e:	bf94      	ite	ls
 8004c10:	4698      	movls	r8, r3
 8004c12:	4680      	movhi	r8, r0
 8004c14:	2303      	movs	r3, #3
 8004c16:	f04f 0a00 	mov.w	sl, #0
 8004c1a:	6123      	str	r3, [r4, #16]
 8004c1c:	f02b 0304 	bic.w	r3, fp, #4
 8004c20:	6023      	str	r3, [r4, #0]
 8004c22:	4633      	mov	r3, r6
 8004c24:	4621      	mov	r1, r4
 8004c26:	4628      	mov	r0, r5
 8004c28:	9700      	str	r7, [sp, #0]
 8004c2a:	aa0f      	add	r2, sp, #60	; 0x3c
 8004c2c:	f000 f9d4 	bl	8004fd8 <_printf_common>
 8004c30:	3001      	adds	r0, #1
 8004c32:	f040 8090 	bne.w	8004d56 <_printf_float+0x1d6>
 8004c36:	f04f 30ff 	mov.w	r0, #4294967295
 8004c3a:	b011      	add	sp, #68	; 0x44
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	4642      	mov	r2, r8
 8004c42:	4653      	mov	r3, sl
 8004c44:	4640      	mov	r0, r8
 8004c46:	4651      	mov	r1, sl
 8004c48:	f7fb ff94 	bl	8000b74 <__aeabi_dcmpun>
 8004c4c:	b148      	cbz	r0, 8004c62 <_printf_float+0xe2>
 8004c4e:	f1ba 0f00 	cmp.w	sl, #0
 8004c52:	bfb8      	it	lt
 8004c54:	232d      	movlt	r3, #45	; 0x2d
 8004c56:	4880      	ldr	r0, [pc, #512]	; (8004e58 <_printf_float+0x2d8>)
 8004c58:	bfb8      	it	lt
 8004c5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004c5e:	4b7f      	ldr	r3, [pc, #508]	; (8004e5c <_printf_float+0x2dc>)
 8004c60:	e7d3      	b.n	8004c0a <_printf_float+0x8a>
 8004c62:	6863      	ldr	r3, [r4, #4]
 8004c64:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004c68:	1c5a      	adds	r2, r3, #1
 8004c6a:	d142      	bne.n	8004cf2 <_printf_float+0x172>
 8004c6c:	2306      	movs	r3, #6
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	9206      	str	r2, [sp, #24]
 8004c74:	aa0e      	add	r2, sp, #56	; 0x38
 8004c76:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004c7a:	aa0d      	add	r2, sp, #52	; 0x34
 8004c7c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004c80:	9203      	str	r2, [sp, #12]
 8004c82:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004c86:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004c8a:	6023      	str	r3, [r4, #0]
 8004c8c:	6863      	ldr	r3, [r4, #4]
 8004c8e:	4642      	mov	r2, r8
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	4628      	mov	r0, r5
 8004c94:	4653      	mov	r3, sl
 8004c96:	910b      	str	r1, [sp, #44]	; 0x2c
 8004c98:	f7ff fed4 	bl	8004a44 <__cvt>
 8004c9c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c9e:	4680      	mov	r8, r0
 8004ca0:	2947      	cmp	r1, #71	; 0x47
 8004ca2:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004ca4:	d108      	bne.n	8004cb8 <_printf_float+0x138>
 8004ca6:	1cc8      	adds	r0, r1, #3
 8004ca8:	db02      	blt.n	8004cb0 <_printf_float+0x130>
 8004caa:	6863      	ldr	r3, [r4, #4]
 8004cac:	4299      	cmp	r1, r3
 8004cae:	dd40      	ble.n	8004d32 <_printf_float+0x1b2>
 8004cb0:	f1a9 0902 	sub.w	r9, r9, #2
 8004cb4:	fa5f f989 	uxtb.w	r9, r9
 8004cb8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004cbc:	d81f      	bhi.n	8004cfe <_printf_float+0x17e>
 8004cbe:	464a      	mov	r2, r9
 8004cc0:	3901      	subs	r1, #1
 8004cc2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004cc6:	910d      	str	r1, [sp, #52]	; 0x34
 8004cc8:	f7ff ff1b 	bl	8004b02 <__exponent>
 8004ccc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cce:	4682      	mov	sl, r0
 8004cd0:	1813      	adds	r3, r2, r0
 8004cd2:	2a01      	cmp	r2, #1
 8004cd4:	6123      	str	r3, [r4, #16]
 8004cd6:	dc02      	bgt.n	8004cde <_printf_float+0x15e>
 8004cd8:	6822      	ldr	r2, [r4, #0]
 8004cda:	07d2      	lsls	r2, r2, #31
 8004cdc:	d501      	bpl.n	8004ce2 <_printf_float+0x162>
 8004cde:	3301      	adds	r3, #1
 8004ce0:	6123      	str	r3, [r4, #16]
 8004ce2:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d09b      	beq.n	8004c22 <_printf_float+0xa2>
 8004cea:	232d      	movs	r3, #45	; 0x2d
 8004cec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cf0:	e797      	b.n	8004c22 <_printf_float+0xa2>
 8004cf2:	2947      	cmp	r1, #71	; 0x47
 8004cf4:	d1bc      	bne.n	8004c70 <_printf_float+0xf0>
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1ba      	bne.n	8004c70 <_printf_float+0xf0>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e7b7      	b.n	8004c6e <_printf_float+0xee>
 8004cfe:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004d02:	d118      	bne.n	8004d36 <_printf_float+0x1b6>
 8004d04:	2900      	cmp	r1, #0
 8004d06:	6863      	ldr	r3, [r4, #4]
 8004d08:	dd0b      	ble.n	8004d22 <_printf_float+0x1a2>
 8004d0a:	6121      	str	r1, [r4, #16]
 8004d0c:	b913      	cbnz	r3, 8004d14 <_printf_float+0x194>
 8004d0e:	6822      	ldr	r2, [r4, #0]
 8004d10:	07d0      	lsls	r0, r2, #31
 8004d12:	d502      	bpl.n	8004d1a <_printf_float+0x19a>
 8004d14:	3301      	adds	r3, #1
 8004d16:	440b      	add	r3, r1
 8004d18:	6123      	str	r3, [r4, #16]
 8004d1a:	f04f 0a00 	mov.w	sl, #0
 8004d1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8004d20:	e7df      	b.n	8004ce2 <_printf_float+0x162>
 8004d22:	b913      	cbnz	r3, 8004d2a <_printf_float+0x1aa>
 8004d24:	6822      	ldr	r2, [r4, #0]
 8004d26:	07d2      	lsls	r2, r2, #31
 8004d28:	d501      	bpl.n	8004d2e <_printf_float+0x1ae>
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	e7f4      	b.n	8004d18 <_printf_float+0x198>
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e7f2      	b.n	8004d18 <_printf_float+0x198>
 8004d32:	f04f 0967 	mov.w	r9, #103	; 0x67
 8004d36:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004d38:	4299      	cmp	r1, r3
 8004d3a:	db05      	blt.n	8004d48 <_printf_float+0x1c8>
 8004d3c:	6823      	ldr	r3, [r4, #0]
 8004d3e:	6121      	str	r1, [r4, #16]
 8004d40:	07d8      	lsls	r0, r3, #31
 8004d42:	d5ea      	bpl.n	8004d1a <_printf_float+0x19a>
 8004d44:	1c4b      	adds	r3, r1, #1
 8004d46:	e7e7      	b.n	8004d18 <_printf_float+0x198>
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	bfcc      	ite	gt
 8004d4c:	2201      	movgt	r2, #1
 8004d4e:	f1c1 0202 	rsble	r2, r1, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	e7e0      	b.n	8004d18 <_printf_float+0x198>
 8004d56:	6823      	ldr	r3, [r4, #0]
 8004d58:	055a      	lsls	r2, r3, #21
 8004d5a:	d407      	bmi.n	8004d6c <_printf_float+0x1ec>
 8004d5c:	6923      	ldr	r3, [r4, #16]
 8004d5e:	4642      	mov	r2, r8
 8004d60:	4631      	mov	r1, r6
 8004d62:	4628      	mov	r0, r5
 8004d64:	47b8      	blx	r7
 8004d66:	3001      	adds	r0, #1
 8004d68:	d12b      	bne.n	8004dc2 <_printf_float+0x242>
 8004d6a:	e764      	b.n	8004c36 <_printf_float+0xb6>
 8004d6c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004d70:	f240 80dd 	bls.w	8004f2e <_printf_float+0x3ae>
 8004d74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004d78:	2200      	movs	r2, #0
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	f7fb fec8 	bl	8000b10 <__aeabi_dcmpeq>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d033      	beq.n	8004dec <_printf_float+0x26c>
 8004d84:	2301      	movs	r3, #1
 8004d86:	4631      	mov	r1, r6
 8004d88:	4628      	mov	r0, r5
 8004d8a:	4a35      	ldr	r2, [pc, #212]	; (8004e60 <_printf_float+0x2e0>)
 8004d8c:	47b8      	blx	r7
 8004d8e:	3001      	adds	r0, #1
 8004d90:	f43f af51 	beq.w	8004c36 <_printf_float+0xb6>
 8004d94:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	db02      	blt.n	8004da2 <_printf_float+0x222>
 8004d9c:	6823      	ldr	r3, [r4, #0]
 8004d9e:	07d8      	lsls	r0, r3, #31
 8004da0:	d50f      	bpl.n	8004dc2 <_printf_float+0x242>
 8004da2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004da6:	4631      	mov	r1, r6
 8004da8:	4628      	mov	r0, r5
 8004daa:	47b8      	blx	r7
 8004dac:	3001      	adds	r0, #1
 8004dae:	f43f af42 	beq.w	8004c36 <_printf_float+0xb6>
 8004db2:	f04f 0800 	mov.w	r8, #0
 8004db6:	f104 091a 	add.w	r9, r4, #26
 8004dba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4543      	cmp	r3, r8
 8004dc0:	dc09      	bgt.n	8004dd6 <_printf_float+0x256>
 8004dc2:	6823      	ldr	r3, [r4, #0]
 8004dc4:	079b      	lsls	r3, r3, #30
 8004dc6:	f100 8102 	bmi.w	8004fce <_printf_float+0x44e>
 8004dca:	68e0      	ldr	r0, [r4, #12]
 8004dcc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004dce:	4298      	cmp	r0, r3
 8004dd0:	bfb8      	it	lt
 8004dd2:	4618      	movlt	r0, r3
 8004dd4:	e731      	b.n	8004c3a <_printf_float+0xba>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	464a      	mov	r2, r9
 8004dda:	4631      	mov	r1, r6
 8004ddc:	4628      	mov	r0, r5
 8004dde:	47b8      	blx	r7
 8004de0:	3001      	adds	r0, #1
 8004de2:	f43f af28 	beq.w	8004c36 <_printf_float+0xb6>
 8004de6:	f108 0801 	add.w	r8, r8, #1
 8004dea:	e7e6      	b.n	8004dba <_printf_float+0x23a>
 8004dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	dc38      	bgt.n	8004e64 <_printf_float+0x2e4>
 8004df2:	2301      	movs	r3, #1
 8004df4:	4631      	mov	r1, r6
 8004df6:	4628      	mov	r0, r5
 8004df8:	4a19      	ldr	r2, [pc, #100]	; (8004e60 <_printf_float+0x2e0>)
 8004dfa:	47b8      	blx	r7
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	f43f af1a 	beq.w	8004c36 <_printf_float+0xb6>
 8004e02:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e06:	4313      	orrs	r3, r2
 8004e08:	d102      	bne.n	8004e10 <_printf_float+0x290>
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	07d9      	lsls	r1, r3, #31
 8004e0e:	d5d8      	bpl.n	8004dc2 <_printf_float+0x242>
 8004e10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004e14:	4631      	mov	r1, r6
 8004e16:	4628      	mov	r0, r5
 8004e18:	47b8      	blx	r7
 8004e1a:	3001      	adds	r0, #1
 8004e1c:	f43f af0b 	beq.w	8004c36 <_printf_float+0xb6>
 8004e20:	f04f 0900 	mov.w	r9, #0
 8004e24:	f104 0a1a 	add.w	sl, r4, #26
 8004e28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e2a:	425b      	negs	r3, r3
 8004e2c:	454b      	cmp	r3, r9
 8004e2e:	dc01      	bgt.n	8004e34 <_printf_float+0x2b4>
 8004e30:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e32:	e794      	b.n	8004d5e <_printf_float+0x1de>
 8004e34:	2301      	movs	r3, #1
 8004e36:	4652      	mov	r2, sl
 8004e38:	4631      	mov	r1, r6
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	47b8      	blx	r7
 8004e3e:	3001      	adds	r0, #1
 8004e40:	f43f aef9 	beq.w	8004c36 <_printf_float+0xb6>
 8004e44:	f109 0901 	add.w	r9, r9, #1
 8004e48:	e7ee      	b.n	8004e28 <_printf_float+0x2a8>
 8004e4a:	bf00      	nop
 8004e4c:	7fefffff 	.word	0x7fefffff
 8004e50:	08007894 	.word	0x08007894
 8004e54:	08007898 	.word	0x08007898
 8004e58:	080078a0 	.word	0x080078a0
 8004e5c:	0800789c 	.word	0x0800789c
 8004e60:	080078a4 	.word	0x080078a4
 8004e64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	bfa8      	it	ge
 8004e6c:	461a      	movge	r2, r3
 8004e6e:	2a00      	cmp	r2, #0
 8004e70:	4691      	mov	r9, r2
 8004e72:	dc37      	bgt.n	8004ee4 <_printf_float+0x364>
 8004e74:	f04f 0b00 	mov.w	fp, #0
 8004e78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e7c:	f104 021a 	add.w	r2, r4, #26
 8004e80:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004e84:	ebaa 0309 	sub.w	r3, sl, r9
 8004e88:	455b      	cmp	r3, fp
 8004e8a:	dc33      	bgt.n	8004ef4 <_printf_float+0x374>
 8004e8c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004e90:	429a      	cmp	r2, r3
 8004e92:	db3b      	blt.n	8004f0c <_printf_float+0x38c>
 8004e94:	6823      	ldr	r3, [r4, #0]
 8004e96:	07da      	lsls	r2, r3, #31
 8004e98:	d438      	bmi.n	8004f0c <_printf_float+0x38c>
 8004e9a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004e9c:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e9e:	eba3 020a 	sub.w	r2, r3, sl
 8004ea2:	eba3 0901 	sub.w	r9, r3, r1
 8004ea6:	4591      	cmp	r9, r2
 8004ea8:	bfa8      	it	ge
 8004eaa:	4691      	movge	r9, r2
 8004eac:	f1b9 0f00 	cmp.w	r9, #0
 8004eb0:	dc34      	bgt.n	8004f1c <_printf_float+0x39c>
 8004eb2:	f04f 0800 	mov.w	r8, #0
 8004eb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004eba:	f104 0a1a 	add.w	sl, r4, #26
 8004ebe:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004ec2:	1a9b      	subs	r3, r3, r2
 8004ec4:	eba3 0309 	sub.w	r3, r3, r9
 8004ec8:	4543      	cmp	r3, r8
 8004eca:	f77f af7a 	ble.w	8004dc2 <_printf_float+0x242>
 8004ece:	2301      	movs	r3, #1
 8004ed0:	4652      	mov	r2, sl
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	f43f aeac 	beq.w	8004c36 <_printf_float+0xb6>
 8004ede:	f108 0801 	add.w	r8, r8, #1
 8004ee2:	e7ec      	b.n	8004ebe <_printf_float+0x33e>
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4642      	mov	r2, r8
 8004eea:	4628      	mov	r0, r5
 8004eec:	47b8      	blx	r7
 8004eee:	3001      	adds	r0, #1
 8004ef0:	d1c0      	bne.n	8004e74 <_printf_float+0x2f4>
 8004ef2:	e6a0      	b.n	8004c36 <_printf_float+0xb6>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	4628      	mov	r0, r5
 8004efa:	920b      	str	r2, [sp, #44]	; 0x2c
 8004efc:	47b8      	blx	r7
 8004efe:	3001      	adds	r0, #1
 8004f00:	f43f ae99 	beq.w	8004c36 <_printf_float+0xb6>
 8004f04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004f06:	f10b 0b01 	add.w	fp, fp, #1
 8004f0a:	e7b9      	b.n	8004e80 <_printf_float+0x300>
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f12:	4628      	mov	r0, r5
 8004f14:	47b8      	blx	r7
 8004f16:	3001      	adds	r0, #1
 8004f18:	d1bf      	bne.n	8004e9a <_printf_float+0x31a>
 8004f1a:	e68c      	b.n	8004c36 <_printf_float+0xb6>
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	4631      	mov	r1, r6
 8004f20:	4628      	mov	r0, r5
 8004f22:	eb08 020a 	add.w	r2, r8, sl
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	d1c2      	bne.n	8004eb2 <_printf_float+0x332>
 8004f2c:	e683      	b.n	8004c36 <_printf_float+0xb6>
 8004f2e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f30:	2a01      	cmp	r2, #1
 8004f32:	dc01      	bgt.n	8004f38 <_printf_float+0x3b8>
 8004f34:	07db      	lsls	r3, r3, #31
 8004f36:	d537      	bpl.n	8004fa8 <_printf_float+0x428>
 8004f38:	2301      	movs	r3, #1
 8004f3a:	4642      	mov	r2, r8
 8004f3c:	4631      	mov	r1, r6
 8004f3e:	4628      	mov	r0, r5
 8004f40:	47b8      	blx	r7
 8004f42:	3001      	adds	r0, #1
 8004f44:	f43f ae77 	beq.w	8004c36 <_printf_float+0xb6>
 8004f48:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f ae6f 	beq.w	8004c36 <_printf_float+0xb6>
 8004f58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2300      	movs	r3, #0
 8004f60:	f7fb fdd6 	bl	8000b10 <__aeabi_dcmpeq>
 8004f64:	b9d8      	cbnz	r0, 8004f9e <_printf_float+0x41e>
 8004f66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f68:	f108 0201 	add.w	r2, r8, #1
 8004f6c:	3b01      	subs	r3, #1
 8004f6e:	4631      	mov	r1, r6
 8004f70:	4628      	mov	r0, r5
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	d10e      	bne.n	8004f96 <_printf_float+0x416>
 8004f78:	e65d      	b.n	8004c36 <_printf_float+0xb6>
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	464a      	mov	r2, r9
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4628      	mov	r0, r5
 8004f82:	47b8      	blx	r7
 8004f84:	3001      	adds	r0, #1
 8004f86:	f43f ae56 	beq.w	8004c36 <_printf_float+0xb6>
 8004f8a:	f108 0801 	add.w	r8, r8, #1
 8004f8e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f90:	3b01      	subs	r3, #1
 8004f92:	4543      	cmp	r3, r8
 8004f94:	dcf1      	bgt.n	8004f7a <_printf_float+0x3fa>
 8004f96:	4653      	mov	r3, sl
 8004f98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004f9c:	e6e0      	b.n	8004d60 <_printf_float+0x1e0>
 8004f9e:	f04f 0800 	mov.w	r8, #0
 8004fa2:	f104 091a 	add.w	r9, r4, #26
 8004fa6:	e7f2      	b.n	8004f8e <_printf_float+0x40e>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	4642      	mov	r2, r8
 8004fac:	e7df      	b.n	8004f6e <_printf_float+0x3ee>
 8004fae:	2301      	movs	r3, #1
 8004fb0:	464a      	mov	r2, r9
 8004fb2:	4631      	mov	r1, r6
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	47b8      	blx	r7
 8004fb8:	3001      	adds	r0, #1
 8004fba:	f43f ae3c 	beq.w	8004c36 <_printf_float+0xb6>
 8004fbe:	f108 0801 	add.w	r8, r8, #1
 8004fc2:	68e3      	ldr	r3, [r4, #12]
 8004fc4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004fc6:	1a5b      	subs	r3, r3, r1
 8004fc8:	4543      	cmp	r3, r8
 8004fca:	dcf0      	bgt.n	8004fae <_printf_float+0x42e>
 8004fcc:	e6fd      	b.n	8004dca <_printf_float+0x24a>
 8004fce:	f04f 0800 	mov.w	r8, #0
 8004fd2:	f104 0919 	add.w	r9, r4, #25
 8004fd6:	e7f4      	b.n	8004fc2 <_printf_float+0x442>

08004fd8 <_printf_common>:
 8004fd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fdc:	4616      	mov	r6, r2
 8004fde:	4699      	mov	r9, r3
 8004fe0:	688a      	ldr	r2, [r1, #8]
 8004fe2:	690b      	ldr	r3, [r1, #16]
 8004fe4:	4607      	mov	r7, r0
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	bfb8      	it	lt
 8004fea:	4613      	movlt	r3, r2
 8004fec:	6033      	str	r3, [r6, #0]
 8004fee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ff2:	460c      	mov	r4, r1
 8004ff4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ff8:	b10a      	cbz	r2, 8004ffe <_printf_common+0x26>
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	6033      	str	r3, [r6, #0]
 8004ffe:	6823      	ldr	r3, [r4, #0]
 8005000:	0699      	lsls	r1, r3, #26
 8005002:	bf42      	ittt	mi
 8005004:	6833      	ldrmi	r3, [r6, #0]
 8005006:	3302      	addmi	r3, #2
 8005008:	6033      	strmi	r3, [r6, #0]
 800500a:	6825      	ldr	r5, [r4, #0]
 800500c:	f015 0506 	ands.w	r5, r5, #6
 8005010:	d106      	bne.n	8005020 <_printf_common+0x48>
 8005012:	f104 0a19 	add.w	sl, r4, #25
 8005016:	68e3      	ldr	r3, [r4, #12]
 8005018:	6832      	ldr	r2, [r6, #0]
 800501a:	1a9b      	subs	r3, r3, r2
 800501c:	42ab      	cmp	r3, r5
 800501e:	dc28      	bgt.n	8005072 <_printf_common+0x9a>
 8005020:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005024:	1e13      	subs	r3, r2, #0
 8005026:	6822      	ldr	r2, [r4, #0]
 8005028:	bf18      	it	ne
 800502a:	2301      	movne	r3, #1
 800502c:	0692      	lsls	r2, r2, #26
 800502e:	d42d      	bmi.n	800508c <_printf_common+0xb4>
 8005030:	4649      	mov	r1, r9
 8005032:	4638      	mov	r0, r7
 8005034:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005038:	47c0      	blx	r8
 800503a:	3001      	adds	r0, #1
 800503c:	d020      	beq.n	8005080 <_printf_common+0xa8>
 800503e:	6823      	ldr	r3, [r4, #0]
 8005040:	68e5      	ldr	r5, [r4, #12]
 8005042:	f003 0306 	and.w	r3, r3, #6
 8005046:	2b04      	cmp	r3, #4
 8005048:	bf18      	it	ne
 800504a:	2500      	movne	r5, #0
 800504c:	6832      	ldr	r2, [r6, #0]
 800504e:	f04f 0600 	mov.w	r6, #0
 8005052:	68a3      	ldr	r3, [r4, #8]
 8005054:	bf08      	it	eq
 8005056:	1aad      	subeq	r5, r5, r2
 8005058:	6922      	ldr	r2, [r4, #16]
 800505a:	bf08      	it	eq
 800505c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005060:	4293      	cmp	r3, r2
 8005062:	bfc4      	itt	gt
 8005064:	1a9b      	subgt	r3, r3, r2
 8005066:	18ed      	addgt	r5, r5, r3
 8005068:	341a      	adds	r4, #26
 800506a:	42b5      	cmp	r5, r6
 800506c:	d11a      	bne.n	80050a4 <_printf_common+0xcc>
 800506e:	2000      	movs	r0, #0
 8005070:	e008      	b.n	8005084 <_printf_common+0xac>
 8005072:	2301      	movs	r3, #1
 8005074:	4652      	mov	r2, sl
 8005076:	4649      	mov	r1, r9
 8005078:	4638      	mov	r0, r7
 800507a:	47c0      	blx	r8
 800507c:	3001      	adds	r0, #1
 800507e:	d103      	bne.n	8005088 <_printf_common+0xb0>
 8005080:	f04f 30ff 	mov.w	r0, #4294967295
 8005084:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005088:	3501      	adds	r5, #1
 800508a:	e7c4      	b.n	8005016 <_printf_common+0x3e>
 800508c:	2030      	movs	r0, #48	; 0x30
 800508e:	18e1      	adds	r1, r4, r3
 8005090:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800509a:	4422      	add	r2, r4
 800509c:	3302      	adds	r3, #2
 800509e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050a2:	e7c5      	b.n	8005030 <_printf_common+0x58>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4622      	mov	r2, r4
 80050a8:	4649      	mov	r1, r9
 80050aa:	4638      	mov	r0, r7
 80050ac:	47c0      	blx	r8
 80050ae:	3001      	adds	r0, #1
 80050b0:	d0e6      	beq.n	8005080 <_printf_common+0xa8>
 80050b2:	3601      	adds	r6, #1
 80050b4:	e7d9      	b.n	800506a <_printf_common+0x92>
	...

080050b8 <_printf_i>:
 80050b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050bc:	7e0f      	ldrb	r7, [r1, #24]
 80050be:	4691      	mov	r9, r2
 80050c0:	2f78      	cmp	r7, #120	; 0x78
 80050c2:	4680      	mov	r8, r0
 80050c4:	460c      	mov	r4, r1
 80050c6:	469a      	mov	sl, r3
 80050c8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050ce:	d807      	bhi.n	80050e0 <_printf_i+0x28>
 80050d0:	2f62      	cmp	r7, #98	; 0x62
 80050d2:	d80a      	bhi.n	80050ea <_printf_i+0x32>
 80050d4:	2f00      	cmp	r7, #0
 80050d6:	f000 80d9 	beq.w	800528c <_printf_i+0x1d4>
 80050da:	2f58      	cmp	r7, #88	; 0x58
 80050dc:	f000 80a4 	beq.w	8005228 <_printf_i+0x170>
 80050e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80050e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80050e8:	e03a      	b.n	8005160 <_printf_i+0xa8>
 80050ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80050ee:	2b15      	cmp	r3, #21
 80050f0:	d8f6      	bhi.n	80050e0 <_printf_i+0x28>
 80050f2:	a101      	add	r1, pc, #4	; (adr r1, 80050f8 <_printf_i+0x40>)
 80050f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050f8:	08005151 	.word	0x08005151
 80050fc:	08005165 	.word	0x08005165
 8005100:	080050e1 	.word	0x080050e1
 8005104:	080050e1 	.word	0x080050e1
 8005108:	080050e1 	.word	0x080050e1
 800510c:	080050e1 	.word	0x080050e1
 8005110:	08005165 	.word	0x08005165
 8005114:	080050e1 	.word	0x080050e1
 8005118:	080050e1 	.word	0x080050e1
 800511c:	080050e1 	.word	0x080050e1
 8005120:	080050e1 	.word	0x080050e1
 8005124:	08005273 	.word	0x08005273
 8005128:	08005195 	.word	0x08005195
 800512c:	08005255 	.word	0x08005255
 8005130:	080050e1 	.word	0x080050e1
 8005134:	080050e1 	.word	0x080050e1
 8005138:	08005295 	.word	0x08005295
 800513c:	080050e1 	.word	0x080050e1
 8005140:	08005195 	.word	0x08005195
 8005144:	080050e1 	.word	0x080050e1
 8005148:	080050e1 	.word	0x080050e1
 800514c:	0800525d 	.word	0x0800525d
 8005150:	682b      	ldr	r3, [r5, #0]
 8005152:	1d1a      	adds	r2, r3, #4
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	602a      	str	r2, [r5, #0]
 8005158:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800515c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005160:	2301      	movs	r3, #1
 8005162:	e0a4      	b.n	80052ae <_printf_i+0x1f6>
 8005164:	6820      	ldr	r0, [r4, #0]
 8005166:	6829      	ldr	r1, [r5, #0]
 8005168:	0606      	lsls	r6, r0, #24
 800516a:	f101 0304 	add.w	r3, r1, #4
 800516e:	d50a      	bpl.n	8005186 <_printf_i+0xce>
 8005170:	680e      	ldr	r6, [r1, #0]
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	2e00      	cmp	r6, #0
 8005176:	da03      	bge.n	8005180 <_printf_i+0xc8>
 8005178:	232d      	movs	r3, #45	; 0x2d
 800517a:	4276      	negs	r6, r6
 800517c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005180:	230a      	movs	r3, #10
 8005182:	485e      	ldr	r0, [pc, #376]	; (80052fc <_printf_i+0x244>)
 8005184:	e019      	b.n	80051ba <_printf_i+0x102>
 8005186:	680e      	ldr	r6, [r1, #0]
 8005188:	f010 0f40 	tst.w	r0, #64	; 0x40
 800518c:	602b      	str	r3, [r5, #0]
 800518e:	bf18      	it	ne
 8005190:	b236      	sxthne	r6, r6
 8005192:	e7ef      	b.n	8005174 <_printf_i+0xbc>
 8005194:	682b      	ldr	r3, [r5, #0]
 8005196:	6820      	ldr	r0, [r4, #0]
 8005198:	1d19      	adds	r1, r3, #4
 800519a:	6029      	str	r1, [r5, #0]
 800519c:	0601      	lsls	r1, r0, #24
 800519e:	d501      	bpl.n	80051a4 <_printf_i+0xec>
 80051a0:	681e      	ldr	r6, [r3, #0]
 80051a2:	e002      	b.n	80051aa <_printf_i+0xf2>
 80051a4:	0646      	lsls	r6, r0, #25
 80051a6:	d5fb      	bpl.n	80051a0 <_printf_i+0xe8>
 80051a8:	881e      	ldrh	r6, [r3, #0]
 80051aa:	2f6f      	cmp	r7, #111	; 0x6f
 80051ac:	bf0c      	ite	eq
 80051ae:	2308      	moveq	r3, #8
 80051b0:	230a      	movne	r3, #10
 80051b2:	4852      	ldr	r0, [pc, #328]	; (80052fc <_printf_i+0x244>)
 80051b4:	2100      	movs	r1, #0
 80051b6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051ba:	6865      	ldr	r5, [r4, #4]
 80051bc:	2d00      	cmp	r5, #0
 80051be:	bfa8      	it	ge
 80051c0:	6821      	ldrge	r1, [r4, #0]
 80051c2:	60a5      	str	r5, [r4, #8]
 80051c4:	bfa4      	itt	ge
 80051c6:	f021 0104 	bicge.w	r1, r1, #4
 80051ca:	6021      	strge	r1, [r4, #0]
 80051cc:	b90e      	cbnz	r6, 80051d2 <_printf_i+0x11a>
 80051ce:	2d00      	cmp	r5, #0
 80051d0:	d04d      	beq.n	800526e <_printf_i+0x1b6>
 80051d2:	4615      	mov	r5, r2
 80051d4:	fbb6 f1f3 	udiv	r1, r6, r3
 80051d8:	fb03 6711 	mls	r7, r3, r1, r6
 80051dc:	5dc7      	ldrb	r7, [r0, r7]
 80051de:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80051e2:	4637      	mov	r7, r6
 80051e4:	42bb      	cmp	r3, r7
 80051e6:	460e      	mov	r6, r1
 80051e8:	d9f4      	bls.n	80051d4 <_printf_i+0x11c>
 80051ea:	2b08      	cmp	r3, #8
 80051ec:	d10b      	bne.n	8005206 <_printf_i+0x14e>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	07de      	lsls	r6, r3, #31
 80051f2:	d508      	bpl.n	8005206 <_printf_i+0x14e>
 80051f4:	6923      	ldr	r3, [r4, #16]
 80051f6:	6861      	ldr	r1, [r4, #4]
 80051f8:	4299      	cmp	r1, r3
 80051fa:	bfde      	ittt	le
 80051fc:	2330      	movle	r3, #48	; 0x30
 80051fe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005202:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005206:	1b52      	subs	r2, r2, r5
 8005208:	6122      	str	r2, [r4, #16]
 800520a:	464b      	mov	r3, r9
 800520c:	4621      	mov	r1, r4
 800520e:	4640      	mov	r0, r8
 8005210:	f8cd a000 	str.w	sl, [sp]
 8005214:	aa03      	add	r2, sp, #12
 8005216:	f7ff fedf 	bl	8004fd8 <_printf_common>
 800521a:	3001      	adds	r0, #1
 800521c:	d14c      	bne.n	80052b8 <_printf_i+0x200>
 800521e:	f04f 30ff 	mov.w	r0, #4294967295
 8005222:	b004      	add	sp, #16
 8005224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005228:	4834      	ldr	r0, [pc, #208]	; (80052fc <_printf_i+0x244>)
 800522a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800522e:	6829      	ldr	r1, [r5, #0]
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f851 6b04 	ldr.w	r6, [r1], #4
 8005236:	6029      	str	r1, [r5, #0]
 8005238:	061d      	lsls	r5, r3, #24
 800523a:	d514      	bpl.n	8005266 <_printf_i+0x1ae>
 800523c:	07df      	lsls	r7, r3, #31
 800523e:	bf44      	itt	mi
 8005240:	f043 0320 	orrmi.w	r3, r3, #32
 8005244:	6023      	strmi	r3, [r4, #0]
 8005246:	b91e      	cbnz	r6, 8005250 <_printf_i+0x198>
 8005248:	6823      	ldr	r3, [r4, #0]
 800524a:	f023 0320 	bic.w	r3, r3, #32
 800524e:	6023      	str	r3, [r4, #0]
 8005250:	2310      	movs	r3, #16
 8005252:	e7af      	b.n	80051b4 <_printf_i+0xfc>
 8005254:	6823      	ldr	r3, [r4, #0]
 8005256:	f043 0320 	orr.w	r3, r3, #32
 800525a:	6023      	str	r3, [r4, #0]
 800525c:	2378      	movs	r3, #120	; 0x78
 800525e:	4828      	ldr	r0, [pc, #160]	; (8005300 <_printf_i+0x248>)
 8005260:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005264:	e7e3      	b.n	800522e <_printf_i+0x176>
 8005266:	0659      	lsls	r1, r3, #25
 8005268:	bf48      	it	mi
 800526a:	b2b6      	uxthmi	r6, r6
 800526c:	e7e6      	b.n	800523c <_printf_i+0x184>
 800526e:	4615      	mov	r5, r2
 8005270:	e7bb      	b.n	80051ea <_printf_i+0x132>
 8005272:	682b      	ldr	r3, [r5, #0]
 8005274:	6826      	ldr	r6, [r4, #0]
 8005276:	1d18      	adds	r0, r3, #4
 8005278:	6961      	ldr	r1, [r4, #20]
 800527a:	6028      	str	r0, [r5, #0]
 800527c:	0635      	lsls	r5, r6, #24
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	d501      	bpl.n	8005286 <_printf_i+0x1ce>
 8005282:	6019      	str	r1, [r3, #0]
 8005284:	e002      	b.n	800528c <_printf_i+0x1d4>
 8005286:	0670      	lsls	r0, r6, #25
 8005288:	d5fb      	bpl.n	8005282 <_printf_i+0x1ca>
 800528a:	8019      	strh	r1, [r3, #0]
 800528c:	2300      	movs	r3, #0
 800528e:	4615      	mov	r5, r2
 8005290:	6123      	str	r3, [r4, #16]
 8005292:	e7ba      	b.n	800520a <_printf_i+0x152>
 8005294:	682b      	ldr	r3, [r5, #0]
 8005296:	2100      	movs	r1, #0
 8005298:	1d1a      	adds	r2, r3, #4
 800529a:	602a      	str	r2, [r5, #0]
 800529c:	681d      	ldr	r5, [r3, #0]
 800529e:	6862      	ldr	r2, [r4, #4]
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 fed7 	bl	8006054 <memchr>
 80052a6:	b108      	cbz	r0, 80052ac <_printf_i+0x1f4>
 80052a8:	1b40      	subs	r0, r0, r5
 80052aa:	6060      	str	r0, [r4, #4]
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2300      	movs	r3, #0
 80052b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052b6:	e7a8      	b.n	800520a <_printf_i+0x152>
 80052b8:	462a      	mov	r2, r5
 80052ba:	4649      	mov	r1, r9
 80052bc:	4640      	mov	r0, r8
 80052be:	6923      	ldr	r3, [r4, #16]
 80052c0:	47d0      	blx	sl
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0ab      	beq.n	800521e <_printf_i+0x166>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	079b      	lsls	r3, r3, #30
 80052ca:	d413      	bmi.n	80052f4 <_printf_i+0x23c>
 80052cc:	68e0      	ldr	r0, [r4, #12]
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	4298      	cmp	r0, r3
 80052d2:	bfb8      	it	lt
 80052d4:	4618      	movlt	r0, r3
 80052d6:	e7a4      	b.n	8005222 <_printf_i+0x16a>
 80052d8:	2301      	movs	r3, #1
 80052da:	4632      	mov	r2, r6
 80052dc:	4649      	mov	r1, r9
 80052de:	4640      	mov	r0, r8
 80052e0:	47d0      	blx	sl
 80052e2:	3001      	adds	r0, #1
 80052e4:	d09b      	beq.n	800521e <_printf_i+0x166>
 80052e6:	3501      	adds	r5, #1
 80052e8:	68e3      	ldr	r3, [r4, #12]
 80052ea:	9903      	ldr	r1, [sp, #12]
 80052ec:	1a5b      	subs	r3, r3, r1
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	dcf2      	bgt.n	80052d8 <_printf_i+0x220>
 80052f2:	e7eb      	b.n	80052cc <_printf_i+0x214>
 80052f4:	2500      	movs	r5, #0
 80052f6:	f104 0619 	add.w	r6, r4, #25
 80052fa:	e7f5      	b.n	80052e8 <_printf_i+0x230>
 80052fc:	080078a6 	.word	0x080078a6
 8005300:	080078b7 	.word	0x080078b7

08005304 <siprintf>:
 8005304:	b40e      	push	{r1, r2, r3}
 8005306:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800530a:	b500      	push	{lr}
 800530c:	b09c      	sub	sp, #112	; 0x70
 800530e:	ab1d      	add	r3, sp, #116	; 0x74
 8005310:	9002      	str	r0, [sp, #8]
 8005312:	9006      	str	r0, [sp, #24]
 8005314:	9107      	str	r1, [sp, #28]
 8005316:	9104      	str	r1, [sp, #16]
 8005318:	4808      	ldr	r0, [pc, #32]	; (800533c <siprintf+0x38>)
 800531a:	4909      	ldr	r1, [pc, #36]	; (8005340 <siprintf+0x3c>)
 800531c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005320:	9105      	str	r1, [sp, #20]
 8005322:	6800      	ldr	r0, [r0, #0]
 8005324:	a902      	add	r1, sp, #8
 8005326:	9301      	str	r3, [sp, #4]
 8005328:	f001 fb7e 	bl	8006a28 <_svfiprintf_r>
 800532c:	2200      	movs	r2, #0
 800532e:	9b02      	ldr	r3, [sp, #8]
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	b01c      	add	sp, #112	; 0x70
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b003      	add	sp, #12
 800533a:	4770      	bx	lr
 800533c:	20000010 	.word	0x20000010
 8005340:	ffff0208 	.word	0xffff0208

08005344 <quorem>:
 8005344:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005348:	6903      	ldr	r3, [r0, #16]
 800534a:	690c      	ldr	r4, [r1, #16]
 800534c:	4607      	mov	r7, r0
 800534e:	42a3      	cmp	r3, r4
 8005350:	f2c0 8082 	blt.w	8005458 <quorem+0x114>
 8005354:	3c01      	subs	r4, #1
 8005356:	f100 0514 	add.w	r5, r0, #20
 800535a:	f101 0814 	add.w	r8, r1, #20
 800535e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005362:	9301      	str	r3, [sp, #4]
 8005364:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005368:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800536c:	3301      	adds	r3, #1
 800536e:	429a      	cmp	r2, r3
 8005370:	fbb2 f6f3 	udiv	r6, r2, r3
 8005374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800537c:	d331      	bcc.n	80053e2 <quorem+0x9e>
 800537e:	f04f 0e00 	mov.w	lr, #0
 8005382:	4640      	mov	r0, r8
 8005384:	46ac      	mov	ip, r5
 8005386:	46f2      	mov	sl, lr
 8005388:	f850 2b04 	ldr.w	r2, [r0], #4
 800538c:	b293      	uxth	r3, r2
 800538e:	fb06 e303 	mla	r3, r6, r3, lr
 8005392:	0c12      	lsrs	r2, r2, #16
 8005394:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005398:	b29b      	uxth	r3, r3
 800539a:	fb06 e202 	mla	r2, r6, r2, lr
 800539e:	ebaa 0303 	sub.w	r3, sl, r3
 80053a2:	f8dc a000 	ldr.w	sl, [ip]
 80053a6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80053aa:	fa1f fa8a 	uxth.w	sl, sl
 80053ae:	4453      	add	r3, sl
 80053b0:	f8dc a000 	ldr.w	sl, [ip]
 80053b4:	b292      	uxth	r2, r2
 80053b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80053ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80053be:	b29b      	uxth	r3, r3
 80053c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80053c4:	4581      	cmp	r9, r0
 80053c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80053ca:	f84c 3b04 	str.w	r3, [ip], #4
 80053ce:	d2db      	bcs.n	8005388 <quorem+0x44>
 80053d0:	f855 300b 	ldr.w	r3, [r5, fp]
 80053d4:	b92b      	cbnz	r3, 80053e2 <quorem+0x9e>
 80053d6:	9b01      	ldr	r3, [sp, #4]
 80053d8:	3b04      	subs	r3, #4
 80053da:	429d      	cmp	r5, r3
 80053dc:	461a      	mov	r2, r3
 80053de:	d32f      	bcc.n	8005440 <quorem+0xfc>
 80053e0:	613c      	str	r4, [r7, #16]
 80053e2:	4638      	mov	r0, r7
 80053e4:	f001 f8d0 	bl	8006588 <__mcmp>
 80053e8:	2800      	cmp	r0, #0
 80053ea:	db25      	blt.n	8005438 <quorem+0xf4>
 80053ec:	4628      	mov	r0, r5
 80053ee:	f04f 0c00 	mov.w	ip, #0
 80053f2:	3601      	adds	r6, #1
 80053f4:	f858 1b04 	ldr.w	r1, [r8], #4
 80053f8:	f8d0 e000 	ldr.w	lr, [r0]
 80053fc:	b28b      	uxth	r3, r1
 80053fe:	ebac 0303 	sub.w	r3, ip, r3
 8005402:	fa1f f28e 	uxth.w	r2, lr
 8005406:	4413      	add	r3, r2
 8005408:	0c0a      	lsrs	r2, r1, #16
 800540a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800540e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005412:	b29b      	uxth	r3, r3
 8005414:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005418:	45c1      	cmp	r9, r8
 800541a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800541e:	f840 3b04 	str.w	r3, [r0], #4
 8005422:	d2e7      	bcs.n	80053f4 <quorem+0xb0>
 8005424:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005428:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800542c:	b922      	cbnz	r2, 8005438 <quorem+0xf4>
 800542e:	3b04      	subs	r3, #4
 8005430:	429d      	cmp	r5, r3
 8005432:	461a      	mov	r2, r3
 8005434:	d30a      	bcc.n	800544c <quorem+0x108>
 8005436:	613c      	str	r4, [r7, #16]
 8005438:	4630      	mov	r0, r6
 800543a:	b003      	add	sp, #12
 800543c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005440:	6812      	ldr	r2, [r2, #0]
 8005442:	3b04      	subs	r3, #4
 8005444:	2a00      	cmp	r2, #0
 8005446:	d1cb      	bne.n	80053e0 <quorem+0x9c>
 8005448:	3c01      	subs	r4, #1
 800544a:	e7c6      	b.n	80053da <quorem+0x96>
 800544c:	6812      	ldr	r2, [r2, #0]
 800544e:	3b04      	subs	r3, #4
 8005450:	2a00      	cmp	r2, #0
 8005452:	d1f0      	bne.n	8005436 <quorem+0xf2>
 8005454:	3c01      	subs	r4, #1
 8005456:	e7eb      	b.n	8005430 <quorem+0xec>
 8005458:	2000      	movs	r0, #0
 800545a:	e7ee      	b.n	800543a <quorem+0xf6>
 800545c:	0000      	movs	r0, r0
	...

08005460 <_dtoa_r>:
 8005460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005464:	4616      	mov	r6, r2
 8005466:	461f      	mov	r7, r3
 8005468:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800546a:	b099      	sub	sp, #100	; 0x64
 800546c:	4605      	mov	r5, r0
 800546e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005472:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005476:	b974      	cbnz	r4, 8005496 <_dtoa_r+0x36>
 8005478:	2010      	movs	r0, #16
 800547a:	f000 fde3 	bl	8006044 <malloc>
 800547e:	4602      	mov	r2, r0
 8005480:	6268      	str	r0, [r5, #36]	; 0x24
 8005482:	b920      	cbnz	r0, 800548e <_dtoa_r+0x2e>
 8005484:	21ea      	movs	r1, #234	; 0xea
 8005486:	4ba8      	ldr	r3, [pc, #672]	; (8005728 <_dtoa_r+0x2c8>)
 8005488:	48a8      	ldr	r0, [pc, #672]	; (800572c <_dtoa_r+0x2cc>)
 800548a:	f001 fbdd 	bl	8006c48 <__assert_func>
 800548e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005492:	6004      	str	r4, [r0, #0]
 8005494:	60c4      	str	r4, [r0, #12]
 8005496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005498:	6819      	ldr	r1, [r3, #0]
 800549a:	b151      	cbz	r1, 80054b2 <_dtoa_r+0x52>
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	2301      	movs	r3, #1
 80054a0:	4093      	lsls	r3, r2
 80054a2:	604a      	str	r2, [r1, #4]
 80054a4:	608b      	str	r3, [r1, #8]
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fe30 	bl	800610c <_Bfree>
 80054ac:	2200      	movs	r2, #0
 80054ae:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	1e3b      	subs	r3, r7, #0
 80054b4:	bfaf      	iteee	ge
 80054b6:	2300      	movge	r3, #0
 80054b8:	2201      	movlt	r2, #1
 80054ba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80054be:	9305      	strlt	r3, [sp, #20]
 80054c0:	bfa8      	it	ge
 80054c2:	f8c8 3000 	strge.w	r3, [r8]
 80054c6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80054ca:	4b99      	ldr	r3, [pc, #612]	; (8005730 <_dtoa_r+0x2d0>)
 80054cc:	bfb8      	it	lt
 80054ce:	f8c8 2000 	strlt.w	r2, [r8]
 80054d2:	ea33 0309 	bics.w	r3, r3, r9
 80054d6:	d119      	bne.n	800550c <_dtoa_r+0xac>
 80054d8:	f242 730f 	movw	r3, #9999	; 0x270f
 80054dc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80054de:	6013      	str	r3, [r2, #0]
 80054e0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80054e4:	4333      	orrs	r3, r6
 80054e6:	f000 857f 	beq.w	8005fe8 <_dtoa_r+0xb88>
 80054ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80054ec:	b953      	cbnz	r3, 8005504 <_dtoa_r+0xa4>
 80054ee:	4b91      	ldr	r3, [pc, #580]	; (8005734 <_dtoa_r+0x2d4>)
 80054f0:	e022      	b.n	8005538 <_dtoa_r+0xd8>
 80054f2:	4b91      	ldr	r3, [pc, #580]	; (8005738 <_dtoa_r+0x2d8>)
 80054f4:	9303      	str	r3, [sp, #12]
 80054f6:	3308      	adds	r3, #8
 80054f8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80054fa:	6013      	str	r3, [r2, #0]
 80054fc:	9803      	ldr	r0, [sp, #12]
 80054fe:	b019      	add	sp, #100	; 0x64
 8005500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005504:	4b8b      	ldr	r3, [pc, #556]	; (8005734 <_dtoa_r+0x2d4>)
 8005506:	9303      	str	r3, [sp, #12]
 8005508:	3303      	adds	r3, #3
 800550a:	e7f5      	b.n	80054f8 <_dtoa_r+0x98>
 800550c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005510:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005514:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005518:	2200      	movs	r2, #0
 800551a:	2300      	movs	r3, #0
 800551c:	f7fb faf8 	bl	8000b10 <__aeabi_dcmpeq>
 8005520:	4680      	mov	r8, r0
 8005522:	b158      	cbz	r0, 800553c <_dtoa_r+0xdc>
 8005524:	2301      	movs	r3, #1
 8005526:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800552c:	2b00      	cmp	r3, #0
 800552e:	f000 8558 	beq.w	8005fe2 <_dtoa_r+0xb82>
 8005532:	4882      	ldr	r0, [pc, #520]	; (800573c <_dtoa_r+0x2dc>)
 8005534:	6018      	str	r0, [r3, #0]
 8005536:	1e43      	subs	r3, r0, #1
 8005538:	9303      	str	r3, [sp, #12]
 800553a:	e7df      	b.n	80054fc <_dtoa_r+0x9c>
 800553c:	ab16      	add	r3, sp, #88	; 0x58
 800553e:	9301      	str	r3, [sp, #4]
 8005540:	ab17      	add	r3, sp, #92	; 0x5c
 8005542:	9300      	str	r3, [sp, #0]
 8005544:	4628      	mov	r0, r5
 8005546:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800554a:	f001 f8c5 	bl	80066d8 <__d2b>
 800554e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005552:	4683      	mov	fp, r0
 8005554:	2c00      	cmp	r4, #0
 8005556:	d07f      	beq.n	8005658 <_dtoa_r+0x1f8>
 8005558:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800555c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800555e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005562:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005566:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800556a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800556e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005572:	2200      	movs	r2, #0
 8005574:	4b72      	ldr	r3, [pc, #456]	; (8005740 <_dtoa_r+0x2e0>)
 8005576:	f7fa feab 	bl	80002d0 <__aeabi_dsub>
 800557a:	a365      	add	r3, pc, #404	; (adr r3, 8005710 <_dtoa_r+0x2b0>)
 800557c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005580:	f7fb f85e 	bl	8000640 <__aeabi_dmul>
 8005584:	a364      	add	r3, pc, #400	; (adr r3, 8005718 <_dtoa_r+0x2b8>)
 8005586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558a:	f7fa fea3 	bl	80002d4 <__adddf3>
 800558e:	4606      	mov	r6, r0
 8005590:	4620      	mov	r0, r4
 8005592:	460f      	mov	r7, r1
 8005594:	f7fa ffea 	bl	800056c <__aeabi_i2d>
 8005598:	a361      	add	r3, pc, #388	; (adr r3, 8005720 <_dtoa_r+0x2c0>)
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	f7fb f84f 	bl	8000640 <__aeabi_dmul>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4630      	mov	r0, r6
 80055a8:	4639      	mov	r1, r7
 80055aa:	f7fa fe93 	bl	80002d4 <__adddf3>
 80055ae:	4606      	mov	r6, r0
 80055b0:	460f      	mov	r7, r1
 80055b2:	f7fb faf5 	bl	8000ba0 <__aeabi_d2iz>
 80055b6:	2200      	movs	r2, #0
 80055b8:	4682      	mov	sl, r0
 80055ba:	2300      	movs	r3, #0
 80055bc:	4630      	mov	r0, r6
 80055be:	4639      	mov	r1, r7
 80055c0:	f7fb fab0 	bl	8000b24 <__aeabi_dcmplt>
 80055c4:	b148      	cbz	r0, 80055da <_dtoa_r+0x17a>
 80055c6:	4650      	mov	r0, sl
 80055c8:	f7fa ffd0 	bl	800056c <__aeabi_i2d>
 80055cc:	4632      	mov	r2, r6
 80055ce:	463b      	mov	r3, r7
 80055d0:	f7fb fa9e 	bl	8000b10 <__aeabi_dcmpeq>
 80055d4:	b908      	cbnz	r0, 80055da <_dtoa_r+0x17a>
 80055d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055da:	f1ba 0f16 	cmp.w	sl, #22
 80055de:	d858      	bhi.n	8005692 <_dtoa_r+0x232>
 80055e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055e4:	4b57      	ldr	r3, [pc, #348]	; (8005744 <_dtoa_r+0x2e4>)
 80055e6:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f7fb fa99 	bl	8000b24 <__aeabi_dcmplt>
 80055f2:	2800      	cmp	r0, #0
 80055f4:	d04f      	beq.n	8005696 <_dtoa_r+0x236>
 80055f6:	2300      	movs	r3, #0
 80055f8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80055fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80055fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005600:	1b1c      	subs	r4, r3, r4
 8005602:	1e63      	subs	r3, r4, #1
 8005604:	9309      	str	r3, [sp, #36]	; 0x24
 8005606:	bf49      	itett	mi
 8005608:	f1c4 0301 	rsbmi	r3, r4, #1
 800560c:	2300      	movpl	r3, #0
 800560e:	9306      	strmi	r3, [sp, #24]
 8005610:	2300      	movmi	r3, #0
 8005612:	bf54      	ite	pl
 8005614:	9306      	strpl	r3, [sp, #24]
 8005616:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005618:	f1ba 0f00 	cmp.w	sl, #0
 800561c:	db3d      	blt.n	800569a <_dtoa_r+0x23a>
 800561e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005620:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8005624:	4453      	add	r3, sl
 8005626:	9309      	str	r3, [sp, #36]	; 0x24
 8005628:	2300      	movs	r3, #0
 800562a:	930a      	str	r3, [sp, #40]	; 0x28
 800562c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800562e:	2b09      	cmp	r3, #9
 8005630:	f200 808c 	bhi.w	800574c <_dtoa_r+0x2ec>
 8005634:	2b05      	cmp	r3, #5
 8005636:	bfc4      	itt	gt
 8005638:	3b04      	subgt	r3, #4
 800563a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800563c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800563e:	bfc8      	it	gt
 8005640:	2400      	movgt	r4, #0
 8005642:	f1a3 0302 	sub.w	r3, r3, #2
 8005646:	bfd8      	it	le
 8005648:	2401      	movle	r4, #1
 800564a:	2b03      	cmp	r3, #3
 800564c:	f200 808a 	bhi.w	8005764 <_dtoa_r+0x304>
 8005650:	e8df f003 	tbb	[pc, r3]
 8005654:	5b4d4f2d 	.word	0x5b4d4f2d
 8005658:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800565c:	441c      	add	r4, r3
 800565e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005662:	2b20      	cmp	r3, #32
 8005664:	bfc3      	ittte	gt
 8005666:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800566a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800566e:	fa09 f303 	lslgt.w	r3, r9, r3
 8005672:	f1c3 0320 	rsble	r3, r3, #32
 8005676:	bfc6      	itte	gt
 8005678:	fa26 f000 	lsrgt.w	r0, r6, r0
 800567c:	4318      	orrgt	r0, r3
 800567e:	fa06 f003 	lslle.w	r0, r6, r3
 8005682:	f7fa ff63 	bl	800054c <__aeabi_ui2d>
 8005686:	2301      	movs	r3, #1
 8005688:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800568c:	3c01      	subs	r4, #1
 800568e:	9313      	str	r3, [sp, #76]	; 0x4c
 8005690:	e76f      	b.n	8005572 <_dtoa_r+0x112>
 8005692:	2301      	movs	r3, #1
 8005694:	e7b2      	b.n	80055fc <_dtoa_r+0x19c>
 8005696:	900f      	str	r0, [sp, #60]	; 0x3c
 8005698:	e7b1      	b.n	80055fe <_dtoa_r+0x19e>
 800569a:	9b06      	ldr	r3, [sp, #24]
 800569c:	eba3 030a 	sub.w	r3, r3, sl
 80056a0:	9306      	str	r3, [sp, #24]
 80056a2:	f1ca 0300 	rsb	r3, sl, #0
 80056a6:	930a      	str	r3, [sp, #40]	; 0x28
 80056a8:	2300      	movs	r3, #0
 80056aa:	930e      	str	r3, [sp, #56]	; 0x38
 80056ac:	e7be      	b.n	800562c <_dtoa_r+0x1cc>
 80056ae:	2300      	movs	r3, #0
 80056b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80056b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	dc58      	bgt.n	800576a <_dtoa_r+0x30a>
 80056b8:	f04f 0901 	mov.w	r9, #1
 80056bc:	464b      	mov	r3, r9
 80056be:	f8cd 9020 	str.w	r9, [sp, #32]
 80056c2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80056c6:	2200      	movs	r2, #0
 80056c8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80056ca:	6042      	str	r2, [r0, #4]
 80056cc:	2204      	movs	r2, #4
 80056ce:	f102 0614 	add.w	r6, r2, #20
 80056d2:	429e      	cmp	r6, r3
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	d94e      	bls.n	8005776 <_dtoa_r+0x316>
 80056d8:	4628      	mov	r0, r5
 80056da:	f000 fcd7 	bl	800608c <_Balloc>
 80056de:	9003      	str	r0, [sp, #12]
 80056e0:	2800      	cmp	r0, #0
 80056e2:	d14c      	bne.n	800577e <_dtoa_r+0x31e>
 80056e4:	4602      	mov	r2, r0
 80056e6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80056ea:	4b17      	ldr	r3, [pc, #92]	; (8005748 <_dtoa_r+0x2e8>)
 80056ec:	e6cc      	b.n	8005488 <_dtoa_r+0x28>
 80056ee:	2301      	movs	r3, #1
 80056f0:	e7de      	b.n	80056b0 <_dtoa_r+0x250>
 80056f2:	2300      	movs	r3, #0
 80056f4:	930b      	str	r3, [sp, #44]	; 0x2c
 80056f6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056f8:	eb0a 0903 	add.w	r9, sl, r3
 80056fc:	f109 0301 	add.w	r3, r9, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	9308      	str	r3, [sp, #32]
 8005704:	bfb8      	it	lt
 8005706:	2301      	movlt	r3, #1
 8005708:	e7dd      	b.n	80056c6 <_dtoa_r+0x266>
 800570a:	2301      	movs	r3, #1
 800570c:	e7f2      	b.n	80056f4 <_dtoa_r+0x294>
 800570e:	bf00      	nop
 8005710:	636f4361 	.word	0x636f4361
 8005714:	3fd287a7 	.word	0x3fd287a7
 8005718:	8b60c8b3 	.word	0x8b60c8b3
 800571c:	3fc68a28 	.word	0x3fc68a28
 8005720:	509f79fb 	.word	0x509f79fb
 8005724:	3fd34413 	.word	0x3fd34413
 8005728:	080078d5 	.word	0x080078d5
 800572c:	080078ec 	.word	0x080078ec
 8005730:	7ff00000 	.word	0x7ff00000
 8005734:	080078d1 	.word	0x080078d1
 8005738:	080078c8 	.word	0x080078c8
 800573c:	080078a5 	.word	0x080078a5
 8005740:	3ff80000 	.word	0x3ff80000
 8005744:	080079e0 	.word	0x080079e0
 8005748:	08007947 	.word	0x08007947
 800574c:	2401      	movs	r4, #1
 800574e:	2300      	movs	r3, #0
 8005750:	940b      	str	r4, [sp, #44]	; 0x2c
 8005752:	9322      	str	r3, [sp, #136]	; 0x88
 8005754:	f04f 39ff 	mov.w	r9, #4294967295
 8005758:	2200      	movs	r2, #0
 800575a:	2312      	movs	r3, #18
 800575c:	f8cd 9020 	str.w	r9, [sp, #32]
 8005760:	9223      	str	r2, [sp, #140]	; 0x8c
 8005762:	e7b0      	b.n	80056c6 <_dtoa_r+0x266>
 8005764:	2301      	movs	r3, #1
 8005766:	930b      	str	r3, [sp, #44]	; 0x2c
 8005768:	e7f4      	b.n	8005754 <_dtoa_r+0x2f4>
 800576a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800576e:	464b      	mov	r3, r9
 8005770:	f8cd 9020 	str.w	r9, [sp, #32]
 8005774:	e7a7      	b.n	80056c6 <_dtoa_r+0x266>
 8005776:	3101      	adds	r1, #1
 8005778:	6041      	str	r1, [r0, #4]
 800577a:	0052      	lsls	r2, r2, #1
 800577c:	e7a7      	b.n	80056ce <_dtoa_r+0x26e>
 800577e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005780:	9a03      	ldr	r2, [sp, #12]
 8005782:	601a      	str	r2, [r3, #0]
 8005784:	9b08      	ldr	r3, [sp, #32]
 8005786:	2b0e      	cmp	r3, #14
 8005788:	f200 80a8 	bhi.w	80058dc <_dtoa_r+0x47c>
 800578c:	2c00      	cmp	r4, #0
 800578e:	f000 80a5 	beq.w	80058dc <_dtoa_r+0x47c>
 8005792:	f1ba 0f00 	cmp.w	sl, #0
 8005796:	dd34      	ble.n	8005802 <_dtoa_r+0x3a2>
 8005798:	4a9a      	ldr	r2, [pc, #616]	; (8005a04 <_dtoa_r+0x5a4>)
 800579a:	f00a 030f 	and.w	r3, sl, #15
 800579e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80057a2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80057a6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80057aa:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80057ae:	ea4f 142a 	mov.w	r4, sl, asr #4
 80057b2:	d016      	beq.n	80057e2 <_dtoa_r+0x382>
 80057b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80057b8:	4b93      	ldr	r3, [pc, #588]	; (8005a08 <_dtoa_r+0x5a8>)
 80057ba:	2703      	movs	r7, #3
 80057bc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80057c0:	f7fb f868 	bl	8000894 <__aeabi_ddiv>
 80057c4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057c8:	f004 040f 	and.w	r4, r4, #15
 80057cc:	4e8e      	ldr	r6, [pc, #568]	; (8005a08 <_dtoa_r+0x5a8>)
 80057ce:	b954      	cbnz	r4, 80057e6 <_dtoa_r+0x386>
 80057d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057d8:	f7fb f85c 	bl	8000894 <__aeabi_ddiv>
 80057dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057e0:	e029      	b.n	8005836 <_dtoa_r+0x3d6>
 80057e2:	2702      	movs	r7, #2
 80057e4:	e7f2      	b.n	80057cc <_dtoa_r+0x36c>
 80057e6:	07e1      	lsls	r1, r4, #31
 80057e8:	d508      	bpl.n	80057fc <_dtoa_r+0x39c>
 80057ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057ee:	e9d6 2300 	ldrd	r2, r3, [r6]
 80057f2:	f7fa ff25 	bl	8000640 <__aeabi_dmul>
 80057f6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057fa:	3701      	adds	r7, #1
 80057fc:	1064      	asrs	r4, r4, #1
 80057fe:	3608      	adds	r6, #8
 8005800:	e7e5      	b.n	80057ce <_dtoa_r+0x36e>
 8005802:	f000 80a5 	beq.w	8005950 <_dtoa_r+0x4f0>
 8005806:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800580a:	f1ca 0400 	rsb	r4, sl, #0
 800580e:	4b7d      	ldr	r3, [pc, #500]	; (8005a04 <_dtoa_r+0x5a4>)
 8005810:	f004 020f 	and.w	r2, r4, #15
 8005814:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800581c:	f7fa ff10 	bl	8000640 <__aeabi_dmul>
 8005820:	2702      	movs	r7, #2
 8005822:	2300      	movs	r3, #0
 8005824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005828:	4e77      	ldr	r6, [pc, #476]	; (8005a08 <_dtoa_r+0x5a8>)
 800582a:	1124      	asrs	r4, r4, #4
 800582c:	2c00      	cmp	r4, #0
 800582e:	f040 8084 	bne.w	800593a <_dtoa_r+0x4da>
 8005832:	2b00      	cmp	r3, #0
 8005834:	d1d2      	bne.n	80057dc <_dtoa_r+0x37c>
 8005836:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005838:	2b00      	cmp	r3, #0
 800583a:	f000 808b 	beq.w	8005954 <_dtoa_r+0x4f4>
 800583e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005842:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005846:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800584a:	2200      	movs	r2, #0
 800584c:	4b6f      	ldr	r3, [pc, #444]	; (8005a0c <_dtoa_r+0x5ac>)
 800584e:	f7fb f969 	bl	8000b24 <__aeabi_dcmplt>
 8005852:	2800      	cmp	r0, #0
 8005854:	d07e      	beq.n	8005954 <_dtoa_r+0x4f4>
 8005856:	9b08      	ldr	r3, [sp, #32]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d07b      	beq.n	8005954 <_dtoa_r+0x4f4>
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	dd38      	ble.n	80058d4 <_dtoa_r+0x474>
 8005862:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005866:	2200      	movs	r2, #0
 8005868:	4b69      	ldr	r3, [pc, #420]	; (8005a10 <_dtoa_r+0x5b0>)
 800586a:	f7fa fee9 	bl	8000640 <__aeabi_dmul>
 800586e:	464c      	mov	r4, r9
 8005870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005874:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005878:	3701      	adds	r7, #1
 800587a:	4638      	mov	r0, r7
 800587c:	f7fa fe76 	bl	800056c <__aeabi_i2d>
 8005880:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005884:	f7fa fedc 	bl	8000640 <__aeabi_dmul>
 8005888:	2200      	movs	r2, #0
 800588a:	4b62      	ldr	r3, [pc, #392]	; (8005a14 <_dtoa_r+0x5b4>)
 800588c:	f7fa fd22 	bl	80002d4 <__adddf3>
 8005890:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005894:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005898:	9611      	str	r6, [sp, #68]	; 0x44
 800589a:	2c00      	cmp	r4, #0
 800589c:	d15d      	bne.n	800595a <_dtoa_r+0x4fa>
 800589e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058a2:	2200      	movs	r2, #0
 80058a4:	4b5c      	ldr	r3, [pc, #368]	; (8005a18 <_dtoa_r+0x5b8>)
 80058a6:	f7fa fd13 	bl	80002d0 <__aeabi_dsub>
 80058aa:	4602      	mov	r2, r0
 80058ac:	460b      	mov	r3, r1
 80058ae:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058b2:	4633      	mov	r3, r6
 80058b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058b6:	f7fb f953 	bl	8000b60 <__aeabi_dcmpgt>
 80058ba:	2800      	cmp	r0, #0
 80058bc:	f040 829c 	bne.w	8005df8 <_dtoa_r+0x998>
 80058c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80058c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80058c6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80058ca:	f7fb f92b 	bl	8000b24 <__aeabi_dcmplt>
 80058ce:	2800      	cmp	r0, #0
 80058d0:	f040 8290 	bne.w	8005df4 <_dtoa_r+0x994>
 80058d4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80058d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80058dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80058de:	2b00      	cmp	r3, #0
 80058e0:	f2c0 8152 	blt.w	8005b88 <_dtoa_r+0x728>
 80058e4:	f1ba 0f0e 	cmp.w	sl, #14
 80058e8:	f300 814e 	bgt.w	8005b88 <_dtoa_r+0x728>
 80058ec:	4b45      	ldr	r3, [pc, #276]	; (8005a04 <_dtoa_r+0x5a4>)
 80058ee:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80058f2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80058f6:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80058fa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	f280 80db 	bge.w	8005ab8 <_dtoa_r+0x658>
 8005902:	9b08      	ldr	r3, [sp, #32]
 8005904:	2b00      	cmp	r3, #0
 8005906:	f300 80d7 	bgt.w	8005ab8 <_dtoa_r+0x658>
 800590a:	f040 8272 	bne.w	8005df2 <_dtoa_r+0x992>
 800590e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005912:	2200      	movs	r2, #0
 8005914:	4b40      	ldr	r3, [pc, #256]	; (8005a18 <_dtoa_r+0x5b8>)
 8005916:	f7fa fe93 	bl	8000640 <__aeabi_dmul>
 800591a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800591e:	f7fb f915 	bl	8000b4c <__aeabi_dcmpge>
 8005922:	9c08      	ldr	r4, [sp, #32]
 8005924:	4626      	mov	r6, r4
 8005926:	2800      	cmp	r0, #0
 8005928:	f040 8248 	bne.w	8005dbc <_dtoa_r+0x95c>
 800592c:	2331      	movs	r3, #49	; 0x31
 800592e:	9f03      	ldr	r7, [sp, #12]
 8005930:	f10a 0a01 	add.w	sl, sl, #1
 8005934:	f807 3b01 	strb.w	r3, [r7], #1
 8005938:	e244      	b.n	8005dc4 <_dtoa_r+0x964>
 800593a:	07e2      	lsls	r2, r4, #31
 800593c:	d505      	bpl.n	800594a <_dtoa_r+0x4ea>
 800593e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005942:	f7fa fe7d 	bl	8000640 <__aeabi_dmul>
 8005946:	2301      	movs	r3, #1
 8005948:	3701      	adds	r7, #1
 800594a:	1064      	asrs	r4, r4, #1
 800594c:	3608      	adds	r6, #8
 800594e:	e76d      	b.n	800582c <_dtoa_r+0x3cc>
 8005950:	2702      	movs	r7, #2
 8005952:	e770      	b.n	8005836 <_dtoa_r+0x3d6>
 8005954:	46d0      	mov	r8, sl
 8005956:	9c08      	ldr	r4, [sp, #32]
 8005958:	e78f      	b.n	800587a <_dtoa_r+0x41a>
 800595a:	9903      	ldr	r1, [sp, #12]
 800595c:	4b29      	ldr	r3, [pc, #164]	; (8005a04 <_dtoa_r+0x5a4>)
 800595e:	4421      	add	r1, r4
 8005960:	9112      	str	r1, [sp, #72]	; 0x48
 8005962:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005964:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005968:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800596c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005970:	2900      	cmp	r1, #0
 8005972:	d055      	beq.n	8005a20 <_dtoa_r+0x5c0>
 8005974:	2000      	movs	r0, #0
 8005976:	4929      	ldr	r1, [pc, #164]	; (8005a1c <_dtoa_r+0x5bc>)
 8005978:	f7fa ff8c 	bl	8000894 <__aeabi_ddiv>
 800597c:	463b      	mov	r3, r7
 800597e:	4632      	mov	r2, r6
 8005980:	f7fa fca6 	bl	80002d0 <__aeabi_dsub>
 8005984:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005988:	9f03      	ldr	r7, [sp, #12]
 800598a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800598e:	f7fb f907 	bl	8000ba0 <__aeabi_d2iz>
 8005992:	4604      	mov	r4, r0
 8005994:	f7fa fdea 	bl	800056c <__aeabi_i2d>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059a0:	f7fa fc96 	bl	80002d0 <__aeabi_dsub>
 80059a4:	4602      	mov	r2, r0
 80059a6:	460b      	mov	r3, r1
 80059a8:	3430      	adds	r4, #48	; 0x30
 80059aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80059ae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059b2:	f807 4b01 	strb.w	r4, [r7], #1
 80059b6:	f7fb f8b5 	bl	8000b24 <__aeabi_dcmplt>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	d174      	bne.n	8005aa8 <_dtoa_r+0x648>
 80059be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c2:	2000      	movs	r0, #0
 80059c4:	4911      	ldr	r1, [pc, #68]	; (8005a0c <_dtoa_r+0x5ac>)
 80059c6:	f7fa fc83 	bl	80002d0 <__aeabi_dsub>
 80059ca:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80059ce:	f7fb f8a9 	bl	8000b24 <__aeabi_dcmplt>
 80059d2:	2800      	cmp	r0, #0
 80059d4:	f040 80b7 	bne.w	8005b46 <_dtoa_r+0x6e6>
 80059d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80059da:	429f      	cmp	r7, r3
 80059dc:	f43f af7a 	beq.w	80058d4 <_dtoa_r+0x474>
 80059e0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80059e4:	2200      	movs	r2, #0
 80059e6:	4b0a      	ldr	r3, [pc, #40]	; (8005a10 <_dtoa_r+0x5b0>)
 80059e8:	f7fa fe2a 	bl	8000640 <__aeabi_dmul>
 80059ec:	2200      	movs	r2, #0
 80059ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80059f2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059f6:	4b06      	ldr	r3, [pc, #24]	; (8005a10 <_dtoa_r+0x5b0>)
 80059f8:	f7fa fe22 	bl	8000640 <__aeabi_dmul>
 80059fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a00:	e7c3      	b.n	800598a <_dtoa_r+0x52a>
 8005a02:	bf00      	nop
 8005a04:	080079e0 	.word	0x080079e0
 8005a08:	080079b8 	.word	0x080079b8
 8005a0c:	3ff00000 	.word	0x3ff00000
 8005a10:	40240000 	.word	0x40240000
 8005a14:	401c0000 	.word	0x401c0000
 8005a18:	40140000 	.word	0x40140000
 8005a1c:	3fe00000 	.word	0x3fe00000
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	f7fa fe0c 	bl	8000640 <__aeabi_dmul>
 8005a28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a2a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005a2e:	9c03      	ldr	r4, [sp, #12]
 8005a30:	9314      	str	r3, [sp, #80]	; 0x50
 8005a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a36:	f7fb f8b3 	bl	8000ba0 <__aeabi_d2iz>
 8005a3a:	9015      	str	r0, [sp, #84]	; 0x54
 8005a3c:	f7fa fd96 	bl	800056c <__aeabi_i2d>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a48:	f7fa fc42 	bl	80002d0 <__aeabi_dsub>
 8005a4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005a4e:	4606      	mov	r6, r0
 8005a50:	3330      	adds	r3, #48	; 0x30
 8005a52:	f804 3b01 	strb.w	r3, [r4], #1
 8005a56:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005a58:	460f      	mov	r7, r1
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	f04f 0200 	mov.w	r2, #0
 8005a60:	d124      	bne.n	8005aac <_dtoa_r+0x64c>
 8005a62:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005a66:	4bb0      	ldr	r3, [pc, #704]	; (8005d28 <_dtoa_r+0x8c8>)
 8005a68:	f7fa fc34 	bl	80002d4 <__adddf3>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4630      	mov	r0, r6
 8005a72:	4639      	mov	r1, r7
 8005a74:	f7fb f874 	bl	8000b60 <__aeabi_dcmpgt>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d163      	bne.n	8005b44 <_dtoa_r+0x6e4>
 8005a7c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005a80:	2000      	movs	r0, #0
 8005a82:	49a9      	ldr	r1, [pc, #676]	; (8005d28 <_dtoa_r+0x8c8>)
 8005a84:	f7fa fc24 	bl	80002d0 <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4630      	mov	r0, r6
 8005a8e:	4639      	mov	r1, r7
 8005a90:	f7fb f848 	bl	8000b24 <__aeabi_dcmplt>
 8005a94:	2800      	cmp	r0, #0
 8005a96:	f43f af1d 	beq.w	80058d4 <_dtoa_r+0x474>
 8005a9a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005a9c:	1e7b      	subs	r3, r7, #1
 8005a9e:	9314      	str	r3, [sp, #80]	; 0x50
 8005aa0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005aa4:	2b30      	cmp	r3, #48	; 0x30
 8005aa6:	d0f8      	beq.n	8005a9a <_dtoa_r+0x63a>
 8005aa8:	46c2      	mov	sl, r8
 8005aaa:	e03b      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005aac:	4b9f      	ldr	r3, [pc, #636]	; (8005d2c <_dtoa_r+0x8cc>)
 8005aae:	f7fa fdc7 	bl	8000640 <__aeabi_dmul>
 8005ab2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ab6:	e7bc      	b.n	8005a32 <_dtoa_r+0x5d2>
 8005ab8:	9f03      	ldr	r7, [sp, #12]
 8005aba:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005abe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ac2:	4640      	mov	r0, r8
 8005ac4:	4649      	mov	r1, r9
 8005ac6:	f7fa fee5 	bl	8000894 <__aeabi_ddiv>
 8005aca:	f7fb f869 	bl	8000ba0 <__aeabi_d2iz>
 8005ace:	4604      	mov	r4, r0
 8005ad0:	f7fa fd4c 	bl	800056c <__aeabi_i2d>
 8005ad4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ad8:	f7fa fdb2 	bl	8000640 <__aeabi_dmul>
 8005adc:	4602      	mov	r2, r0
 8005ade:	460b      	mov	r3, r1
 8005ae0:	4640      	mov	r0, r8
 8005ae2:	4649      	mov	r1, r9
 8005ae4:	f7fa fbf4 	bl	80002d0 <__aeabi_dsub>
 8005ae8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005aec:	f807 6b01 	strb.w	r6, [r7], #1
 8005af0:	9e03      	ldr	r6, [sp, #12]
 8005af2:	f8dd c020 	ldr.w	ip, [sp, #32]
 8005af6:	1bbe      	subs	r6, r7, r6
 8005af8:	45b4      	cmp	ip, r6
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	d136      	bne.n	8005b6e <_dtoa_r+0x70e>
 8005b00:	f7fa fbe8 	bl	80002d4 <__adddf3>
 8005b04:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b08:	4680      	mov	r8, r0
 8005b0a:	4689      	mov	r9, r1
 8005b0c:	f7fb f828 	bl	8000b60 <__aeabi_dcmpgt>
 8005b10:	bb58      	cbnz	r0, 8005b6a <_dtoa_r+0x70a>
 8005b12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005b16:	4640      	mov	r0, r8
 8005b18:	4649      	mov	r1, r9
 8005b1a:	f7fa fff9 	bl	8000b10 <__aeabi_dcmpeq>
 8005b1e:	b108      	cbz	r0, 8005b24 <_dtoa_r+0x6c4>
 8005b20:	07e1      	lsls	r1, r4, #31
 8005b22:	d422      	bmi.n	8005b6a <_dtoa_r+0x70a>
 8005b24:	4628      	mov	r0, r5
 8005b26:	4659      	mov	r1, fp
 8005b28:	f000 faf0 	bl	800610c <_Bfree>
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	703b      	strb	r3, [r7, #0]
 8005b30:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005b32:	f10a 0001 	add.w	r0, sl, #1
 8005b36:	6018      	str	r0, [r3, #0]
 8005b38:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f43f acde 	beq.w	80054fc <_dtoa_r+0x9c>
 8005b40:	601f      	str	r7, [r3, #0]
 8005b42:	e4db      	b.n	80054fc <_dtoa_r+0x9c>
 8005b44:	4627      	mov	r7, r4
 8005b46:	463b      	mov	r3, r7
 8005b48:	461f      	mov	r7, r3
 8005b4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b4e:	2a39      	cmp	r2, #57	; 0x39
 8005b50:	d107      	bne.n	8005b62 <_dtoa_r+0x702>
 8005b52:	9a03      	ldr	r2, [sp, #12]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d1f7      	bne.n	8005b48 <_dtoa_r+0x6e8>
 8005b58:	2230      	movs	r2, #48	; 0x30
 8005b5a:	9903      	ldr	r1, [sp, #12]
 8005b5c:	f108 0801 	add.w	r8, r8, #1
 8005b60:	700a      	strb	r2, [r1, #0]
 8005b62:	781a      	ldrb	r2, [r3, #0]
 8005b64:	3201      	adds	r2, #1
 8005b66:	701a      	strb	r2, [r3, #0]
 8005b68:	e79e      	b.n	8005aa8 <_dtoa_r+0x648>
 8005b6a:	46d0      	mov	r8, sl
 8005b6c:	e7eb      	b.n	8005b46 <_dtoa_r+0x6e6>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4b6e      	ldr	r3, [pc, #440]	; (8005d2c <_dtoa_r+0x8cc>)
 8005b72:	f7fa fd65 	bl	8000640 <__aeabi_dmul>
 8005b76:	2200      	movs	r2, #0
 8005b78:	2300      	movs	r3, #0
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	4689      	mov	r9, r1
 8005b7e:	f7fa ffc7 	bl	8000b10 <__aeabi_dcmpeq>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	d09b      	beq.n	8005abe <_dtoa_r+0x65e>
 8005b86:	e7cd      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005b88:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005b8a:	2a00      	cmp	r2, #0
 8005b8c:	f000 80d0 	beq.w	8005d30 <_dtoa_r+0x8d0>
 8005b90:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	f300 80ae 	bgt.w	8005cf4 <_dtoa_r+0x894>
 8005b98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	f000 80a6 	beq.w	8005cec <_dtoa_r+0x88c>
 8005ba0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ba4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005ba6:	9f06      	ldr	r7, [sp, #24]
 8005ba8:	9a06      	ldr	r2, [sp, #24]
 8005baa:	2101      	movs	r1, #1
 8005bac:	441a      	add	r2, r3
 8005bae:	9206      	str	r2, [sp, #24]
 8005bb0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	441a      	add	r2, r3
 8005bb6:	9209      	str	r2, [sp, #36]	; 0x24
 8005bb8:	f000 fb5e 	bl	8006278 <__i2b>
 8005bbc:	4606      	mov	r6, r0
 8005bbe:	2f00      	cmp	r7, #0
 8005bc0:	dd0c      	ble.n	8005bdc <_dtoa_r+0x77c>
 8005bc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dd09      	ble.n	8005bdc <_dtoa_r+0x77c>
 8005bc8:	42bb      	cmp	r3, r7
 8005bca:	bfa8      	it	ge
 8005bcc:	463b      	movge	r3, r7
 8005bce:	9a06      	ldr	r2, [sp, #24]
 8005bd0:	1aff      	subs	r7, r7, r3
 8005bd2:	1ad2      	subs	r2, r2, r3
 8005bd4:	9206      	str	r2, [sp, #24]
 8005bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bd8:	1ad3      	subs	r3, r2, r3
 8005bda:	9309      	str	r3, [sp, #36]	; 0x24
 8005bdc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bde:	b1f3      	cbz	r3, 8005c1e <_dtoa_r+0x7be>
 8005be0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	f000 80a8 	beq.w	8005d38 <_dtoa_r+0x8d8>
 8005be8:	2c00      	cmp	r4, #0
 8005bea:	dd10      	ble.n	8005c0e <_dtoa_r+0x7ae>
 8005bec:	4631      	mov	r1, r6
 8005bee:	4622      	mov	r2, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 fbff 	bl	80063f4 <__pow5mult>
 8005bf6:	465a      	mov	r2, fp
 8005bf8:	4601      	mov	r1, r0
 8005bfa:	4606      	mov	r6, r0
 8005bfc:	4628      	mov	r0, r5
 8005bfe:	f000 fb51 	bl	80062a4 <__multiply>
 8005c02:	4680      	mov	r8, r0
 8005c04:	4659      	mov	r1, fp
 8005c06:	4628      	mov	r0, r5
 8005c08:	f000 fa80 	bl	800610c <_Bfree>
 8005c0c:	46c3      	mov	fp, r8
 8005c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c10:	1b1a      	subs	r2, r3, r4
 8005c12:	d004      	beq.n	8005c1e <_dtoa_r+0x7be>
 8005c14:	4659      	mov	r1, fp
 8005c16:	4628      	mov	r0, r5
 8005c18:	f000 fbec 	bl	80063f4 <__pow5mult>
 8005c1c:	4683      	mov	fp, r0
 8005c1e:	2101      	movs	r1, #1
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fb29 	bl	8006278 <__i2b>
 8005c26:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c28:	4604      	mov	r4, r0
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f340 8086 	ble.w	8005d3c <_dtoa_r+0x8dc>
 8005c30:	461a      	mov	r2, r3
 8005c32:	4601      	mov	r1, r0
 8005c34:	4628      	mov	r0, r5
 8005c36:	f000 fbdd 	bl	80063f4 <__pow5mult>
 8005c3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c3c:	4604      	mov	r4, r0
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	dd7f      	ble.n	8005d42 <_dtoa_r+0x8e2>
 8005c42:	f04f 0800 	mov.w	r8, #0
 8005c46:	6923      	ldr	r3, [r4, #16]
 8005c48:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005c4c:	6918      	ldr	r0, [r3, #16]
 8005c4e:	f000 fac5 	bl	80061dc <__hi0bits>
 8005c52:	f1c0 0020 	rsb	r0, r0, #32
 8005c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c58:	4418      	add	r0, r3
 8005c5a:	f010 001f 	ands.w	r0, r0, #31
 8005c5e:	f000 8092 	beq.w	8005d86 <_dtoa_r+0x926>
 8005c62:	f1c0 0320 	rsb	r3, r0, #32
 8005c66:	2b04      	cmp	r3, #4
 8005c68:	f340 808a 	ble.w	8005d80 <_dtoa_r+0x920>
 8005c6c:	f1c0 001c 	rsb	r0, r0, #28
 8005c70:	9b06      	ldr	r3, [sp, #24]
 8005c72:	4407      	add	r7, r0
 8005c74:	4403      	add	r3, r0
 8005c76:	9306      	str	r3, [sp, #24]
 8005c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c7a:	4403      	add	r3, r0
 8005c7c:	9309      	str	r3, [sp, #36]	; 0x24
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	dd05      	ble.n	8005c90 <_dtoa_r+0x830>
 8005c84:	4659      	mov	r1, fp
 8005c86:	461a      	mov	r2, r3
 8005c88:	4628      	mov	r0, r5
 8005c8a:	f000 fc0d 	bl	80064a8 <__lshift>
 8005c8e:	4683      	mov	fp, r0
 8005c90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	dd05      	ble.n	8005ca2 <_dtoa_r+0x842>
 8005c96:	4621      	mov	r1, r4
 8005c98:	461a      	mov	r2, r3
 8005c9a:	4628      	mov	r0, r5
 8005c9c:	f000 fc04 	bl	80064a8 <__lshift>
 8005ca0:	4604      	mov	r4, r0
 8005ca2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d070      	beq.n	8005d8a <_dtoa_r+0x92a>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4658      	mov	r0, fp
 8005cac:	f000 fc6c 	bl	8006588 <__mcmp>
 8005cb0:	2800      	cmp	r0, #0
 8005cb2:	da6a      	bge.n	8005d8a <_dtoa_r+0x92a>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	4659      	mov	r1, fp
 8005cb8:	220a      	movs	r2, #10
 8005cba:	4628      	mov	r0, r5
 8005cbc:	f000 fa48 	bl	8006150 <__multadd>
 8005cc0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cc2:	4683      	mov	fp, r0
 8005cc4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8194 	beq.w	8005ff6 <_dtoa_r+0xb96>
 8005cce:	4631      	mov	r1, r6
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	220a      	movs	r2, #10
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	f000 fa3b 	bl	8006150 <__multadd>
 8005cda:	f1b9 0f00 	cmp.w	r9, #0
 8005cde:	4606      	mov	r6, r0
 8005ce0:	f300 8093 	bgt.w	8005e0a <_dtoa_r+0x9aa>
 8005ce4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ce6:	2b02      	cmp	r3, #2
 8005ce8:	dc57      	bgt.n	8005d9a <_dtoa_r+0x93a>
 8005cea:	e08e      	b.n	8005e0a <_dtoa_r+0x9aa>
 8005cec:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005cee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005cf2:	e757      	b.n	8005ba4 <_dtoa_r+0x744>
 8005cf4:	9b08      	ldr	r3, [sp, #32]
 8005cf6:	1e5c      	subs	r4, r3, #1
 8005cf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cfa:	42a3      	cmp	r3, r4
 8005cfc:	bfb7      	itett	lt
 8005cfe:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005d00:	1b1c      	subge	r4, r3, r4
 8005d02:	1ae2      	sublt	r2, r4, r3
 8005d04:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005d06:	bfbe      	ittt	lt
 8005d08:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005d0a:	189b      	addlt	r3, r3, r2
 8005d0c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8005d0e:	9b08      	ldr	r3, [sp, #32]
 8005d10:	bfb8      	it	lt
 8005d12:	2400      	movlt	r4, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bfbb      	ittet	lt
 8005d18:	9b06      	ldrlt	r3, [sp, #24]
 8005d1a:	9a08      	ldrlt	r2, [sp, #32]
 8005d1c:	9f06      	ldrge	r7, [sp, #24]
 8005d1e:	1a9f      	sublt	r7, r3, r2
 8005d20:	bfac      	ite	ge
 8005d22:	9b08      	ldrge	r3, [sp, #32]
 8005d24:	2300      	movlt	r3, #0
 8005d26:	e73f      	b.n	8005ba8 <_dtoa_r+0x748>
 8005d28:	3fe00000 	.word	0x3fe00000
 8005d2c:	40240000 	.word	0x40240000
 8005d30:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005d32:	9f06      	ldr	r7, [sp, #24]
 8005d34:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005d36:	e742      	b.n	8005bbe <_dtoa_r+0x75e>
 8005d38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005d3a:	e76b      	b.n	8005c14 <_dtoa_r+0x7b4>
 8005d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	dc19      	bgt.n	8005d76 <_dtoa_r+0x916>
 8005d42:	9b04      	ldr	r3, [sp, #16]
 8005d44:	b9bb      	cbnz	r3, 8005d76 <_dtoa_r+0x916>
 8005d46:	9b05      	ldr	r3, [sp, #20]
 8005d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d4c:	b99b      	cbnz	r3, 8005d76 <_dtoa_r+0x916>
 8005d4e:	9b05      	ldr	r3, [sp, #20]
 8005d50:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d54:	0d1b      	lsrs	r3, r3, #20
 8005d56:	051b      	lsls	r3, r3, #20
 8005d58:	b183      	cbz	r3, 8005d7c <_dtoa_r+0x91c>
 8005d5a:	f04f 0801 	mov.w	r8, #1
 8005d5e:	9b06      	ldr	r3, [sp, #24]
 8005d60:	3301      	adds	r3, #1
 8005d62:	9306      	str	r3, [sp, #24]
 8005d64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d66:	3301      	adds	r3, #1
 8005d68:	9309      	str	r3, [sp, #36]	; 0x24
 8005d6a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	f47f af6a 	bne.w	8005c46 <_dtoa_r+0x7e6>
 8005d72:	2001      	movs	r0, #1
 8005d74:	e76f      	b.n	8005c56 <_dtoa_r+0x7f6>
 8005d76:	f04f 0800 	mov.w	r8, #0
 8005d7a:	e7f6      	b.n	8005d6a <_dtoa_r+0x90a>
 8005d7c:	4698      	mov	r8, r3
 8005d7e:	e7f4      	b.n	8005d6a <_dtoa_r+0x90a>
 8005d80:	f43f af7d 	beq.w	8005c7e <_dtoa_r+0x81e>
 8005d84:	4618      	mov	r0, r3
 8005d86:	301c      	adds	r0, #28
 8005d88:	e772      	b.n	8005c70 <_dtoa_r+0x810>
 8005d8a:	9b08      	ldr	r3, [sp, #32]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dc36      	bgt.n	8005dfe <_dtoa_r+0x99e>
 8005d90:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	dd33      	ble.n	8005dfe <_dtoa_r+0x99e>
 8005d96:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d9a:	f1b9 0f00 	cmp.w	r9, #0
 8005d9e:	d10d      	bne.n	8005dbc <_dtoa_r+0x95c>
 8005da0:	4621      	mov	r1, r4
 8005da2:	464b      	mov	r3, r9
 8005da4:	2205      	movs	r2, #5
 8005da6:	4628      	mov	r0, r5
 8005da8:	f000 f9d2 	bl	8006150 <__multadd>
 8005dac:	4601      	mov	r1, r0
 8005dae:	4604      	mov	r4, r0
 8005db0:	4658      	mov	r0, fp
 8005db2:	f000 fbe9 	bl	8006588 <__mcmp>
 8005db6:	2800      	cmp	r0, #0
 8005db8:	f73f adb8 	bgt.w	800592c <_dtoa_r+0x4cc>
 8005dbc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005dbe:	9f03      	ldr	r7, [sp, #12]
 8005dc0:	ea6f 0a03 	mvn.w	sl, r3
 8005dc4:	f04f 0800 	mov.w	r8, #0
 8005dc8:	4621      	mov	r1, r4
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f000 f99e 	bl	800610c <_Bfree>
 8005dd0:	2e00      	cmp	r6, #0
 8005dd2:	f43f aea7 	beq.w	8005b24 <_dtoa_r+0x6c4>
 8005dd6:	f1b8 0f00 	cmp.w	r8, #0
 8005dda:	d005      	beq.n	8005de8 <_dtoa_r+0x988>
 8005ddc:	45b0      	cmp	r8, r6
 8005dde:	d003      	beq.n	8005de8 <_dtoa_r+0x988>
 8005de0:	4641      	mov	r1, r8
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f992 	bl	800610c <_Bfree>
 8005de8:	4631      	mov	r1, r6
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 f98e 	bl	800610c <_Bfree>
 8005df0:	e698      	b.n	8005b24 <_dtoa_r+0x6c4>
 8005df2:	2400      	movs	r4, #0
 8005df4:	4626      	mov	r6, r4
 8005df6:	e7e1      	b.n	8005dbc <_dtoa_r+0x95c>
 8005df8:	46c2      	mov	sl, r8
 8005dfa:	4626      	mov	r6, r4
 8005dfc:	e596      	b.n	800592c <_dtoa_r+0x4cc>
 8005dfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80fd 	beq.w	8006004 <_dtoa_r+0xba4>
 8005e0a:	2f00      	cmp	r7, #0
 8005e0c:	dd05      	ble.n	8005e1a <_dtoa_r+0x9ba>
 8005e0e:	4631      	mov	r1, r6
 8005e10:	463a      	mov	r2, r7
 8005e12:	4628      	mov	r0, r5
 8005e14:	f000 fb48 	bl	80064a8 <__lshift>
 8005e18:	4606      	mov	r6, r0
 8005e1a:	f1b8 0f00 	cmp.w	r8, #0
 8005e1e:	d05c      	beq.n	8005eda <_dtoa_r+0xa7a>
 8005e20:	4628      	mov	r0, r5
 8005e22:	6871      	ldr	r1, [r6, #4]
 8005e24:	f000 f932 	bl	800608c <_Balloc>
 8005e28:	4607      	mov	r7, r0
 8005e2a:	b928      	cbnz	r0, 8005e38 <_dtoa_r+0x9d8>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005e32:	4b7f      	ldr	r3, [pc, #508]	; (8006030 <_dtoa_r+0xbd0>)
 8005e34:	f7ff bb28 	b.w	8005488 <_dtoa_r+0x28>
 8005e38:	6932      	ldr	r2, [r6, #16]
 8005e3a:	f106 010c 	add.w	r1, r6, #12
 8005e3e:	3202      	adds	r2, #2
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	300c      	adds	r0, #12
 8005e44:	f000 f914 	bl	8006070 <memcpy>
 8005e48:	2201      	movs	r2, #1
 8005e4a:	4639      	mov	r1, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	f000 fb2b 	bl	80064a8 <__lshift>
 8005e52:	46b0      	mov	r8, r6
 8005e54:	4606      	mov	r6, r0
 8005e56:	9b03      	ldr	r3, [sp, #12]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	9308      	str	r3, [sp, #32]
 8005e5c:	9b03      	ldr	r3, [sp, #12]
 8005e5e:	444b      	add	r3, r9
 8005e60:	930a      	str	r3, [sp, #40]	; 0x28
 8005e62:	9b04      	ldr	r3, [sp, #16]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	9309      	str	r3, [sp, #36]	; 0x24
 8005e6a:	9b08      	ldr	r3, [sp, #32]
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	4658      	mov	r0, fp
 8005e72:	9304      	str	r3, [sp, #16]
 8005e74:	f7ff fa66 	bl	8005344 <quorem>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	3330      	adds	r3, #48	; 0x30
 8005e7e:	9006      	str	r0, [sp, #24]
 8005e80:	4658      	mov	r0, fp
 8005e82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005e84:	f000 fb80 	bl	8006588 <__mcmp>
 8005e88:	4632      	mov	r2, r6
 8005e8a:	4681      	mov	r9, r0
 8005e8c:	4621      	mov	r1, r4
 8005e8e:	4628      	mov	r0, r5
 8005e90:	f000 fb96 	bl	80065c0 <__mdiff>
 8005e94:	68c2      	ldr	r2, [r0, #12]
 8005e96:	4607      	mov	r7, r0
 8005e98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e9a:	bb02      	cbnz	r2, 8005ede <_dtoa_r+0xa7e>
 8005e9c:	4601      	mov	r1, r0
 8005e9e:	4658      	mov	r0, fp
 8005ea0:	f000 fb72 	bl	8006588 <__mcmp>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ea8:	4639      	mov	r1, r7
 8005eaa:	4628      	mov	r0, r5
 8005eac:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005eb0:	f000 f92c 	bl	800610c <_Bfree>
 8005eb4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005eb6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005eb8:	9f08      	ldr	r7, [sp, #32]
 8005eba:	ea43 0102 	orr.w	r1, r3, r2
 8005ebe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005ec4:	d10d      	bne.n	8005ee2 <_dtoa_r+0xa82>
 8005ec6:	2b39      	cmp	r3, #57	; 0x39
 8005ec8:	d029      	beq.n	8005f1e <_dtoa_r+0xabe>
 8005eca:	f1b9 0f00 	cmp.w	r9, #0
 8005ece:	dd01      	ble.n	8005ed4 <_dtoa_r+0xa74>
 8005ed0:	9b06      	ldr	r3, [sp, #24]
 8005ed2:	3331      	adds	r3, #49	; 0x31
 8005ed4:	9a04      	ldr	r2, [sp, #16]
 8005ed6:	7013      	strb	r3, [r2, #0]
 8005ed8:	e776      	b.n	8005dc8 <_dtoa_r+0x968>
 8005eda:	4630      	mov	r0, r6
 8005edc:	e7b9      	b.n	8005e52 <_dtoa_r+0x9f2>
 8005ede:	2201      	movs	r2, #1
 8005ee0:	e7e2      	b.n	8005ea8 <_dtoa_r+0xa48>
 8005ee2:	f1b9 0f00 	cmp.w	r9, #0
 8005ee6:	db06      	blt.n	8005ef6 <_dtoa_r+0xa96>
 8005ee8:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005eea:	ea41 0909 	orr.w	r9, r1, r9
 8005eee:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef0:	ea59 0101 	orrs.w	r1, r9, r1
 8005ef4:	d120      	bne.n	8005f38 <_dtoa_r+0xad8>
 8005ef6:	2a00      	cmp	r2, #0
 8005ef8:	ddec      	ble.n	8005ed4 <_dtoa_r+0xa74>
 8005efa:	4659      	mov	r1, fp
 8005efc:	2201      	movs	r2, #1
 8005efe:	4628      	mov	r0, r5
 8005f00:	9308      	str	r3, [sp, #32]
 8005f02:	f000 fad1 	bl	80064a8 <__lshift>
 8005f06:	4621      	mov	r1, r4
 8005f08:	4683      	mov	fp, r0
 8005f0a:	f000 fb3d 	bl	8006588 <__mcmp>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	9b08      	ldr	r3, [sp, #32]
 8005f12:	dc02      	bgt.n	8005f1a <_dtoa_r+0xaba>
 8005f14:	d1de      	bne.n	8005ed4 <_dtoa_r+0xa74>
 8005f16:	07da      	lsls	r2, r3, #31
 8005f18:	d5dc      	bpl.n	8005ed4 <_dtoa_r+0xa74>
 8005f1a:	2b39      	cmp	r3, #57	; 0x39
 8005f1c:	d1d8      	bne.n	8005ed0 <_dtoa_r+0xa70>
 8005f1e:	2339      	movs	r3, #57	; 0x39
 8005f20:	9a04      	ldr	r2, [sp, #16]
 8005f22:	7013      	strb	r3, [r2, #0]
 8005f24:	463b      	mov	r3, r7
 8005f26:	461f      	mov	r7, r3
 8005f28:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	2a39      	cmp	r2, #57	; 0x39
 8005f30:	d050      	beq.n	8005fd4 <_dtoa_r+0xb74>
 8005f32:	3201      	adds	r2, #1
 8005f34:	701a      	strb	r2, [r3, #0]
 8005f36:	e747      	b.n	8005dc8 <_dtoa_r+0x968>
 8005f38:	2a00      	cmp	r2, #0
 8005f3a:	dd03      	ble.n	8005f44 <_dtoa_r+0xae4>
 8005f3c:	2b39      	cmp	r3, #57	; 0x39
 8005f3e:	d0ee      	beq.n	8005f1e <_dtoa_r+0xabe>
 8005f40:	3301      	adds	r3, #1
 8005f42:	e7c7      	b.n	8005ed4 <_dtoa_r+0xa74>
 8005f44:	9a08      	ldr	r2, [sp, #32]
 8005f46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005f48:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005f4c:	428a      	cmp	r2, r1
 8005f4e:	d02a      	beq.n	8005fa6 <_dtoa_r+0xb46>
 8005f50:	4659      	mov	r1, fp
 8005f52:	2300      	movs	r3, #0
 8005f54:	220a      	movs	r2, #10
 8005f56:	4628      	mov	r0, r5
 8005f58:	f000 f8fa 	bl	8006150 <__multadd>
 8005f5c:	45b0      	cmp	r8, r6
 8005f5e:	4683      	mov	fp, r0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	f04f 020a 	mov.w	r2, #10
 8005f68:	4641      	mov	r1, r8
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	d107      	bne.n	8005f7e <_dtoa_r+0xb1e>
 8005f6e:	f000 f8ef 	bl	8006150 <__multadd>
 8005f72:	4680      	mov	r8, r0
 8005f74:	4606      	mov	r6, r0
 8005f76:	9b08      	ldr	r3, [sp, #32]
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9308      	str	r3, [sp, #32]
 8005f7c:	e775      	b.n	8005e6a <_dtoa_r+0xa0a>
 8005f7e:	f000 f8e7 	bl	8006150 <__multadd>
 8005f82:	4631      	mov	r1, r6
 8005f84:	4680      	mov	r8, r0
 8005f86:	2300      	movs	r3, #0
 8005f88:	220a      	movs	r2, #10
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	f000 f8e0 	bl	8006150 <__multadd>
 8005f90:	4606      	mov	r6, r0
 8005f92:	e7f0      	b.n	8005f76 <_dtoa_r+0xb16>
 8005f94:	f1b9 0f00 	cmp.w	r9, #0
 8005f98:	bfcc      	ite	gt
 8005f9a:	464f      	movgt	r7, r9
 8005f9c:	2701      	movle	r7, #1
 8005f9e:	f04f 0800 	mov.w	r8, #0
 8005fa2:	9a03      	ldr	r2, [sp, #12]
 8005fa4:	4417      	add	r7, r2
 8005fa6:	4659      	mov	r1, fp
 8005fa8:	2201      	movs	r2, #1
 8005faa:	4628      	mov	r0, r5
 8005fac:	9308      	str	r3, [sp, #32]
 8005fae:	f000 fa7b 	bl	80064a8 <__lshift>
 8005fb2:	4621      	mov	r1, r4
 8005fb4:	4683      	mov	fp, r0
 8005fb6:	f000 fae7 	bl	8006588 <__mcmp>
 8005fba:	2800      	cmp	r0, #0
 8005fbc:	dcb2      	bgt.n	8005f24 <_dtoa_r+0xac4>
 8005fbe:	d102      	bne.n	8005fc6 <_dtoa_r+0xb66>
 8005fc0:	9b08      	ldr	r3, [sp, #32]
 8005fc2:	07db      	lsls	r3, r3, #31
 8005fc4:	d4ae      	bmi.n	8005f24 <_dtoa_r+0xac4>
 8005fc6:	463b      	mov	r3, r7
 8005fc8:	461f      	mov	r7, r3
 8005fca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fce:	2a30      	cmp	r2, #48	; 0x30
 8005fd0:	d0fa      	beq.n	8005fc8 <_dtoa_r+0xb68>
 8005fd2:	e6f9      	b.n	8005dc8 <_dtoa_r+0x968>
 8005fd4:	9a03      	ldr	r2, [sp, #12]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d1a5      	bne.n	8005f26 <_dtoa_r+0xac6>
 8005fda:	2331      	movs	r3, #49	; 0x31
 8005fdc:	f10a 0a01 	add.w	sl, sl, #1
 8005fe0:	e779      	b.n	8005ed6 <_dtoa_r+0xa76>
 8005fe2:	4b14      	ldr	r3, [pc, #80]	; (8006034 <_dtoa_r+0xbd4>)
 8005fe4:	f7ff baa8 	b.w	8005538 <_dtoa_r+0xd8>
 8005fe8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	f47f aa81 	bne.w	80054f2 <_dtoa_r+0x92>
 8005ff0:	4b11      	ldr	r3, [pc, #68]	; (8006038 <_dtoa_r+0xbd8>)
 8005ff2:	f7ff baa1 	b.w	8005538 <_dtoa_r+0xd8>
 8005ff6:	f1b9 0f00 	cmp.w	r9, #0
 8005ffa:	dc03      	bgt.n	8006004 <_dtoa_r+0xba4>
 8005ffc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	f73f aecb 	bgt.w	8005d9a <_dtoa_r+0x93a>
 8006004:	9f03      	ldr	r7, [sp, #12]
 8006006:	4621      	mov	r1, r4
 8006008:	4658      	mov	r0, fp
 800600a:	f7ff f99b 	bl	8005344 <quorem>
 800600e:	9a03      	ldr	r2, [sp, #12]
 8006010:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8006014:	f807 3b01 	strb.w	r3, [r7], #1
 8006018:	1aba      	subs	r2, r7, r2
 800601a:	4591      	cmp	r9, r2
 800601c:	ddba      	ble.n	8005f94 <_dtoa_r+0xb34>
 800601e:	4659      	mov	r1, fp
 8006020:	2300      	movs	r3, #0
 8006022:	220a      	movs	r2, #10
 8006024:	4628      	mov	r0, r5
 8006026:	f000 f893 	bl	8006150 <__multadd>
 800602a:	4683      	mov	fp, r0
 800602c:	e7eb      	b.n	8006006 <_dtoa_r+0xba6>
 800602e:	bf00      	nop
 8006030:	08007947 	.word	0x08007947
 8006034:	080078a4 	.word	0x080078a4
 8006038:	080078c8 	.word	0x080078c8

0800603c <_localeconv_r>:
 800603c:	4800      	ldr	r0, [pc, #0]	; (8006040 <_localeconv_r+0x4>)
 800603e:	4770      	bx	lr
 8006040:	20000164 	.word	0x20000164

08006044 <malloc>:
 8006044:	4b02      	ldr	r3, [pc, #8]	; (8006050 <malloc+0xc>)
 8006046:	4601      	mov	r1, r0
 8006048:	6818      	ldr	r0, [r3, #0]
 800604a:	f000 bc1d 	b.w	8006888 <_malloc_r>
 800604e:	bf00      	nop
 8006050:	20000010 	.word	0x20000010

08006054 <memchr>:
 8006054:	4603      	mov	r3, r0
 8006056:	b510      	push	{r4, lr}
 8006058:	b2c9      	uxtb	r1, r1
 800605a:	4402      	add	r2, r0
 800605c:	4293      	cmp	r3, r2
 800605e:	4618      	mov	r0, r3
 8006060:	d101      	bne.n	8006066 <memchr+0x12>
 8006062:	2000      	movs	r0, #0
 8006064:	e003      	b.n	800606e <memchr+0x1a>
 8006066:	7804      	ldrb	r4, [r0, #0]
 8006068:	3301      	adds	r3, #1
 800606a:	428c      	cmp	r4, r1
 800606c:	d1f6      	bne.n	800605c <memchr+0x8>
 800606e:	bd10      	pop	{r4, pc}

08006070 <memcpy>:
 8006070:	440a      	add	r2, r1
 8006072:	4291      	cmp	r1, r2
 8006074:	f100 33ff 	add.w	r3, r0, #4294967295
 8006078:	d100      	bne.n	800607c <memcpy+0xc>
 800607a:	4770      	bx	lr
 800607c:	b510      	push	{r4, lr}
 800607e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006082:	4291      	cmp	r1, r2
 8006084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006088:	d1f9      	bne.n	800607e <memcpy+0xe>
 800608a:	bd10      	pop	{r4, pc}

0800608c <_Balloc>:
 800608c:	b570      	push	{r4, r5, r6, lr}
 800608e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006090:	4604      	mov	r4, r0
 8006092:	460d      	mov	r5, r1
 8006094:	b976      	cbnz	r6, 80060b4 <_Balloc+0x28>
 8006096:	2010      	movs	r0, #16
 8006098:	f7ff ffd4 	bl	8006044 <malloc>
 800609c:	4602      	mov	r2, r0
 800609e:	6260      	str	r0, [r4, #36]	; 0x24
 80060a0:	b920      	cbnz	r0, 80060ac <_Balloc+0x20>
 80060a2:	2166      	movs	r1, #102	; 0x66
 80060a4:	4b17      	ldr	r3, [pc, #92]	; (8006104 <_Balloc+0x78>)
 80060a6:	4818      	ldr	r0, [pc, #96]	; (8006108 <_Balloc+0x7c>)
 80060a8:	f000 fdce 	bl	8006c48 <__assert_func>
 80060ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060b0:	6006      	str	r6, [r0, #0]
 80060b2:	60c6      	str	r6, [r0, #12]
 80060b4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80060b6:	68f3      	ldr	r3, [r6, #12]
 80060b8:	b183      	cbz	r3, 80060dc <_Balloc+0x50>
 80060ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80060c2:	b9b8      	cbnz	r0, 80060f4 <_Balloc+0x68>
 80060c4:	2101      	movs	r1, #1
 80060c6:	fa01 f605 	lsl.w	r6, r1, r5
 80060ca:	1d72      	adds	r2, r6, #5
 80060cc:	4620      	mov	r0, r4
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	f000 fb5e 	bl	8006790 <_calloc_r>
 80060d4:	b160      	cbz	r0, 80060f0 <_Balloc+0x64>
 80060d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80060da:	e00e      	b.n	80060fa <_Balloc+0x6e>
 80060dc:	2221      	movs	r2, #33	; 0x21
 80060de:	2104      	movs	r1, #4
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 fb55 	bl	8006790 <_calloc_r>
 80060e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80060e8:	60f0      	str	r0, [r6, #12]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d1e4      	bne.n	80060ba <_Balloc+0x2e>
 80060f0:	2000      	movs	r0, #0
 80060f2:	bd70      	pop	{r4, r5, r6, pc}
 80060f4:	6802      	ldr	r2, [r0, #0]
 80060f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80060fa:	2300      	movs	r3, #0
 80060fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006100:	e7f7      	b.n	80060f2 <_Balloc+0x66>
 8006102:	bf00      	nop
 8006104:	080078d5 	.word	0x080078d5
 8006108:	08007958 	.word	0x08007958

0800610c <_Bfree>:
 800610c:	b570      	push	{r4, r5, r6, lr}
 800610e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006110:	4605      	mov	r5, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b976      	cbnz	r6, 8006134 <_Bfree+0x28>
 8006116:	2010      	movs	r0, #16
 8006118:	f7ff ff94 	bl	8006044 <malloc>
 800611c:	4602      	mov	r2, r0
 800611e:	6268      	str	r0, [r5, #36]	; 0x24
 8006120:	b920      	cbnz	r0, 800612c <_Bfree+0x20>
 8006122:	218a      	movs	r1, #138	; 0x8a
 8006124:	4b08      	ldr	r3, [pc, #32]	; (8006148 <_Bfree+0x3c>)
 8006126:	4809      	ldr	r0, [pc, #36]	; (800614c <_Bfree+0x40>)
 8006128:	f000 fd8e 	bl	8006c48 <__assert_func>
 800612c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006130:	6006      	str	r6, [r0, #0]
 8006132:	60c6      	str	r6, [r0, #12]
 8006134:	b13c      	cbz	r4, 8006146 <_Bfree+0x3a>
 8006136:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006138:	6862      	ldr	r2, [r4, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006140:	6021      	str	r1, [r4, #0]
 8006142:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006146:	bd70      	pop	{r4, r5, r6, pc}
 8006148:	080078d5 	.word	0x080078d5
 800614c:	08007958 	.word	0x08007958

08006150 <__multadd>:
 8006150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006154:	4607      	mov	r7, r0
 8006156:	460c      	mov	r4, r1
 8006158:	461e      	mov	r6, r3
 800615a:	2000      	movs	r0, #0
 800615c:	690d      	ldr	r5, [r1, #16]
 800615e:	f101 0c14 	add.w	ip, r1, #20
 8006162:	f8dc 3000 	ldr.w	r3, [ip]
 8006166:	3001      	adds	r0, #1
 8006168:	b299      	uxth	r1, r3
 800616a:	fb02 6101 	mla	r1, r2, r1, r6
 800616e:	0c1e      	lsrs	r6, r3, #16
 8006170:	0c0b      	lsrs	r3, r1, #16
 8006172:	fb02 3306 	mla	r3, r2, r6, r3
 8006176:	b289      	uxth	r1, r1
 8006178:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800617c:	4285      	cmp	r5, r0
 800617e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006182:	f84c 1b04 	str.w	r1, [ip], #4
 8006186:	dcec      	bgt.n	8006162 <__multadd+0x12>
 8006188:	b30e      	cbz	r6, 80061ce <__multadd+0x7e>
 800618a:	68a3      	ldr	r3, [r4, #8]
 800618c:	42ab      	cmp	r3, r5
 800618e:	dc19      	bgt.n	80061c4 <__multadd+0x74>
 8006190:	6861      	ldr	r1, [r4, #4]
 8006192:	4638      	mov	r0, r7
 8006194:	3101      	adds	r1, #1
 8006196:	f7ff ff79 	bl	800608c <_Balloc>
 800619a:	4680      	mov	r8, r0
 800619c:	b928      	cbnz	r0, 80061aa <__multadd+0x5a>
 800619e:	4602      	mov	r2, r0
 80061a0:	21b5      	movs	r1, #181	; 0xb5
 80061a2:	4b0c      	ldr	r3, [pc, #48]	; (80061d4 <__multadd+0x84>)
 80061a4:	480c      	ldr	r0, [pc, #48]	; (80061d8 <__multadd+0x88>)
 80061a6:	f000 fd4f 	bl	8006c48 <__assert_func>
 80061aa:	6922      	ldr	r2, [r4, #16]
 80061ac:	f104 010c 	add.w	r1, r4, #12
 80061b0:	3202      	adds	r2, #2
 80061b2:	0092      	lsls	r2, r2, #2
 80061b4:	300c      	adds	r0, #12
 80061b6:	f7ff ff5b 	bl	8006070 <memcpy>
 80061ba:	4621      	mov	r1, r4
 80061bc:	4638      	mov	r0, r7
 80061be:	f7ff ffa5 	bl	800610c <_Bfree>
 80061c2:	4644      	mov	r4, r8
 80061c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80061c8:	3501      	adds	r5, #1
 80061ca:	615e      	str	r6, [r3, #20]
 80061cc:	6125      	str	r5, [r4, #16]
 80061ce:	4620      	mov	r0, r4
 80061d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d4:	08007947 	.word	0x08007947
 80061d8:	08007958 	.word	0x08007958

080061dc <__hi0bits>:
 80061dc:	0c02      	lsrs	r2, r0, #16
 80061de:	0412      	lsls	r2, r2, #16
 80061e0:	4603      	mov	r3, r0
 80061e2:	b9ca      	cbnz	r2, 8006218 <__hi0bits+0x3c>
 80061e4:	0403      	lsls	r3, r0, #16
 80061e6:	2010      	movs	r0, #16
 80061e8:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80061ec:	bf04      	itt	eq
 80061ee:	021b      	lsleq	r3, r3, #8
 80061f0:	3008      	addeq	r0, #8
 80061f2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80061f6:	bf04      	itt	eq
 80061f8:	011b      	lsleq	r3, r3, #4
 80061fa:	3004      	addeq	r0, #4
 80061fc:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006200:	bf04      	itt	eq
 8006202:	009b      	lsleq	r3, r3, #2
 8006204:	3002      	addeq	r0, #2
 8006206:	2b00      	cmp	r3, #0
 8006208:	db05      	blt.n	8006216 <__hi0bits+0x3a>
 800620a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800620e:	f100 0001 	add.w	r0, r0, #1
 8006212:	bf08      	it	eq
 8006214:	2020      	moveq	r0, #32
 8006216:	4770      	bx	lr
 8006218:	2000      	movs	r0, #0
 800621a:	e7e5      	b.n	80061e8 <__hi0bits+0xc>

0800621c <__lo0bits>:
 800621c:	6803      	ldr	r3, [r0, #0]
 800621e:	4602      	mov	r2, r0
 8006220:	f013 0007 	ands.w	r0, r3, #7
 8006224:	d00b      	beq.n	800623e <__lo0bits+0x22>
 8006226:	07d9      	lsls	r1, r3, #31
 8006228:	d421      	bmi.n	800626e <__lo0bits+0x52>
 800622a:	0798      	lsls	r0, r3, #30
 800622c:	bf49      	itett	mi
 800622e:	085b      	lsrmi	r3, r3, #1
 8006230:	089b      	lsrpl	r3, r3, #2
 8006232:	2001      	movmi	r0, #1
 8006234:	6013      	strmi	r3, [r2, #0]
 8006236:	bf5c      	itt	pl
 8006238:	2002      	movpl	r0, #2
 800623a:	6013      	strpl	r3, [r2, #0]
 800623c:	4770      	bx	lr
 800623e:	b299      	uxth	r1, r3
 8006240:	b909      	cbnz	r1, 8006246 <__lo0bits+0x2a>
 8006242:	2010      	movs	r0, #16
 8006244:	0c1b      	lsrs	r3, r3, #16
 8006246:	b2d9      	uxtb	r1, r3
 8006248:	b909      	cbnz	r1, 800624e <__lo0bits+0x32>
 800624a:	3008      	adds	r0, #8
 800624c:	0a1b      	lsrs	r3, r3, #8
 800624e:	0719      	lsls	r1, r3, #28
 8006250:	bf04      	itt	eq
 8006252:	091b      	lsreq	r3, r3, #4
 8006254:	3004      	addeq	r0, #4
 8006256:	0799      	lsls	r1, r3, #30
 8006258:	bf04      	itt	eq
 800625a:	089b      	lsreq	r3, r3, #2
 800625c:	3002      	addeq	r0, #2
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	d403      	bmi.n	800626a <__lo0bits+0x4e>
 8006262:	085b      	lsrs	r3, r3, #1
 8006264:	f100 0001 	add.w	r0, r0, #1
 8006268:	d003      	beq.n	8006272 <__lo0bits+0x56>
 800626a:	6013      	str	r3, [r2, #0]
 800626c:	4770      	bx	lr
 800626e:	2000      	movs	r0, #0
 8006270:	4770      	bx	lr
 8006272:	2020      	movs	r0, #32
 8006274:	4770      	bx	lr
	...

08006278 <__i2b>:
 8006278:	b510      	push	{r4, lr}
 800627a:	460c      	mov	r4, r1
 800627c:	2101      	movs	r1, #1
 800627e:	f7ff ff05 	bl	800608c <_Balloc>
 8006282:	4602      	mov	r2, r0
 8006284:	b928      	cbnz	r0, 8006292 <__i2b+0x1a>
 8006286:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800628a:	4b04      	ldr	r3, [pc, #16]	; (800629c <__i2b+0x24>)
 800628c:	4804      	ldr	r0, [pc, #16]	; (80062a0 <__i2b+0x28>)
 800628e:	f000 fcdb 	bl	8006c48 <__assert_func>
 8006292:	2301      	movs	r3, #1
 8006294:	6144      	str	r4, [r0, #20]
 8006296:	6103      	str	r3, [r0, #16]
 8006298:	bd10      	pop	{r4, pc}
 800629a:	bf00      	nop
 800629c:	08007947 	.word	0x08007947
 80062a0:	08007958 	.word	0x08007958

080062a4 <__multiply>:
 80062a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062a8:	4691      	mov	r9, r2
 80062aa:	690a      	ldr	r2, [r1, #16]
 80062ac:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80062b0:	460c      	mov	r4, r1
 80062b2:	429a      	cmp	r2, r3
 80062b4:	bfbe      	ittt	lt
 80062b6:	460b      	movlt	r3, r1
 80062b8:	464c      	movlt	r4, r9
 80062ba:	4699      	movlt	r9, r3
 80062bc:	6927      	ldr	r7, [r4, #16]
 80062be:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80062c2:	68a3      	ldr	r3, [r4, #8]
 80062c4:	6861      	ldr	r1, [r4, #4]
 80062c6:	eb07 060a 	add.w	r6, r7, sl
 80062ca:	42b3      	cmp	r3, r6
 80062cc:	b085      	sub	sp, #20
 80062ce:	bfb8      	it	lt
 80062d0:	3101      	addlt	r1, #1
 80062d2:	f7ff fedb 	bl	800608c <_Balloc>
 80062d6:	b930      	cbnz	r0, 80062e6 <__multiply+0x42>
 80062d8:	4602      	mov	r2, r0
 80062da:	f240 115d 	movw	r1, #349	; 0x15d
 80062de:	4b43      	ldr	r3, [pc, #268]	; (80063ec <__multiply+0x148>)
 80062e0:	4843      	ldr	r0, [pc, #268]	; (80063f0 <__multiply+0x14c>)
 80062e2:	f000 fcb1 	bl	8006c48 <__assert_func>
 80062e6:	f100 0514 	add.w	r5, r0, #20
 80062ea:	462b      	mov	r3, r5
 80062ec:	2200      	movs	r2, #0
 80062ee:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80062f2:	4543      	cmp	r3, r8
 80062f4:	d321      	bcc.n	800633a <__multiply+0x96>
 80062f6:	f104 0314 	add.w	r3, r4, #20
 80062fa:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80062fe:	f109 0314 	add.w	r3, r9, #20
 8006302:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006306:	9202      	str	r2, [sp, #8]
 8006308:	1b3a      	subs	r2, r7, r4
 800630a:	3a15      	subs	r2, #21
 800630c:	f022 0203 	bic.w	r2, r2, #3
 8006310:	3204      	adds	r2, #4
 8006312:	f104 0115 	add.w	r1, r4, #21
 8006316:	428f      	cmp	r7, r1
 8006318:	bf38      	it	cc
 800631a:	2204      	movcc	r2, #4
 800631c:	9201      	str	r2, [sp, #4]
 800631e:	9a02      	ldr	r2, [sp, #8]
 8006320:	9303      	str	r3, [sp, #12]
 8006322:	429a      	cmp	r2, r3
 8006324:	d80c      	bhi.n	8006340 <__multiply+0x9c>
 8006326:	2e00      	cmp	r6, #0
 8006328:	dd03      	ble.n	8006332 <__multiply+0x8e>
 800632a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800632e:	2b00      	cmp	r3, #0
 8006330:	d059      	beq.n	80063e6 <__multiply+0x142>
 8006332:	6106      	str	r6, [r0, #16]
 8006334:	b005      	add	sp, #20
 8006336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800633a:	f843 2b04 	str.w	r2, [r3], #4
 800633e:	e7d8      	b.n	80062f2 <__multiply+0x4e>
 8006340:	f8b3 a000 	ldrh.w	sl, [r3]
 8006344:	f1ba 0f00 	cmp.w	sl, #0
 8006348:	d023      	beq.n	8006392 <__multiply+0xee>
 800634a:	46a9      	mov	r9, r5
 800634c:	f04f 0c00 	mov.w	ip, #0
 8006350:	f104 0e14 	add.w	lr, r4, #20
 8006354:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006358:	f8d9 1000 	ldr.w	r1, [r9]
 800635c:	fa1f fb82 	uxth.w	fp, r2
 8006360:	b289      	uxth	r1, r1
 8006362:	fb0a 110b 	mla	r1, sl, fp, r1
 8006366:	4461      	add	r1, ip
 8006368:	f8d9 c000 	ldr.w	ip, [r9]
 800636c:	0c12      	lsrs	r2, r2, #16
 800636e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8006372:	fb0a c202 	mla	r2, sl, r2, ip
 8006376:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800637a:	b289      	uxth	r1, r1
 800637c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006380:	4577      	cmp	r7, lr
 8006382:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006386:	f849 1b04 	str.w	r1, [r9], #4
 800638a:	d8e3      	bhi.n	8006354 <__multiply+0xb0>
 800638c:	9a01      	ldr	r2, [sp, #4]
 800638e:	f845 c002 	str.w	ip, [r5, r2]
 8006392:	9a03      	ldr	r2, [sp, #12]
 8006394:	3304      	adds	r3, #4
 8006396:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800639a:	f1b9 0f00 	cmp.w	r9, #0
 800639e:	d020      	beq.n	80063e2 <__multiply+0x13e>
 80063a0:	46ae      	mov	lr, r5
 80063a2:	f04f 0a00 	mov.w	sl, #0
 80063a6:	6829      	ldr	r1, [r5, #0]
 80063a8:	f104 0c14 	add.w	ip, r4, #20
 80063ac:	f8bc b000 	ldrh.w	fp, [ip]
 80063b0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80063b4:	b289      	uxth	r1, r1
 80063b6:	fb09 220b 	mla	r2, r9, fp, r2
 80063ba:	4492      	add	sl, r2
 80063bc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80063c0:	f84e 1b04 	str.w	r1, [lr], #4
 80063c4:	f85c 2b04 	ldr.w	r2, [ip], #4
 80063c8:	f8be 1000 	ldrh.w	r1, [lr]
 80063cc:	0c12      	lsrs	r2, r2, #16
 80063ce:	fb09 1102 	mla	r1, r9, r2, r1
 80063d2:	4567      	cmp	r7, ip
 80063d4:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80063d8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80063dc:	d8e6      	bhi.n	80063ac <__multiply+0x108>
 80063de:	9a01      	ldr	r2, [sp, #4]
 80063e0:	50a9      	str	r1, [r5, r2]
 80063e2:	3504      	adds	r5, #4
 80063e4:	e79b      	b.n	800631e <__multiply+0x7a>
 80063e6:	3e01      	subs	r6, #1
 80063e8:	e79d      	b.n	8006326 <__multiply+0x82>
 80063ea:	bf00      	nop
 80063ec:	08007947 	.word	0x08007947
 80063f0:	08007958 	.word	0x08007958

080063f4 <__pow5mult>:
 80063f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063f8:	4615      	mov	r5, r2
 80063fa:	f012 0203 	ands.w	r2, r2, #3
 80063fe:	4606      	mov	r6, r0
 8006400:	460f      	mov	r7, r1
 8006402:	d007      	beq.n	8006414 <__pow5mult+0x20>
 8006404:	4c25      	ldr	r4, [pc, #148]	; (800649c <__pow5mult+0xa8>)
 8006406:	3a01      	subs	r2, #1
 8006408:	2300      	movs	r3, #0
 800640a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800640e:	f7ff fe9f 	bl	8006150 <__multadd>
 8006412:	4607      	mov	r7, r0
 8006414:	10ad      	asrs	r5, r5, #2
 8006416:	d03d      	beq.n	8006494 <__pow5mult+0xa0>
 8006418:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800641a:	b97c      	cbnz	r4, 800643c <__pow5mult+0x48>
 800641c:	2010      	movs	r0, #16
 800641e:	f7ff fe11 	bl	8006044 <malloc>
 8006422:	4602      	mov	r2, r0
 8006424:	6270      	str	r0, [r6, #36]	; 0x24
 8006426:	b928      	cbnz	r0, 8006434 <__pow5mult+0x40>
 8006428:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800642c:	4b1c      	ldr	r3, [pc, #112]	; (80064a0 <__pow5mult+0xac>)
 800642e:	481d      	ldr	r0, [pc, #116]	; (80064a4 <__pow5mult+0xb0>)
 8006430:	f000 fc0a 	bl	8006c48 <__assert_func>
 8006434:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006438:	6004      	str	r4, [r0, #0]
 800643a:	60c4      	str	r4, [r0, #12]
 800643c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006440:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006444:	b94c      	cbnz	r4, 800645a <__pow5mult+0x66>
 8006446:	f240 2171 	movw	r1, #625	; 0x271
 800644a:	4630      	mov	r0, r6
 800644c:	f7ff ff14 	bl	8006278 <__i2b>
 8006450:	2300      	movs	r3, #0
 8006452:	4604      	mov	r4, r0
 8006454:	f8c8 0008 	str.w	r0, [r8, #8]
 8006458:	6003      	str	r3, [r0, #0]
 800645a:	f04f 0900 	mov.w	r9, #0
 800645e:	07eb      	lsls	r3, r5, #31
 8006460:	d50a      	bpl.n	8006478 <__pow5mult+0x84>
 8006462:	4639      	mov	r1, r7
 8006464:	4622      	mov	r2, r4
 8006466:	4630      	mov	r0, r6
 8006468:	f7ff ff1c 	bl	80062a4 <__multiply>
 800646c:	4680      	mov	r8, r0
 800646e:	4639      	mov	r1, r7
 8006470:	4630      	mov	r0, r6
 8006472:	f7ff fe4b 	bl	800610c <_Bfree>
 8006476:	4647      	mov	r7, r8
 8006478:	106d      	asrs	r5, r5, #1
 800647a:	d00b      	beq.n	8006494 <__pow5mult+0xa0>
 800647c:	6820      	ldr	r0, [r4, #0]
 800647e:	b938      	cbnz	r0, 8006490 <__pow5mult+0x9c>
 8006480:	4622      	mov	r2, r4
 8006482:	4621      	mov	r1, r4
 8006484:	4630      	mov	r0, r6
 8006486:	f7ff ff0d 	bl	80062a4 <__multiply>
 800648a:	6020      	str	r0, [r4, #0]
 800648c:	f8c0 9000 	str.w	r9, [r0]
 8006490:	4604      	mov	r4, r0
 8006492:	e7e4      	b.n	800645e <__pow5mult+0x6a>
 8006494:	4638      	mov	r0, r7
 8006496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800649a:	bf00      	nop
 800649c:	08007aa8 	.word	0x08007aa8
 80064a0:	080078d5 	.word	0x080078d5
 80064a4:	08007958 	.word	0x08007958

080064a8 <__lshift>:
 80064a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064ac:	460c      	mov	r4, r1
 80064ae:	4607      	mov	r7, r0
 80064b0:	4691      	mov	r9, r2
 80064b2:	6923      	ldr	r3, [r4, #16]
 80064b4:	6849      	ldr	r1, [r1, #4]
 80064b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80064ba:	68a3      	ldr	r3, [r4, #8]
 80064bc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80064c0:	f108 0601 	add.w	r6, r8, #1
 80064c4:	42b3      	cmp	r3, r6
 80064c6:	db0b      	blt.n	80064e0 <__lshift+0x38>
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff fddf 	bl	800608c <_Balloc>
 80064ce:	4605      	mov	r5, r0
 80064d0:	b948      	cbnz	r0, 80064e6 <__lshift+0x3e>
 80064d2:	4602      	mov	r2, r0
 80064d4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80064d8:	4b29      	ldr	r3, [pc, #164]	; (8006580 <__lshift+0xd8>)
 80064da:	482a      	ldr	r0, [pc, #168]	; (8006584 <__lshift+0xdc>)
 80064dc:	f000 fbb4 	bl	8006c48 <__assert_func>
 80064e0:	3101      	adds	r1, #1
 80064e2:	005b      	lsls	r3, r3, #1
 80064e4:	e7ee      	b.n	80064c4 <__lshift+0x1c>
 80064e6:	2300      	movs	r3, #0
 80064e8:	f100 0114 	add.w	r1, r0, #20
 80064ec:	f100 0210 	add.w	r2, r0, #16
 80064f0:	4618      	mov	r0, r3
 80064f2:	4553      	cmp	r3, sl
 80064f4:	db37      	blt.n	8006566 <__lshift+0xbe>
 80064f6:	6920      	ldr	r0, [r4, #16]
 80064f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80064fc:	f104 0314 	add.w	r3, r4, #20
 8006500:	f019 091f 	ands.w	r9, r9, #31
 8006504:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006508:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800650c:	d02f      	beq.n	800656e <__lshift+0xc6>
 800650e:	468a      	mov	sl, r1
 8006510:	f04f 0c00 	mov.w	ip, #0
 8006514:	f1c9 0e20 	rsb	lr, r9, #32
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	fa02 f209 	lsl.w	r2, r2, r9
 800651e:	ea42 020c 	orr.w	r2, r2, ip
 8006522:	f84a 2b04 	str.w	r2, [sl], #4
 8006526:	f853 2b04 	ldr.w	r2, [r3], #4
 800652a:	4298      	cmp	r0, r3
 800652c:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006530:	d8f2      	bhi.n	8006518 <__lshift+0x70>
 8006532:	1b03      	subs	r3, r0, r4
 8006534:	3b15      	subs	r3, #21
 8006536:	f023 0303 	bic.w	r3, r3, #3
 800653a:	3304      	adds	r3, #4
 800653c:	f104 0215 	add.w	r2, r4, #21
 8006540:	4290      	cmp	r0, r2
 8006542:	bf38      	it	cc
 8006544:	2304      	movcc	r3, #4
 8006546:	f841 c003 	str.w	ip, [r1, r3]
 800654a:	f1bc 0f00 	cmp.w	ip, #0
 800654e:	d001      	beq.n	8006554 <__lshift+0xac>
 8006550:	f108 0602 	add.w	r6, r8, #2
 8006554:	3e01      	subs	r6, #1
 8006556:	4638      	mov	r0, r7
 8006558:	4621      	mov	r1, r4
 800655a:	612e      	str	r6, [r5, #16]
 800655c:	f7ff fdd6 	bl	800610c <_Bfree>
 8006560:	4628      	mov	r0, r5
 8006562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006566:	f842 0f04 	str.w	r0, [r2, #4]!
 800656a:	3301      	adds	r3, #1
 800656c:	e7c1      	b.n	80064f2 <__lshift+0x4a>
 800656e:	3904      	subs	r1, #4
 8006570:	f853 2b04 	ldr.w	r2, [r3], #4
 8006574:	4298      	cmp	r0, r3
 8006576:	f841 2f04 	str.w	r2, [r1, #4]!
 800657a:	d8f9      	bhi.n	8006570 <__lshift+0xc8>
 800657c:	e7ea      	b.n	8006554 <__lshift+0xac>
 800657e:	bf00      	nop
 8006580:	08007947 	.word	0x08007947
 8006584:	08007958 	.word	0x08007958

08006588 <__mcmp>:
 8006588:	4603      	mov	r3, r0
 800658a:	690a      	ldr	r2, [r1, #16]
 800658c:	6900      	ldr	r0, [r0, #16]
 800658e:	b530      	push	{r4, r5, lr}
 8006590:	1a80      	subs	r0, r0, r2
 8006592:	d10d      	bne.n	80065b0 <__mcmp+0x28>
 8006594:	3314      	adds	r3, #20
 8006596:	3114      	adds	r1, #20
 8006598:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800659c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80065a0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80065a4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80065a8:	4295      	cmp	r5, r2
 80065aa:	d002      	beq.n	80065b2 <__mcmp+0x2a>
 80065ac:	d304      	bcc.n	80065b8 <__mcmp+0x30>
 80065ae:	2001      	movs	r0, #1
 80065b0:	bd30      	pop	{r4, r5, pc}
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	d3f4      	bcc.n	80065a0 <__mcmp+0x18>
 80065b6:	e7fb      	b.n	80065b0 <__mcmp+0x28>
 80065b8:	f04f 30ff 	mov.w	r0, #4294967295
 80065bc:	e7f8      	b.n	80065b0 <__mcmp+0x28>
	...

080065c0 <__mdiff>:
 80065c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065c4:	460d      	mov	r5, r1
 80065c6:	4607      	mov	r7, r0
 80065c8:	4611      	mov	r1, r2
 80065ca:	4628      	mov	r0, r5
 80065cc:	4614      	mov	r4, r2
 80065ce:	f7ff ffdb 	bl	8006588 <__mcmp>
 80065d2:	1e06      	subs	r6, r0, #0
 80065d4:	d111      	bne.n	80065fa <__mdiff+0x3a>
 80065d6:	4631      	mov	r1, r6
 80065d8:	4638      	mov	r0, r7
 80065da:	f7ff fd57 	bl	800608c <_Balloc>
 80065de:	4602      	mov	r2, r0
 80065e0:	b928      	cbnz	r0, 80065ee <__mdiff+0x2e>
 80065e2:	f240 2132 	movw	r1, #562	; 0x232
 80065e6:	4b3a      	ldr	r3, [pc, #232]	; (80066d0 <__mdiff+0x110>)
 80065e8:	483a      	ldr	r0, [pc, #232]	; (80066d4 <__mdiff+0x114>)
 80065ea:	f000 fb2d 	bl	8006c48 <__assert_func>
 80065ee:	2301      	movs	r3, #1
 80065f0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80065f4:	4610      	mov	r0, r2
 80065f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fa:	bfa4      	itt	ge
 80065fc:	4623      	movge	r3, r4
 80065fe:	462c      	movge	r4, r5
 8006600:	4638      	mov	r0, r7
 8006602:	6861      	ldr	r1, [r4, #4]
 8006604:	bfa6      	itte	ge
 8006606:	461d      	movge	r5, r3
 8006608:	2600      	movge	r6, #0
 800660a:	2601      	movlt	r6, #1
 800660c:	f7ff fd3e 	bl	800608c <_Balloc>
 8006610:	4602      	mov	r2, r0
 8006612:	b918      	cbnz	r0, 800661c <__mdiff+0x5c>
 8006614:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006618:	4b2d      	ldr	r3, [pc, #180]	; (80066d0 <__mdiff+0x110>)
 800661a:	e7e5      	b.n	80065e8 <__mdiff+0x28>
 800661c:	f102 0814 	add.w	r8, r2, #20
 8006620:	46c2      	mov	sl, r8
 8006622:	f04f 0c00 	mov.w	ip, #0
 8006626:	6927      	ldr	r7, [r4, #16]
 8006628:	60c6      	str	r6, [r0, #12]
 800662a:	692e      	ldr	r6, [r5, #16]
 800662c:	f104 0014 	add.w	r0, r4, #20
 8006630:	f105 0914 	add.w	r9, r5, #20
 8006634:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006638:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800663c:	3410      	adds	r4, #16
 800663e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8006642:	f859 3b04 	ldr.w	r3, [r9], #4
 8006646:	fa1f f18b 	uxth.w	r1, fp
 800664a:	448c      	add	ip, r1
 800664c:	b299      	uxth	r1, r3
 800664e:	0c1b      	lsrs	r3, r3, #16
 8006650:	ebac 0101 	sub.w	r1, ip, r1
 8006654:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006658:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800665c:	b289      	uxth	r1, r1
 800665e:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006662:	454e      	cmp	r6, r9
 8006664:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006668:	f84a 3b04 	str.w	r3, [sl], #4
 800666c:	d8e7      	bhi.n	800663e <__mdiff+0x7e>
 800666e:	1b73      	subs	r3, r6, r5
 8006670:	3b15      	subs	r3, #21
 8006672:	f023 0303 	bic.w	r3, r3, #3
 8006676:	3515      	adds	r5, #21
 8006678:	3304      	adds	r3, #4
 800667a:	42ae      	cmp	r6, r5
 800667c:	bf38      	it	cc
 800667e:	2304      	movcc	r3, #4
 8006680:	4418      	add	r0, r3
 8006682:	4443      	add	r3, r8
 8006684:	461e      	mov	r6, r3
 8006686:	4605      	mov	r5, r0
 8006688:	4575      	cmp	r5, lr
 800668a:	d30e      	bcc.n	80066aa <__mdiff+0xea>
 800668c:	f10e 0103 	add.w	r1, lr, #3
 8006690:	1a09      	subs	r1, r1, r0
 8006692:	f021 0103 	bic.w	r1, r1, #3
 8006696:	3803      	subs	r0, #3
 8006698:	4586      	cmp	lr, r0
 800669a:	bf38      	it	cc
 800669c:	2100      	movcc	r1, #0
 800669e:	4419      	add	r1, r3
 80066a0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066a4:	b18b      	cbz	r3, 80066ca <__mdiff+0x10a>
 80066a6:	6117      	str	r7, [r2, #16]
 80066a8:	e7a4      	b.n	80065f4 <__mdiff+0x34>
 80066aa:	f855 8b04 	ldr.w	r8, [r5], #4
 80066ae:	fa1f f188 	uxth.w	r1, r8
 80066b2:	4461      	add	r1, ip
 80066b4:	140c      	asrs	r4, r1, #16
 80066b6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80066ba:	b289      	uxth	r1, r1
 80066bc:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80066c0:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80066c4:	f846 1b04 	str.w	r1, [r6], #4
 80066c8:	e7de      	b.n	8006688 <__mdiff+0xc8>
 80066ca:	3f01      	subs	r7, #1
 80066cc:	e7e8      	b.n	80066a0 <__mdiff+0xe0>
 80066ce:	bf00      	nop
 80066d0:	08007947 	.word	0x08007947
 80066d4:	08007958 	.word	0x08007958

080066d8 <__d2b>:
 80066d8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80066dc:	2101      	movs	r1, #1
 80066de:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 80066e2:	4690      	mov	r8, r2
 80066e4:	461d      	mov	r5, r3
 80066e6:	f7ff fcd1 	bl	800608c <_Balloc>
 80066ea:	4604      	mov	r4, r0
 80066ec:	b930      	cbnz	r0, 80066fc <__d2b+0x24>
 80066ee:	4602      	mov	r2, r0
 80066f0:	f240 310a 	movw	r1, #778	; 0x30a
 80066f4:	4b24      	ldr	r3, [pc, #144]	; (8006788 <__d2b+0xb0>)
 80066f6:	4825      	ldr	r0, [pc, #148]	; (800678c <__d2b+0xb4>)
 80066f8:	f000 faa6 	bl	8006c48 <__assert_func>
 80066fc:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006700:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006704:	bb2d      	cbnz	r5, 8006752 <__d2b+0x7a>
 8006706:	9301      	str	r3, [sp, #4]
 8006708:	f1b8 0300 	subs.w	r3, r8, #0
 800670c:	d026      	beq.n	800675c <__d2b+0x84>
 800670e:	4668      	mov	r0, sp
 8006710:	9300      	str	r3, [sp, #0]
 8006712:	f7ff fd83 	bl	800621c <__lo0bits>
 8006716:	9900      	ldr	r1, [sp, #0]
 8006718:	b1f0      	cbz	r0, 8006758 <__d2b+0x80>
 800671a:	9a01      	ldr	r2, [sp, #4]
 800671c:	f1c0 0320 	rsb	r3, r0, #32
 8006720:	fa02 f303 	lsl.w	r3, r2, r3
 8006724:	430b      	orrs	r3, r1
 8006726:	40c2      	lsrs	r2, r0
 8006728:	6163      	str	r3, [r4, #20]
 800672a:	9201      	str	r2, [sp, #4]
 800672c:	9b01      	ldr	r3, [sp, #4]
 800672e:	2b00      	cmp	r3, #0
 8006730:	bf14      	ite	ne
 8006732:	2102      	movne	r1, #2
 8006734:	2101      	moveq	r1, #1
 8006736:	61a3      	str	r3, [r4, #24]
 8006738:	6121      	str	r1, [r4, #16]
 800673a:	b1c5      	cbz	r5, 800676e <__d2b+0x96>
 800673c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006740:	4405      	add	r5, r0
 8006742:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006746:	603d      	str	r5, [r7, #0]
 8006748:	6030      	str	r0, [r6, #0]
 800674a:	4620      	mov	r0, r4
 800674c:	b002      	add	sp, #8
 800674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006752:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006756:	e7d6      	b.n	8006706 <__d2b+0x2e>
 8006758:	6161      	str	r1, [r4, #20]
 800675a:	e7e7      	b.n	800672c <__d2b+0x54>
 800675c:	a801      	add	r0, sp, #4
 800675e:	f7ff fd5d 	bl	800621c <__lo0bits>
 8006762:	2101      	movs	r1, #1
 8006764:	9b01      	ldr	r3, [sp, #4]
 8006766:	6121      	str	r1, [r4, #16]
 8006768:	6163      	str	r3, [r4, #20]
 800676a:	3020      	adds	r0, #32
 800676c:	e7e5      	b.n	800673a <__d2b+0x62>
 800676e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006772:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006776:	6038      	str	r0, [r7, #0]
 8006778:	6918      	ldr	r0, [r3, #16]
 800677a:	f7ff fd2f 	bl	80061dc <__hi0bits>
 800677e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006782:	6031      	str	r1, [r6, #0]
 8006784:	e7e1      	b.n	800674a <__d2b+0x72>
 8006786:	bf00      	nop
 8006788:	08007947 	.word	0x08007947
 800678c:	08007958 	.word	0x08007958

08006790 <_calloc_r>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	fba1 5402 	umull	r5, r4, r1, r2
 8006796:	b934      	cbnz	r4, 80067a6 <_calloc_r+0x16>
 8006798:	4629      	mov	r1, r5
 800679a:	f000 f875 	bl	8006888 <_malloc_r>
 800679e:	4606      	mov	r6, r0
 80067a0:	b928      	cbnz	r0, 80067ae <_calloc_r+0x1e>
 80067a2:	4630      	mov	r0, r6
 80067a4:	bd70      	pop	{r4, r5, r6, pc}
 80067a6:	220c      	movs	r2, #12
 80067a8:	2600      	movs	r6, #0
 80067aa:	6002      	str	r2, [r0, #0]
 80067ac:	e7f9      	b.n	80067a2 <_calloc_r+0x12>
 80067ae:	462a      	mov	r2, r5
 80067b0:	4621      	mov	r1, r4
 80067b2:	f7fe f93f 	bl	8004a34 <memset>
 80067b6:	e7f4      	b.n	80067a2 <_calloc_r+0x12>

080067b8 <_free_r>:
 80067b8:	b538      	push	{r3, r4, r5, lr}
 80067ba:	4605      	mov	r5, r0
 80067bc:	2900      	cmp	r1, #0
 80067be:	d040      	beq.n	8006842 <_free_r+0x8a>
 80067c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c4:	1f0c      	subs	r4, r1, #4
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfb8      	it	lt
 80067ca:	18e4      	addlt	r4, r4, r3
 80067cc:	f000 fa98 	bl	8006d00 <__malloc_lock>
 80067d0:	4a1c      	ldr	r2, [pc, #112]	; (8006844 <_free_r+0x8c>)
 80067d2:	6813      	ldr	r3, [r2, #0]
 80067d4:	b933      	cbnz	r3, 80067e4 <_free_r+0x2c>
 80067d6:	6063      	str	r3, [r4, #4]
 80067d8:	6014      	str	r4, [r2, #0]
 80067da:	4628      	mov	r0, r5
 80067dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e0:	f000 ba94 	b.w	8006d0c <__malloc_unlock>
 80067e4:	42a3      	cmp	r3, r4
 80067e6:	d908      	bls.n	80067fa <_free_r+0x42>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	1821      	adds	r1, r4, r0
 80067ec:	428b      	cmp	r3, r1
 80067ee:	bf01      	itttt	eq
 80067f0:	6819      	ldreq	r1, [r3, #0]
 80067f2:	685b      	ldreq	r3, [r3, #4]
 80067f4:	1809      	addeq	r1, r1, r0
 80067f6:	6021      	streq	r1, [r4, #0]
 80067f8:	e7ed      	b.n	80067d6 <_free_r+0x1e>
 80067fa:	461a      	mov	r2, r3
 80067fc:	685b      	ldr	r3, [r3, #4]
 80067fe:	b10b      	cbz	r3, 8006804 <_free_r+0x4c>
 8006800:	42a3      	cmp	r3, r4
 8006802:	d9fa      	bls.n	80067fa <_free_r+0x42>
 8006804:	6811      	ldr	r1, [r2, #0]
 8006806:	1850      	adds	r0, r2, r1
 8006808:	42a0      	cmp	r0, r4
 800680a:	d10b      	bne.n	8006824 <_free_r+0x6c>
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4401      	add	r1, r0
 8006810:	1850      	adds	r0, r2, r1
 8006812:	4283      	cmp	r3, r0
 8006814:	6011      	str	r1, [r2, #0]
 8006816:	d1e0      	bne.n	80067da <_free_r+0x22>
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	685b      	ldr	r3, [r3, #4]
 800681c:	4401      	add	r1, r0
 800681e:	6011      	str	r1, [r2, #0]
 8006820:	6053      	str	r3, [r2, #4]
 8006822:	e7da      	b.n	80067da <_free_r+0x22>
 8006824:	d902      	bls.n	800682c <_free_r+0x74>
 8006826:	230c      	movs	r3, #12
 8006828:	602b      	str	r3, [r5, #0]
 800682a:	e7d6      	b.n	80067da <_free_r+0x22>
 800682c:	6820      	ldr	r0, [r4, #0]
 800682e:	1821      	adds	r1, r4, r0
 8006830:	428b      	cmp	r3, r1
 8006832:	bf01      	itttt	eq
 8006834:	6819      	ldreq	r1, [r3, #0]
 8006836:	685b      	ldreq	r3, [r3, #4]
 8006838:	1809      	addeq	r1, r1, r0
 800683a:	6021      	streq	r1, [r4, #0]
 800683c:	6063      	str	r3, [r4, #4]
 800683e:	6054      	str	r4, [r2, #4]
 8006840:	e7cb      	b.n	80067da <_free_r+0x22>
 8006842:	bd38      	pop	{r3, r4, r5, pc}
 8006844:	20000324 	.word	0x20000324

08006848 <sbrk_aligned>:
 8006848:	b570      	push	{r4, r5, r6, lr}
 800684a:	4e0e      	ldr	r6, [pc, #56]	; (8006884 <sbrk_aligned+0x3c>)
 800684c:	460c      	mov	r4, r1
 800684e:	6831      	ldr	r1, [r6, #0]
 8006850:	4605      	mov	r5, r0
 8006852:	b911      	cbnz	r1, 800685a <sbrk_aligned+0x12>
 8006854:	f000 f9e8 	bl	8006c28 <_sbrk_r>
 8006858:	6030      	str	r0, [r6, #0]
 800685a:	4621      	mov	r1, r4
 800685c:	4628      	mov	r0, r5
 800685e:	f000 f9e3 	bl	8006c28 <_sbrk_r>
 8006862:	1c43      	adds	r3, r0, #1
 8006864:	d00a      	beq.n	800687c <sbrk_aligned+0x34>
 8006866:	1cc4      	adds	r4, r0, #3
 8006868:	f024 0403 	bic.w	r4, r4, #3
 800686c:	42a0      	cmp	r0, r4
 800686e:	d007      	beq.n	8006880 <sbrk_aligned+0x38>
 8006870:	1a21      	subs	r1, r4, r0
 8006872:	4628      	mov	r0, r5
 8006874:	f000 f9d8 	bl	8006c28 <_sbrk_r>
 8006878:	3001      	adds	r0, #1
 800687a:	d101      	bne.n	8006880 <sbrk_aligned+0x38>
 800687c:	f04f 34ff 	mov.w	r4, #4294967295
 8006880:	4620      	mov	r0, r4
 8006882:	bd70      	pop	{r4, r5, r6, pc}
 8006884:	20000328 	.word	0x20000328

08006888 <_malloc_r>:
 8006888:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800688c:	1ccd      	adds	r5, r1, #3
 800688e:	f025 0503 	bic.w	r5, r5, #3
 8006892:	3508      	adds	r5, #8
 8006894:	2d0c      	cmp	r5, #12
 8006896:	bf38      	it	cc
 8006898:	250c      	movcc	r5, #12
 800689a:	2d00      	cmp	r5, #0
 800689c:	4607      	mov	r7, r0
 800689e:	db01      	blt.n	80068a4 <_malloc_r+0x1c>
 80068a0:	42a9      	cmp	r1, r5
 80068a2:	d905      	bls.n	80068b0 <_malloc_r+0x28>
 80068a4:	230c      	movs	r3, #12
 80068a6:	2600      	movs	r6, #0
 80068a8:	603b      	str	r3, [r7, #0]
 80068aa:	4630      	mov	r0, r6
 80068ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b0:	4e2e      	ldr	r6, [pc, #184]	; (800696c <_malloc_r+0xe4>)
 80068b2:	f000 fa25 	bl	8006d00 <__malloc_lock>
 80068b6:	6833      	ldr	r3, [r6, #0]
 80068b8:	461c      	mov	r4, r3
 80068ba:	bb34      	cbnz	r4, 800690a <_malloc_r+0x82>
 80068bc:	4629      	mov	r1, r5
 80068be:	4638      	mov	r0, r7
 80068c0:	f7ff ffc2 	bl	8006848 <sbrk_aligned>
 80068c4:	1c43      	adds	r3, r0, #1
 80068c6:	4604      	mov	r4, r0
 80068c8:	d14d      	bne.n	8006966 <_malloc_r+0xde>
 80068ca:	6834      	ldr	r4, [r6, #0]
 80068cc:	4626      	mov	r6, r4
 80068ce:	2e00      	cmp	r6, #0
 80068d0:	d140      	bne.n	8006954 <_malloc_r+0xcc>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	4631      	mov	r1, r6
 80068d6:	4638      	mov	r0, r7
 80068d8:	eb04 0803 	add.w	r8, r4, r3
 80068dc:	f000 f9a4 	bl	8006c28 <_sbrk_r>
 80068e0:	4580      	cmp	r8, r0
 80068e2:	d13a      	bne.n	800695a <_malloc_r+0xd2>
 80068e4:	6821      	ldr	r1, [r4, #0]
 80068e6:	3503      	adds	r5, #3
 80068e8:	1a6d      	subs	r5, r5, r1
 80068ea:	f025 0503 	bic.w	r5, r5, #3
 80068ee:	3508      	adds	r5, #8
 80068f0:	2d0c      	cmp	r5, #12
 80068f2:	bf38      	it	cc
 80068f4:	250c      	movcc	r5, #12
 80068f6:	4638      	mov	r0, r7
 80068f8:	4629      	mov	r1, r5
 80068fa:	f7ff ffa5 	bl	8006848 <sbrk_aligned>
 80068fe:	3001      	adds	r0, #1
 8006900:	d02b      	beq.n	800695a <_malloc_r+0xd2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	442b      	add	r3, r5
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	e00e      	b.n	8006928 <_malloc_r+0xa0>
 800690a:	6822      	ldr	r2, [r4, #0]
 800690c:	1b52      	subs	r2, r2, r5
 800690e:	d41e      	bmi.n	800694e <_malloc_r+0xc6>
 8006910:	2a0b      	cmp	r2, #11
 8006912:	d916      	bls.n	8006942 <_malloc_r+0xba>
 8006914:	1961      	adds	r1, r4, r5
 8006916:	42a3      	cmp	r3, r4
 8006918:	6025      	str	r5, [r4, #0]
 800691a:	bf18      	it	ne
 800691c:	6059      	strne	r1, [r3, #4]
 800691e:	6863      	ldr	r3, [r4, #4]
 8006920:	bf08      	it	eq
 8006922:	6031      	streq	r1, [r6, #0]
 8006924:	5162      	str	r2, [r4, r5]
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	4638      	mov	r0, r7
 800692a:	f104 060b 	add.w	r6, r4, #11
 800692e:	f000 f9ed 	bl	8006d0c <__malloc_unlock>
 8006932:	f026 0607 	bic.w	r6, r6, #7
 8006936:	1d23      	adds	r3, r4, #4
 8006938:	1af2      	subs	r2, r6, r3
 800693a:	d0b6      	beq.n	80068aa <_malloc_r+0x22>
 800693c:	1b9b      	subs	r3, r3, r6
 800693e:	50a3      	str	r3, [r4, r2]
 8006940:	e7b3      	b.n	80068aa <_malloc_r+0x22>
 8006942:	6862      	ldr	r2, [r4, #4]
 8006944:	42a3      	cmp	r3, r4
 8006946:	bf0c      	ite	eq
 8006948:	6032      	streq	r2, [r6, #0]
 800694a:	605a      	strne	r2, [r3, #4]
 800694c:	e7ec      	b.n	8006928 <_malloc_r+0xa0>
 800694e:	4623      	mov	r3, r4
 8006950:	6864      	ldr	r4, [r4, #4]
 8006952:	e7b2      	b.n	80068ba <_malloc_r+0x32>
 8006954:	4634      	mov	r4, r6
 8006956:	6876      	ldr	r6, [r6, #4]
 8006958:	e7b9      	b.n	80068ce <_malloc_r+0x46>
 800695a:	230c      	movs	r3, #12
 800695c:	4638      	mov	r0, r7
 800695e:	603b      	str	r3, [r7, #0]
 8006960:	f000 f9d4 	bl	8006d0c <__malloc_unlock>
 8006964:	e7a1      	b.n	80068aa <_malloc_r+0x22>
 8006966:	6025      	str	r5, [r4, #0]
 8006968:	e7de      	b.n	8006928 <_malloc_r+0xa0>
 800696a:	bf00      	nop
 800696c:	20000324 	.word	0x20000324

08006970 <__ssputs_r>:
 8006970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006974:	688e      	ldr	r6, [r1, #8]
 8006976:	4682      	mov	sl, r0
 8006978:	429e      	cmp	r6, r3
 800697a:	460c      	mov	r4, r1
 800697c:	4690      	mov	r8, r2
 800697e:	461f      	mov	r7, r3
 8006980:	d838      	bhi.n	80069f4 <__ssputs_r+0x84>
 8006982:	898a      	ldrh	r2, [r1, #12]
 8006984:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006988:	d032      	beq.n	80069f0 <__ssputs_r+0x80>
 800698a:	6825      	ldr	r5, [r4, #0]
 800698c:	6909      	ldr	r1, [r1, #16]
 800698e:	3301      	adds	r3, #1
 8006990:	eba5 0901 	sub.w	r9, r5, r1
 8006994:	6965      	ldr	r5, [r4, #20]
 8006996:	444b      	add	r3, r9
 8006998:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800699c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80069a0:	106d      	asrs	r5, r5, #1
 80069a2:	429d      	cmp	r5, r3
 80069a4:	bf38      	it	cc
 80069a6:	461d      	movcc	r5, r3
 80069a8:	0553      	lsls	r3, r2, #21
 80069aa:	d531      	bpl.n	8006a10 <__ssputs_r+0xa0>
 80069ac:	4629      	mov	r1, r5
 80069ae:	f7ff ff6b 	bl	8006888 <_malloc_r>
 80069b2:	4606      	mov	r6, r0
 80069b4:	b950      	cbnz	r0, 80069cc <__ssputs_r+0x5c>
 80069b6:	230c      	movs	r3, #12
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295
 80069bc:	f8ca 3000 	str.w	r3, [sl]
 80069c0:	89a3      	ldrh	r3, [r4, #12]
 80069c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069c6:	81a3      	strh	r3, [r4, #12]
 80069c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069cc:	464a      	mov	r2, r9
 80069ce:	6921      	ldr	r1, [r4, #16]
 80069d0:	f7ff fb4e 	bl	8006070 <memcpy>
 80069d4:	89a3      	ldrh	r3, [r4, #12]
 80069d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80069da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80069de:	81a3      	strh	r3, [r4, #12]
 80069e0:	6126      	str	r6, [r4, #16]
 80069e2:	444e      	add	r6, r9
 80069e4:	6026      	str	r6, [r4, #0]
 80069e6:	463e      	mov	r6, r7
 80069e8:	6165      	str	r5, [r4, #20]
 80069ea:	eba5 0509 	sub.w	r5, r5, r9
 80069ee:	60a5      	str	r5, [r4, #8]
 80069f0:	42be      	cmp	r6, r7
 80069f2:	d900      	bls.n	80069f6 <__ssputs_r+0x86>
 80069f4:	463e      	mov	r6, r7
 80069f6:	4632      	mov	r2, r6
 80069f8:	4641      	mov	r1, r8
 80069fa:	6820      	ldr	r0, [r4, #0]
 80069fc:	f000 f966 	bl	8006ccc <memmove>
 8006a00:	68a3      	ldr	r3, [r4, #8]
 8006a02:	2000      	movs	r0, #0
 8006a04:	1b9b      	subs	r3, r3, r6
 8006a06:	60a3      	str	r3, [r4, #8]
 8006a08:	6823      	ldr	r3, [r4, #0]
 8006a0a:	4433      	add	r3, r6
 8006a0c:	6023      	str	r3, [r4, #0]
 8006a0e:	e7db      	b.n	80069c8 <__ssputs_r+0x58>
 8006a10:	462a      	mov	r2, r5
 8006a12:	f000 f981 	bl	8006d18 <_realloc_r>
 8006a16:	4606      	mov	r6, r0
 8006a18:	2800      	cmp	r0, #0
 8006a1a:	d1e1      	bne.n	80069e0 <__ssputs_r+0x70>
 8006a1c:	4650      	mov	r0, sl
 8006a1e:	6921      	ldr	r1, [r4, #16]
 8006a20:	f7ff feca 	bl	80067b8 <_free_r>
 8006a24:	e7c7      	b.n	80069b6 <__ssputs_r+0x46>
	...

08006a28 <_svfiprintf_r>:
 8006a28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a2c:	4698      	mov	r8, r3
 8006a2e:	898b      	ldrh	r3, [r1, #12]
 8006a30:	4607      	mov	r7, r0
 8006a32:	061b      	lsls	r3, r3, #24
 8006a34:	460d      	mov	r5, r1
 8006a36:	4614      	mov	r4, r2
 8006a38:	b09d      	sub	sp, #116	; 0x74
 8006a3a:	d50e      	bpl.n	8006a5a <_svfiprintf_r+0x32>
 8006a3c:	690b      	ldr	r3, [r1, #16]
 8006a3e:	b963      	cbnz	r3, 8006a5a <_svfiprintf_r+0x32>
 8006a40:	2140      	movs	r1, #64	; 0x40
 8006a42:	f7ff ff21 	bl	8006888 <_malloc_r>
 8006a46:	6028      	str	r0, [r5, #0]
 8006a48:	6128      	str	r0, [r5, #16]
 8006a4a:	b920      	cbnz	r0, 8006a56 <_svfiprintf_r+0x2e>
 8006a4c:	230c      	movs	r3, #12
 8006a4e:	603b      	str	r3, [r7, #0]
 8006a50:	f04f 30ff 	mov.w	r0, #4294967295
 8006a54:	e0d1      	b.n	8006bfa <_svfiprintf_r+0x1d2>
 8006a56:	2340      	movs	r3, #64	; 0x40
 8006a58:	616b      	str	r3, [r5, #20]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a5e:	2320      	movs	r3, #32
 8006a60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a64:	2330      	movs	r3, #48	; 0x30
 8006a66:	f04f 0901 	mov.w	r9, #1
 8006a6a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006a6e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006c14 <_svfiprintf_r+0x1ec>
 8006a72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a76:	4623      	mov	r3, r4
 8006a78:	469a      	mov	sl, r3
 8006a7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006a7e:	b10a      	cbz	r2, 8006a84 <_svfiprintf_r+0x5c>
 8006a80:	2a25      	cmp	r2, #37	; 0x25
 8006a82:	d1f9      	bne.n	8006a78 <_svfiprintf_r+0x50>
 8006a84:	ebba 0b04 	subs.w	fp, sl, r4
 8006a88:	d00b      	beq.n	8006aa2 <_svfiprintf_r+0x7a>
 8006a8a:	465b      	mov	r3, fp
 8006a8c:	4622      	mov	r2, r4
 8006a8e:	4629      	mov	r1, r5
 8006a90:	4638      	mov	r0, r7
 8006a92:	f7ff ff6d 	bl	8006970 <__ssputs_r>
 8006a96:	3001      	adds	r0, #1
 8006a98:	f000 80aa 	beq.w	8006bf0 <_svfiprintf_r+0x1c8>
 8006a9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a9e:	445a      	add	r2, fp
 8006aa0:	9209      	str	r2, [sp, #36]	; 0x24
 8006aa2:	f89a 3000 	ldrb.w	r3, [sl]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 80a2 	beq.w	8006bf0 <_svfiprintf_r+0x1c8>
 8006aac:	2300      	movs	r3, #0
 8006aae:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ab6:	f10a 0a01 	add.w	sl, sl, #1
 8006aba:	9304      	str	r3, [sp, #16]
 8006abc:	9307      	str	r3, [sp, #28]
 8006abe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ac2:	931a      	str	r3, [sp, #104]	; 0x68
 8006ac4:	4654      	mov	r4, sl
 8006ac6:	2205      	movs	r2, #5
 8006ac8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006acc:	4851      	ldr	r0, [pc, #324]	; (8006c14 <_svfiprintf_r+0x1ec>)
 8006ace:	f7ff fac1 	bl	8006054 <memchr>
 8006ad2:	9a04      	ldr	r2, [sp, #16]
 8006ad4:	b9d8      	cbnz	r0, 8006b0e <_svfiprintf_r+0xe6>
 8006ad6:	06d0      	lsls	r0, r2, #27
 8006ad8:	bf44      	itt	mi
 8006ada:	2320      	movmi	r3, #32
 8006adc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ae0:	0711      	lsls	r1, r2, #28
 8006ae2:	bf44      	itt	mi
 8006ae4:	232b      	movmi	r3, #43	; 0x2b
 8006ae6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006aea:	f89a 3000 	ldrb.w	r3, [sl]
 8006aee:	2b2a      	cmp	r3, #42	; 0x2a
 8006af0:	d015      	beq.n	8006b1e <_svfiprintf_r+0xf6>
 8006af2:	4654      	mov	r4, sl
 8006af4:	2000      	movs	r0, #0
 8006af6:	f04f 0c0a 	mov.w	ip, #10
 8006afa:	9a07      	ldr	r2, [sp, #28]
 8006afc:	4621      	mov	r1, r4
 8006afe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b02:	3b30      	subs	r3, #48	; 0x30
 8006b04:	2b09      	cmp	r3, #9
 8006b06:	d94e      	bls.n	8006ba6 <_svfiprintf_r+0x17e>
 8006b08:	b1b0      	cbz	r0, 8006b38 <_svfiprintf_r+0x110>
 8006b0a:	9207      	str	r2, [sp, #28]
 8006b0c:	e014      	b.n	8006b38 <_svfiprintf_r+0x110>
 8006b0e:	eba0 0308 	sub.w	r3, r0, r8
 8006b12:	fa09 f303 	lsl.w	r3, r9, r3
 8006b16:	4313      	orrs	r3, r2
 8006b18:	46a2      	mov	sl, r4
 8006b1a:	9304      	str	r3, [sp, #16]
 8006b1c:	e7d2      	b.n	8006ac4 <_svfiprintf_r+0x9c>
 8006b1e:	9b03      	ldr	r3, [sp, #12]
 8006b20:	1d19      	adds	r1, r3, #4
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	9103      	str	r1, [sp, #12]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	bfbb      	ittet	lt
 8006b2a:	425b      	neglt	r3, r3
 8006b2c:	f042 0202 	orrlt.w	r2, r2, #2
 8006b30:	9307      	strge	r3, [sp, #28]
 8006b32:	9307      	strlt	r3, [sp, #28]
 8006b34:	bfb8      	it	lt
 8006b36:	9204      	strlt	r2, [sp, #16]
 8006b38:	7823      	ldrb	r3, [r4, #0]
 8006b3a:	2b2e      	cmp	r3, #46	; 0x2e
 8006b3c:	d10c      	bne.n	8006b58 <_svfiprintf_r+0x130>
 8006b3e:	7863      	ldrb	r3, [r4, #1]
 8006b40:	2b2a      	cmp	r3, #42	; 0x2a
 8006b42:	d135      	bne.n	8006bb0 <_svfiprintf_r+0x188>
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	3402      	adds	r4, #2
 8006b48:	1d1a      	adds	r2, r3, #4
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	9203      	str	r2, [sp, #12]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bfb8      	it	lt
 8006b52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006b56:	9305      	str	r3, [sp, #20]
 8006b58:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006c18 <_svfiprintf_r+0x1f0>
 8006b5c:	2203      	movs	r2, #3
 8006b5e:	4650      	mov	r0, sl
 8006b60:	7821      	ldrb	r1, [r4, #0]
 8006b62:	f7ff fa77 	bl	8006054 <memchr>
 8006b66:	b140      	cbz	r0, 8006b7a <_svfiprintf_r+0x152>
 8006b68:	2340      	movs	r3, #64	; 0x40
 8006b6a:	eba0 000a 	sub.w	r0, r0, sl
 8006b6e:	fa03 f000 	lsl.w	r0, r3, r0
 8006b72:	9b04      	ldr	r3, [sp, #16]
 8006b74:	3401      	adds	r4, #1
 8006b76:	4303      	orrs	r3, r0
 8006b78:	9304      	str	r3, [sp, #16]
 8006b7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7e:	2206      	movs	r2, #6
 8006b80:	4826      	ldr	r0, [pc, #152]	; (8006c1c <_svfiprintf_r+0x1f4>)
 8006b82:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b86:	f7ff fa65 	bl	8006054 <memchr>
 8006b8a:	2800      	cmp	r0, #0
 8006b8c:	d038      	beq.n	8006c00 <_svfiprintf_r+0x1d8>
 8006b8e:	4b24      	ldr	r3, [pc, #144]	; (8006c20 <_svfiprintf_r+0x1f8>)
 8006b90:	bb1b      	cbnz	r3, 8006bda <_svfiprintf_r+0x1b2>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	3307      	adds	r3, #7
 8006b96:	f023 0307 	bic.w	r3, r3, #7
 8006b9a:	3308      	adds	r3, #8
 8006b9c:	9303      	str	r3, [sp, #12]
 8006b9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ba0:	4433      	add	r3, r6
 8006ba2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ba4:	e767      	b.n	8006a76 <_svfiprintf_r+0x4e>
 8006ba6:	460c      	mov	r4, r1
 8006ba8:	2001      	movs	r0, #1
 8006baa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006bae:	e7a5      	b.n	8006afc <_svfiprintf_r+0xd4>
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	f04f 0c0a 	mov.w	ip, #10
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	3401      	adds	r4, #1
 8006bba:	9305      	str	r3, [sp, #20]
 8006bbc:	4620      	mov	r0, r4
 8006bbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006bc2:	3a30      	subs	r2, #48	; 0x30
 8006bc4:	2a09      	cmp	r2, #9
 8006bc6:	d903      	bls.n	8006bd0 <_svfiprintf_r+0x1a8>
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0c5      	beq.n	8006b58 <_svfiprintf_r+0x130>
 8006bcc:	9105      	str	r1, [sp, #20]
 8006bce:	e7c3      	b.n	8006b58 <_svfiprintf_r+0x130>
 8006bd0:	4604      	mov	r4, r0
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006bd8:	e7f0      	b.n	8006bbc <_svfiprintf_r+0x194>
 8006bda:	ab03      	add	r3, sp, #12
 8006bdc:	9300      	str	r3, [sp, #0]
 8006bde:	462a      	mov	r2, r5
 8006be0:	4638      	mov	r0, r7
 8006be2:	4b10      	ldr	r3, [pc, #64]	; (8006c24 <_svfiprintf_r+0x1fc>)
 8006be4:	a904      	add	r1, sp, #16
 8006be6:	f7fd ffcb 	bl	8004b80 <_printf_float>
 8006bea:	1c42      	adds	r2, r0, #1
 8006bec:	4606      	mov	r6, r0
 8006bee:	d1d6      	bne.n	8006b9e <_svfiprintf_r+0x176>
 8006bf0:	89ab      	ldrh	r3, [r5, #12]
 8006bf2:	065b      	lsls	r3, r3, #25
 8006bf4:	f53f af2c 	bmi.w	8006a50 <_svfiprintf_r+0x28>
 8006bf8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006bfa:	b01d      	add	sp, #116	; 0x74
 8006bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c00:	ab03      	add	r3, sp, #12
 8006c02:	9300      	str	r3, [sp, #0]
 8006c04:	462a      	mov	r2, r5
 8006c06:	4638      	mov	r0, r7
 8006c08:	4b06      	ldr	r3, [pc, #24]	; (8006c24 <_svfiprintf_r+0x1fc>)
 8006c0a:	a904      	add	r1, sp, #16
 8006c0c:	f7fe fa54 	bl	80050b8 <_printf_i>
 8006c10:	e7eb      	b.n	8006bea <_svfiprintf_r+0x1c2>
 8006c12:	bf00      	nop
 8006c14:	08007ab4 	.word	0x08007ab4
 8006c18:	08007aba 	.word	0x08007aba
 8006c1c:	08007abe 	.word	0x08007abe
 8006c20:	08004b81 	.word	0x08004b81
 8006c24:	08006971 	.word	0x08006971

08006c28 <_sbrk_r>:
 8006c28:	b538      	push	{r3, r4, r5, lr}
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	4d05      	ldr	r5, [pc, #20]	; (8006c44 <_sbrk_r+0x1c>)
 8006c2e:	4604      	mov	r4, r0
 8006c30:	4608      	mov	r0, r1
 8006c32:	602b      	str	r3, [r5, #0]
 8006c34:	f7fa ffd4 	bl	8001be0 <_sbrk>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_sbrk_r+0x1a>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_sbrk_r+0x1a>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	2000032c 	.word	0x2000032c

08006c48 <__assert_func>:
 8006c48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006c4a:	4614      	mov	r4, r2
 8006c4c:	461a      	mov	r2, r3
 8006c4e:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <__assert_func+0x2c>)
 8006c50:	4605      	mov	r5, r0
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	68d8      	ldr	r0, [r3, #12]
 8006c56:	b14c      	cbz	r4, 8006c6c <__assert_func+0x24>
 8006c58:	4b07      	ldr	r3, [pc, #28]	; (8006c78 <__assert_func+0x30>)
 8006c5a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c5e:	9100      	str	r1, [sp, #0]
 8006c60:	462b      	mov	r3, r5
 8006c62:	4906      	ldr	r1, [pc, #24]	; (8006c7c <__assert_func+0x34>)
 8006c64:	f000 f80e 	bl	8006c84 <fiprintf>
 8006c68:	f000 faaa 	bl	80071c0 <abort>
 8006c6c:	4b04      	ldr	r3, [pc, #16]	; (8006c80 <__assert_func+0x38>)
 8006c6e:	461c      	mov	r4, r3
 8006c70:	e7f3      	b.n	8006c5a <__assert_func+0x12>
 8006c72:	bf00      	nop
 8006c74:	20000010 	.word	0x20000010
 8006c78:	08007ac5 	.word	0x08007ac5
 8006c7c:	08007ad2 	.word	0x08007ad2
 8006c80:	08007b00 	.word	0x08007b00

08006c84 <fiprintf>:
 8006c84:	b40e      	push	{r1, r2, r3}
 8006c86:	b503      	push	{r0, r1, lr}
 8006c88:	4601      	mov	r1, r0
 8006c8a:	ab03      	add	r3, sp, #12
 8006c8c:	4805      	ldr	r0, [pc, #20]	; (8006ca4 <fiprintf+0x20>)
 8006c8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c92:	6800      	ldr	r0, [r0, #0]
 8006c94:	9301      	str	r3, [sp, #4]
 8006c96:	f000 f895 	bl	8006dc4 <_vfiprintf_r>
 8006c9a:	b002      	add	sp, #8
 8006c9c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ca0:	b003      	add	sp, #12
 8006ca2:	4770      	bx	lr
 8006ca4:	20000010 	.word	0x20000010

08006ca8 <__ascii_mbtowc>:
 8006ca8:	b082      	sub	sp, #8
 8006caa:	b901      	cbnz	r1, 8006cae <__ascii_mbtowc+0x6>
 8006cac:	a901      	add	r1, sp, #4
 8006cae:	b142      	cbz	r2, 8006cc2 <__ascii_mbtowc+0x1a>
 8006cb0:	b14b      	cbz	r3, 8006cc6 <__ascii_mbtowc+0x1e>
 8006cb2:	7813      	ldrb	r3, [r2, #0]
 8006cb4:	600b      	str	r3, [r1, #0]
 8006cb6:	7812      	ldrb	r2, [r2, #0]
 8006cb8:	1e10      	subs	r0, r2, #0
 8006cba:	bf18      	it	ne
 8006cbc:	2001      	movne	r0, #1
 8006cbe:	b002      	add	sp, #8
 8006cc0:	4770      	bx	lr
 8006cc2:	4610      	mov	r0, r2
 8006cc4:	e7fb      	b.n	8006cbe <__ascii_mbtowc+0x16>
 8006cc6:	f06f 0001 	mvn.w	r0, #1
 8006cca:	e7f8      	b.n	8006cbe <__ascii_mbtowc+0x16>

08006ccc <memmove>:
 8006ccc:	4288      	cmp	r0, r1
 8006cce:	b510      	push	{r4, lr}
 8006cd0:	eb01 0402 	add.w	r4, r1, r2
 8006cd4:	d902      	bls.n	8006cdc <memmove+0x10>
 8006cd6:	4284      	cmp	r4, r0
 8006cd8:	4623      	mov	r3, r4
 8006cda:	d807      	bhi.n	8006cec <memmove+0x20>
 8006cdc:	1e43      	subs	r3, r0, #1
 8006cde:	42a1      	cmp	r1, r4
 8006ce0:	d008      	beq.n	8006cf4 <memmove+0x28>
 8006ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006cea:	e7f8      	b.n	8006cde <memmove+0x12>
 8006cec:	4601      	mov	r1, r0
 8006cee:	4402      	add	r2, r0
 8006cf0:	428a      	cmp	r2, r1
 8006cf2:	d100      	bne.n	8006cf6 <memmove+0x2a>
 8006cf4:	bd10      	pop	{r4, pc}
 8006cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006cfe:	e7f7      	b.n	8006cf0 <memmove+0x24>

08006d00 <__malloc_lock>:
 8006d00:	4801      	ldr	r0, [pc, #4]	; (8006d08 <__malloc_lock+0x8>)
 8006d02:	f000 bc19 	b.w	8007538 <__retarget_lock_acquire_recursive>
 8006d06:	bf00      	nop
 8006d08:	20000330 	.word	0x20000330

08006d0c <__malloc_unlock>:
 8006d0c:	4801      	ldr	r0, [pc, #4]	; (8006d14 <__malloc_unlock+0x8>)
 8006d0e:	f000 bc14 	b.w	800753a <__retarget_lock_release_recursive>
 8006d12:	bf00      	nop
 8006d14:	20000330 	.word	0x20000330

08006d18 <_realloc_r>:
 8006d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d1c:	4680      	mov	r8, r0
 8006d1e:	4614      	mov	r4, r2
 8006d20:	460e      	mov	r6, r1
 8006d22:	b921      	cbnz	r1, 8006d2e <_realloc_r+0x16>
 8006d24:	4611      	mov	r1, r2
 8006d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d2a:	f7ff bdad 	b.w	8006888 <_malloc_r>
 8006d2e:	b92a      	cbnz	r2, 8006d3c <_realloc_r+0x24>
 8006d30:	f7ff fd42 	bl	80067b8 <_free_r>
 8006d34:	4625      	mov	r5, r4
 8006d36:	4628      	mov	r0, r5
 8006d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d3c:	f000 fc64 	bl	8007608 <_malloc_usable_size_r>
 8006d40:	4284      	cmp	r4, r0
 8006d42:	4607      	mov	r7, r0
 8006d44:	d802      	bhi.n	8006d4c <_realloc_r+0x34>
 8006d46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d4a:	d812      	bhi.n	8006d72 <_realloc_r+0x5a>
 8006d4c:	4621      	mov	r1, r4
 8006d4e:	4640      	mov	r0, r8
 8006d50:	f7ff fd9a 	bl	8006888 <_malloc_r>
 8006d54:	4605      	mov	r5, r0
 8006d56:	2800      	cmp	r0, #0
 8006d58:	d0ed      	beq.n	8006d36 <_realloc_r+0x1e>
 8006d5a:	42bc      	cmp	r4, r7
 8006d5c:	4622      	mov	r2, r4
 8006d5e:	4631      	mov	r1, r6
 8006d60:	bf28      	it	cs
 8006d62:	463a      	movcs	r2, r7
 8006d64:	f7ff f984 	bl	8006070 <memcpy>
 8006d68:	4631      	mov	r1, r6
 8006d6a:	4640      	mov	r0, r8
 8006d6c:	f7ff fd24 	bl	80067b8 <_free_r>
 8006d70:	e7e1      	b.n	8006d36 <_realloc_r+0x1e>
 8006d72:	4635      	mov	r5, r6
 8006d74:	e7df      	b.n	8006d36 <_realloc_r+0x1e>

08006d76 <__sfputc_r>:
 8006d76:	6893      	ldr	r3, [r2, #8]
 8006d78:	b410      	push	{r4}
 8006d7a:	3b01      	subs	r3, #1
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	6093      	str	r3, [r2, #8]
 8006d80:	da07      	bge.n	8006d92 <__sfputc_r+0x1c>
 8006d82:	6994      	ldr	r4, [r2, #24]
 8006d84:	42a3      	cmp	r3, r4
 8006d86:	db01      	blt.n	8006d8c <__sfputc_r+0x16>
 8006d88:	290a      	cmp	r1, #10
 8006d8a:	d102      	bne.n	8006d92 <__sfputc_r+0x1c>
 8006d8c:	bc10      	pop	{r4}
 8006d8e:	f000 b949 	b.w	8007024 <__swbuf_r>
 8006d92:	6813      	ldr	r3, [r2, #0]
 8006d94:	1c58      	adds	r0, r3, #1
 8006d96:	6010      	str	r0, [r2, #0]
 8006d98:	7019      	strb	r1, [r3, #0]
 8006d9a:	4608      	mov	r0, r1
 8006d9c:	bc10      	pop	{r4}
 8006d9e:	4770      	bx	lr

08006da0 <__sfputs_r>:
 8006da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006da2:	4606      	mov	r6, r0
 8006da4:	460f      	mov	r7, r1
 8006da6:	4614      	mov	r4, r2
 8006da8:	18d5      	adds	r5, r2, r3
 8006daa:	42ac      	cmp	r4, r5
 8006dac:	d101      	bne.n	8006db2 <__sfputs_r+0x12>
 8006dae:	2000      	movs	r0, #0
 8006db0:	e007      	b.n	8006dc2 <__sfputs_r+0x22>
 8006db2:	463a      	mov	r2, r7
 8006db4:	4630      	mov	r0, r6
 8006db6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dba:	f7ff ffdc 	bl	8006d76 <__sfputc_r>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	d1f3      	bne.n	8006daa <__sfputs_r+0xa>
 8006dc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006dc4 <_vfiprintf_r>:
 8006dc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dc8:	460d      	mov	r5, r1
 8006dca:	4614      	mov	r4, r2
 8006dcc:	4698      	mov	r8, r3
 8006dce:	4606      	mov	r6, r0
 8006dd0:	b09d      	sub	sp, #116	; 0x74
 8006dd2:	b118      	cbz	r0, 8006ddc <_vfiprintf_r+0x18>
 8006dd4:	6983      	ldr	r3, [r0, #24]
 8006dd6:	b90b      	cbnz	r3, 8006ddc <_vfiprintf_r+0x18>
 8006dd8:	f000 fb10 	bl	80073fc <__sinit>
 8006ddc:	4b89      	ldr	r3, [pc, #548]	; (8007004 <_vfiprintf_r+0x240>)
 8006dde:	429d      	cmp	r5, r3
 8006de0:	d11b      	bne.n	8006e1a <_vfiprintf_r+0x56>
 8006de2:	6875      	ldr	r5, [r6, #4]
 8006de4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006de6:	07d9      	lsls	r1, r3, #31
 8006de8:	d405      	bmi.n	8006df6 <_vfiprintf_r+0x32>
 8006dea:	89ab      	ldrh	r3, [r5, #12]
 8006dec:	059a      	lsls	r2, r3, #22
 8006dee:	d402      	bmi.n	8006df6 <_vfiprintf_r+0x32>
 8006df0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006df2:	f000 fba1 	bl	8007538 <__retarget_lock_acquire_recursive>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	071b      	lsls	r3, r3, #28
 8006dfa:	d501      	bpl.n	8006e00 <_vfiprintf_r+0x3c>
 8006dfc:	692b      	ldr	r3, [r5, #16]
 8006dfe:	b9eb      	cbnz	r3, 8006e3c <_vfiprintf_r+0x78>
 8006e00:	4629      	mov	r1, r5
 8006e02:	4630      	mov	r0, r6
 8006e04:	f000 f96e 	bl	80070e4 <__swsetup_r>
 8006e08:	b1c0      	cbz	r0, 8006e3c <_vfiprintf_r+0x78>
 8006e0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e0c:	07dc      	lsls	r4, r3, #31
 8006e0e:	d50e      	bpl.n	8006e2e <_vfiprintf_r+0x6a>
 8006e10:	f04f 30ff 	mov.w	r0, #4294967295
 8006e14:	b01d      	add	sp, #116	; 0x74
 8006e16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e1a:	4b7b      	ldr	r3, [pc, #492]	; (8007008 <_vfiprintf_r+0x244>)
 8006e1c:	429d      	cmp	r5, r3
 8006e1e:	d101      	bne.n	8006e24 <_vfiprintf_r+0x60>
 8006e20:	68b5      	ldr	r5, [r6, #8]
 8006e22:	e7df      	b.n	8006de4 <_vfiprintf_r+0x20>
 8006e24:	4b79      	ldr	r3, [pc, #484]	; (800700c <_vfiprintf_r+0x248>)
 8006e26:	429d      	cmp	r5, r3
 8006e28:	bf08      	it	eq
 8006e2a:	68f5      	ldreq	r5, [r6, #12]
 8006e2c:	e7da      	b.n	8006de4 <_vfiprintf_r+0x20>
 8006e2e:	89ab      	ldrh	r3, [r5, #12]
 8006e30:	0598      	lsls	r0, r3, #22
 8006e32:	d4ed      	bmi.n	8006e10 <_vfiprintf_r+0x4c>
 8006e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e36:	f000 fb80 	bl	800753a <__retarget_lock_release_recursive>
 8006e3a:	e7e9      	b.n	8006e10 <_vfiprintf_r+0x4c>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e40:	2320      	movs	r3, #32
 8006e42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e46:	2330      	movs	r3, #48	; 0x30
 8006e48:	f04f 0901 	mov.w	r9, #1
 8006e4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e50:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007010 <_vfiprintf_r+0x24c>
 8006e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e58:	4623      	mov	r3, r4
 8006e5a:	469a      	mov	sl, r3
 8006e5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e60:	b10a      	cbz	r2, 8006e66 <_vfiprintf_r+0xa2>
 8006e62:	2a25      	cmp	r2, #37	; 0x25
 8006e64:	d1f9      	bne.n	8006e5a <_vfiprintf_r+0x96>
 8006e66:	ebba 0b04 	subs.w	fp, sl, r4
 8006e6a:	d00b      	beq.n	8006e84 <_vfiprintf_r+0xc0>
 8006e6c:	465b      	mov	r3, fp
 8006e6e:	4622      	mov	r2, r4
 8006e70:	4629      	mov	r1, r5
 8006e72:	4630      	mov	r0, r6
 8006e74:	f7ff ff94 	bl	8006da0 <__sfputs_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	f000 80aa 	beq.w	8006fd2 <_vfiprintf_r+0x20e>
 8006e7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e80:	445a      	add	r2, fp
 8006e82:	9209      	str	r2, [sp, #36]	; 0x24
 8006e84:	f89a 3000 	ldrb.w	r3, [sl]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	f000 80a2 	beq.w	8006fd2 <_vfiprintf_r+0x20e>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	f04f 32ff 	mov.w	r2, #4294967295
 8006e94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e98:	f10a 0a01 	add.w	sl, sl, #1
 8006e9c:	9304      	str	r3, [sp, #16]
 8006e9e:	9307      	str	r3, [sp, #28]
 8006ea0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ea4:	931a      	str	r3, [sp, #104]	; 0x68
 8006ea6:	4654      	mov	r4, sl
 8006ea8:	2205      	movs	r2, #5
 8006eaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eae:	4858      	ldr	r0, [pc, #352]	; (8007010 <_vfiprintf_r+0x24c>)
 8006eb0:	f7ff f8d0 	bl	8006054 <memchr>
 8006eb4:	9a04      	ldr	r2, [sp, #16]
 8006eb6:	b9d8      	cbnz	r0, 8006ef0 <_vfiprintf_r+0x12c>
 8006eb8:	06d1      	lsls	r1, r2, #27
 8006eba:	bf44      	itt	mi
 8006ebc:	2320      	movmi	r3, #32
 8006ebe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ec2:	0713      	lsls	r3, r2, #28
 8006ec4:	bf44      	itt	mi
 8006ec6:	232b      	movmi	r3, #43	; 0x2b
 8006ec8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8006ed0:	2b2a      	cmp	r3, #42	; 0x2a
 8006ed2:	d015      	beq.n	8006f00 <_vfiprintf_r+0x13c>
 8006ed4:	4654      	mov	r4, sl
 8006ed6:	2000      	movs	r0, #0
 8006ed8:	f04f 0c0a 	mov.w	ip, #10
 8006edc:	9a07      	ldr	r2, [sp, #28]
 8006ede:	4621      	mov	r1, r4
 8006ee0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ee4:	3b30      	subs	r3, #48	; 0x30
 8006ee6:	2b09      	cmp	r3, #9
 8006ee8:	d94e      	bls.n	8006f88 <_vfiprintf_r+0x1c4>
 8006eea:	b1b0      	cbz	r0, 8006f1a <_vfiprintf_r+0x156>
 8006eec:	9207      	str	r2, [sp, #28]
 8006eee:	e014      	b.n	8006f1a <_vfiprintf_r+0x156>
 8006ef0:	eba0 0308 	sub.w	r3, r0, r8
 8006ef4:	fa09 f303 	lsl.w	r3, r9, r3
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	46a2      	mov	sl, r4
 8006efc:	9304      	str	r3, [sp, #16]
 8006efe:	e7d2      	b.n	8006ea6 <_vfiprintf_r+0xe2>
 8006f00:	9b03      	ldr	r3, [sp, #12]
 8006f02:	1d19      	adds	r1, r3, #4
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	9103      	str	r1, [sp, #12]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	bfbb      	ittet	lt
 8006f0c:	425b      	neglt	r3, r3
 8006f0e:	f042 0202 	orrlt.w	r2, r2, #2
 8006f12:	9307      	strge	r3, [sp, #28]
 8006f14:	9307      	strlt	r3, [sp, #28]
 8006f16:	bfb8      	it	lt
 8006f18:	9204      	strlt	r2, [sp, #16]
 8006f1a:	7823      	ldrb	r3, [r4, #0]
 8006f1c:	2b2e      	cmp	r3, #46	; 0x2e
 8006f1e:	d10c      	bne.n	8006f3a <_vfiprintf_r+0x176>
 8006f20:	7863      	ldrb	r3, [r4, #1]
 8006f22:	2b2a      	cmp	r3, #42	; 0x2a
 8006f24:	d135      	bne.n	8006f92 <_vfiprintf_r+0x1ce>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	3402      	adds	r4, #2
 8006f2a:	1d1a      	adds	r2, r3, #4
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	9203      	str	r2, [sp, #12]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bfb8      	it	lt
 8006f34:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f38:	9305      	str	r3, [sp, #20]
 8006f3a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007014 <_vfiprintf_r+0x250>
 8006f3e:	2203      	movs	r2, #3
 8006f40:	4650      	mov	r0, sl
 8006f42:	7821      	ldrb	r1, [r4, #0]
 8006f44:	f7ff f886 	bl	8006054 <memchr>
 8006f48:	b140      	cbz	r0, 8006f5c <_vfiprintf_r+0x198>
 8006f4a:	2340      	movs	r3, #64	; 0x40
 8006f4c:	eba0 000a 	sub.w	r0, r0, sl
 8006f50:	fa03 f000 	lsl.w	r0, r3, r0
 8006f54:	9b04      	ldr	r3, [sp, #16]
 8006f56:	3401      	adds	r4, #1
 8006f58:	4303      	orrs	r3, r0
 8006f5a:	9304      	str	r3, [sp, #16]
 8006f5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f60:	2206      	movs	r2, #6
 8006f62:	482d      	ldr	r0, [pc, #180]	; (8007018 <_vfiprintf_r+0x254>)
 8006f64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f68:	f7ff f874 	bl	8006054 <memchr>
 8006f6c:	2800      	cmp	r0, #0
 8006f6e:	d03f      	beq.n	8006ff0 <_vfiprintf_r+0x22c>
 8006f70:	4b2a      	ldr	r3, [pc, #168]	; (800701c <_vfiprintf_r+0x258>)
 8006f72:	bb1b      	cbnz	r3, 8006fbc <_vfiprintf_r+0x1f8>
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	3307      	adds	r3, #7
 8006f78:	f023 0307 	bic.w	r3, r3, #7
 8006f7c:	3308      	adds	r3, #8
 8006f7e:	9303      	str	r3, [sp, #12]
 8006f80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f82:	443b      	add	r3, r7
 8006f84:	9309      	str	r3, [sp, #36]	; 0x24
 8006f86:	e767      	b.n	8006e58 <_vfiprintf_r+0x94>
 8006f88:	460c      	mov	r4, r1
 8006f8a:	2001      	movs	r0, #1
 8006f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f90:	e7a5      	b.n	8006ede <_vfiprintf_r+0x11a>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f04f 0c0a 	mov.w	ip, #10
 8006f98:	4619      	mov	r1, r3
 8006f9a:	3401      	adds	r4, #1
 8006f9c:	9305      	str	r3, [sp, #20]
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fa4:	3a30      	subs	r2, #48	; 0x30
 8006fa6:	2a09      	cmp	r2, #9
 8006fa8:	d903      	bls.n	8006fb2 <_vfiprintf_r+0x1ee>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d0c5      	beq.n	8006f3a <_vfiprintf_r+0x176>
 8006fae:	9105      	str	r1, [sp, #20]
 8006fb0:	e7c3      	b.n	8006f3a <_vfiprintf_r+0x176>
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fba:	e7f0      	b.n	8006f9e <_vfiprintf_r+0x1da>
 8006fbc:	ab03      	add	r3, sp, #12
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	462a      	mov	r2, r5
 8006fc2:	4630      	mov	r0, r6
 8006fc4:	4b16      	ldr	r3, [pc, #88]	; (8007020 <_vfiprintf_r+0x25c>)
 8006fc6:	a904      	add	r1, sp, #16
 8006fc8:	f7fd fdda 	bl	8004b80 <_printf_float>
 8006fcc:	4607      	mov	r7, r0
 8006fce:	1c78      	adds	r0, r7, #1
 8006fd0:	d1d6      	bne.n	8006f80 <_vfiprintf_r+0x1bc>
 8006fd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fd4:	07d9      	lsls	r1, r3, #31
 8006fd6:	d405      	bmi.n	8006fe4 <_vfiprintf_r+0x220>
 8006fd8:	89ab      	ldrh	r3, [r5, #12]
 8006fda:	059a      	lsls	r2, r3, #22
 8006fdc:	d402      	bmi.n	8006fe4 <_vfiprintf_r+0x220>
 8006fde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fe0:	f000 faab 	bl	800753a <__retarget_lock_release_recursive>
 8006fe4:	89ab      	ldrh	r3, [r5, #12]
 8006fe6:	065b      	lsls	r3, r3, #25
 8006fe8:	f53f af12 	bmi.w	8006e10 <_vfiprintf_r+0x4c>
 8006fec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006fee:	e711      	b.n	8006e14 <_vfiprintf_r+0x50>
 8006ff0:	ab03      	add	r3, sp, #12
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	462a      	mov	r2, r5
 8006ff6:	4630      	mov	r0, r6
 8006ff8:	4b09      	ldr	r3, [pc, #36]	; (8007020 <_vfiprintf_r+0x25c>)
 8006ffa:	a904      	add	r1, sp, #16
 8006ffc:	f7fe f85c 	bl	80050b8 <_printf_i>
 8007000:	e7e4      	b.n	8006fcc <_vfiprintf_r+0x208>
 8007002:	bf00      	nop
 8007004:	08007c2c 	.word	0x08007c2c
 8007008:	08007c4c 	.word	0x08007c4c
 800700c:	08007c0c 	.word	0x08007c0c
 8007010:	08007ab4 	.word	0x08007ab4
 8007014:	08007aba 	.word	0x08007aba
 8007018:	08007abe 	.word	0x08007abe
 800701c:	08004b81 	.word	0x08004b81
 8007020:	08006da1 	.word	0x08006da1

08007024 <__swbuf_r>:
 8007024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007026:	460e      	mov	r6, r1
 8007028:	4614      	mov	r4, r2
 800702a:	4605      	mov	r5, r0
 800702c:	b118      	cbz	r0, 8007036 <__swbuf_r+0x12>
 800702e:	6983      	ldr	r3, [r0, #24]
 8007030:	b90b      	cbnz	r3, 8007036 <__swbuf_r+0x12>
 8007032:	f000 f9e3 	bl	80073fc <__sinit>
 8007036:	4b21      	ldr	r3, [pc, #132]	; (80070bc <__swbuf_r+0x98>)
 8007038:	429c      	cmp	r4, r3
 800703a:	d12b      	bne.n	8007094 <__swbuf_r+0x70>
 800703c:	686c      	ldr	r4, [r5, #4]
 800703e:	69a3      	ldr	r3, [r4, #24]
 8007040:	60a3      	str	r3, [r4, #8]
 8007042:	89a3      	ldrh	r3, [r4, #12]
 8007044:	071a      	lsls	r2, r3, #28
 8007046:	d52f      	bpl.n	80070a8 <__swbuf_r+0x84>
 8007048:	6923      	ldr	r3, [r4, #16]
 800704a:	b36b      	cbz	r3, 80070a8 <__swbuf_r+0x84>
 800704c:	6923      	ldr	r3, [r4, #16]
 800704e:	6820      	ldr	r0, [r4, #0]
 8007050:	b2f6      	uxtb	r6, r6
 8007052:	1ac0      	subs	r0, r0, r3
 8007054:	6963      	ldr	r3, [r4, #20]
 8007056:	4637      	mov	r7, r6
 8007058:	4283      	cmp	r3, r0
 800705a:	dc04      	bgt.n	8007066 <__swbuf_r+0x42>
 800705c:	4621      	mov	r1, r4
 800705e:	4628      	mov	r0, r5
 8007060:	f000 f938 	bl	80072d4 <_fflush_r>
 8007064:	bb30      	cbnz	r0, 80070b4 <__swbuf_r+0x90>
 8007066:	68a3      	ldr	r3, [r4, #8]
 8007068:	3001      	adds	r0, #1
 800706a:	3b01      	subs	r3, #1
 800706c:	60a3      	str	r3, [r4, #8]
 800706e:	6823      	ldr	r3, [r4, #0]
 8007070:	1c5a      	adds	r2, r3, #1
 8007072:	6022      	str	r2, [r4, #0]
 8007074:	701e      	strb	r6, [r3, #0]
 8007076:	6963      	ldr	r3, [r4, #20]
 8007078:	4283      	cmp	r3, r0
 800707a:	d004      	beq.n	8007086 <__swbuf_r+0x62>
 800707c:	89a3      	ldrh	r3, [r4, #12]
 800707e:	07db      	lsls	r3, r3, #31
 8007080:	d506      	bpl.n	8007090 <__swbuf_r+0x6c>
 8007082:	2e0a      	cmp	r6, #10
 8007084:	d104      	bne.n	8007090 <__swbuf_r+0x6c>
 8007086:	4621      	mov	r1, r4
 8007088:	4628      	mov	r0, r5
 800708a:	f000 f923 	bl	80072d4 <_fflush_r>
 800708e:	b988      	cbnz	r0, 80070b4 <__swbuf_r+0x90>
 8007090:	4638      	mov	r0, r7
 8007092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <__swbuf_r+0x9c>)
 8007096:	429c      	cmp	r4, r3
 8007098:	d101      	bne.n	800709e <__swbuf_r+0x7a>
 800709a:	68ac      	ldr	r4, [r5, #8]
 800709c:	e7cf      	b.n	800703e <__swbuf_r+0x1a>
 800709e:	4b09      	ldr	r3, [pc, #36]	; (80070c4 <__swbuf_r+0xa0>)
 80070a0:	429c      	cmp	r4, r3
 80070a2:	bf08      	it	eq
 80070a4:	68ec      	ldreq	r4, [r5, #12]
 80070a6:	e7ca      	b.n	800703e <__swbuf_r+0x1a>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4628      	mov	r0, r5
 80070ac:	f000 f81a 	bl	80070e4 <__swsetup_r>
 80070b0:	2800      	cmp	r0, #0
 80070b2:	d0cb      	beq.n	800704c <__swbuf_r+0x28>
 80070b4:	f04f 37ff 	mov.w	r7, #4294967295
 80070b8:	e7ea      	b.n	8007090 <__swbuf_r+0x6c>
 80070ba:	bf00      	nop
 80070bc:	08007c2c 	.word	0x08007c2c
 80070c0:	08007c4c 	.word	0x08007c4c
 80070c4:	08007c0c 	.word	0x08007c0c

080070c8 <__ascii_wctomb>:
 80070c8:	4603      	mov	r3, r0
 80070ca:	4608      	mov	r0, r1
 80070cc:	b141      	cbz	r1, 80070e0 <__ascii_wctomb+0x18>
 80070ce:	2aff      	cmp	r2, #255	; 0xff
 80070d0:	d904      	bls.n	80070dc <__ascii_wctomb+0x14>
 80070d2:	228a      	movs	r2, #138	; 0x8a
 80070d4:	f04f 30ff 	mov.w	r0, #4294967295
 80070d8:	601a      	str	r2, [r3, #0]
 80070da:	4770      	bx	lr
 80070dc:	2001      	movs	r0, #1
 80070de:	700a      	strb	r2, [r1, #0]
 80070e0:	4770      	bx	lr
	...

080070e4 <__swsetup_r>:
 80070e4:	4b32      	ldr	r3, [pc, #200]	; (80071b0 <__swsetup_r+0xcc>)
 80070e6:	b570      	push	{r4, r5, r6, lr}
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	4606      	mov	r6, r0
 80070ec:	460c      	mov	r4, r1
 80070ee:	b125      	cbz	r5, 80070fa <__swsetup_r+0x16>
 80070f0:	69ab      	ldr	r3, [r5, #24]
 80070f2:	b913      	cbnz	r3, 80070fa <__swsetup_r+0x16>
 80070f4:	4628      	mov	r0, r5
 80070f6:	f000 f981 	bl	80073fc <__sinit>
 80070fa:	4b2e      	ldr	r3, [pc, #184]	; (80071b4 <__swsetup_r+0xd0>)
 80070fc:	429c      	cmp	r4, r3
 80070fe:	d10f      	bne.n	8007120 <__swsetup_r+0x3c>
 8007100:	686c      	ldr	r4, [r5, #4]
 8007102:	89a3      	ldrh	r3, [r4, #12]
 8007104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007108:	0719      	lsls	r1, r3, #28
 800710a:	d42c      	bmi.n	8007166 <__swsetup_r+0x82>
 800710c:	06dd      	lsls	r5, r3, #27
 800710e:	d411      	bmi.n	8007134 <__swsetup_r+0x50>
 8007110:	2309      	movs	r3, #9
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007118:	f04f 30ff 	mov.w	r0, #4294967295
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	e03e      	b.n	800719e <__swsetup_r+0xba>
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <__swsetup_r+0xd4>)
 8007122:	429c      	cmp	r4, r3
 8007124:	d101      	bne.n	800712a <__swsetup_r+0x46>
 8007126:	68ac      	ldr	r4, [r5, #8]
 8007128:	e7eb      	b.n	8007102 <__swsetup_r+0x1e>
 800712a:	4b24      	ldr	r3, [pc, #144]	; (80071bc <__swsetup_r+0xd8>)
 800712c:	429c      	cmp	r4, r3
 800712e:	bf08      	it	eq
 8007130:	68ec      	ldreq	r4, [r5, #12]
 8007132:	e7e6      	b.n	8007102 <__swsetup_r+0x1e>
 8007134:	0758      	lsls	r0, r3, #29
 8007136:	d512      	bpl.n	800715e <__swsetup_r+0x7a>
 8007138:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800713a:	b141      	cbz	r1, 800714e <__swsetup_r+0x6a>
 800713c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007140:	4299      	cmp	r1, r3
 8007142:	d002      	beq.n	800714a <__swsetup_r+0x66>
 8007144:	4630      	mov	r0, r6
 8007146:	f7ff fb37 	bl	80067b8 <_free_r>
 800714a:	2300      	movs	r3, #0
 800714c:	6363      	str	r3, [r4, #52]	; 0x34
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007154:	81a3      	strh	r3, [r4, #12]
 8007156:	2300      	movs	r3, #0
 8007158:	6063      	str	r3, [r4, #4]
 800715a:	6923      	ldr	r3, [r4, #16]
 800715c:	6023      	str	r3, [r4, #0]
 800715e:	89a3      	ldrh	r3, [r4, #12]
 8007160:	f043 0308 	orr.w	r3, r3, #8
 8007164:	81a3      	strh	r3, [r4, #12]
 8007166:	6923      	ldr	r3, [r4, #16]
 8007168:	b94b      	cbnz	r3, 800717e <__swsetup_r+0x9a>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007170:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007174:	d003      	beq.n	800717e <__swsetup_r+0x9a>
 8007176:	4621      	mov	r1, r4
 8007178:	4630      	mov	r0, r6
 800717a:	f000 fa05 	bl	8007588 <__smakebuf_r>
 800717e:	89a0      	ldrh	r0, [r4, #12]
 8007180:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007184:	f010 0301 	ands.w	r3, r0, #1
 8007188:	d00a      	beq.n	80071a0 <__swsetup_r+0xbc>
 800718a:	2300      	movs	r3, #0
 800718c:	60a3      	str	r3, [r4, #8]
 800718e:	6963      	ldr	r3, [r4, #20]
 8007190:	425b      	negs	r3, r3
 8007192:	61a3      	str	r3, [r4, #24]
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	b943      	cbnz	r3, 80071aa <__swsetup_r+0xc6>
 8007198:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800719c:	d1ba      	bne.n	8007114 <__swsetup_r+0x30>
 800719e:	bd70      	pop	{r4, r5, r6, pc}
 80071a0:	0781      	lsls	r1, r0, #30
 80071a2:	bf58      	it	pl
 80071a4:	6963      	ldrpl	r3, [r4, #20]
 80071a6:	60a3      	str	r3, [r4, #8]
 80071a8:	e7f4      	b.n	8007194 <__swsetup_r+0xb0>
 80071aa:	2000      	movs	r0, #0
 80071ac:	e7f7      	b.n	800719e <__swsetup_r+0xba>
 80071ae:	bf00      	nop
 80071b0:	20000010 	.word	0x20000010
 80071b4:	08007c2c 	.word	0x08007c2c
 80071b8:	08007c4c 	.word	0x08007c4c
 80071bc:	08007c0c 	.word	0x08007c0c

080071c0 <abort>:
 80071c0:	2006      	movs	r0, #6
 80071c2:	b508      	push	{r3, lr}
 80071c4:	f000 fa50 	bl	8007668 <raise>
 80071c8:	2001      	movs	r0, #1
 80071ca:	f7fa fc96 	bl	8001afa <_exit>
	...

080071d0 <__sflush_r>:
 80071d0:	898a      	ldrh	r2, [r1, #12]
 80071d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071d4:	4605      	mov	r5, r0
 80071d6:	0710      	lsls	r0, r2, #28
 80071d8:	460c      	mov	r4, r1
 80071da:	d457      	bmi.n	800728c <__sflush_r+0xbc>
 80071dc:	684b      	ldr	r3, [r1, #4]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dc04      	bgt.n	80071ec <__sflush_r+0x1c>
 80071e2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	dc01      	bgt.n	80071ec <__sflush_r+0x1c>
 80071e8:	2000      	movs	r0, #0
 80071ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071ee:	2e00      	cmp	r6, #0
 80071f0:	d0fa      	beq.n	80071e8 <__sflush_r+0x18>
 80071f2:	2300      	movs	r3, #0
 80071f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80071f8:	682f      	ldr	r7, [r5, #0]
 80071fa:	602b      	str	r3, [r5, #0]
 80071fc:	d032      	beq.n	8007264 <__sflush_r+0x94>
 80071fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	075a      	lsls	r2, r3, #29
 8007204:	d505      	bpl.n	8007212 <__sflush_r+0x42>
 8007206:	6863      	ldr	r3, [r4, #4]
 8007208:	1ac0      	subs	r0, r0, r3
 800720a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800720c:	b10b      	cbz	r3, 8007212 <__sflush_r+0x42>
 800720e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007210:	1ac0      	subs	r0, r0, r3
 8007212:	2300      	movs	r3, #0
 8007214:	4602      	mov	r2, r0
 8007216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007218:	4628      	mov	r0, r5
 800721a:	6a21      	ldr	r1, [r4, #32]
 800721c:	47b0      	blx	r6
 800721e:	1c43      	adds	r3, r0, #1
 8007220:	89a3      	ldrh	r3, [r4, #12]
 8007222:	d106      	bne.n	8007232 <__sflush_r+0x62>
 8007224:	6829      	ldr	r1, [r5, #0]
 8007226:	291d      	cmp	r1, #29
 8007228:	d82c      	bhi.n	8007284 <__sflush_r+0xb4>
 800722a:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <__sflush_r+0x100>)
 800722c:	40ca      	lsrs	r2, r1
 800722e:	07d6      	lsls	r6, r2, #31
 8007230:	d528      	bpl.n	8007284 <__sflush_r+0xb4>
 8007232:	2200      	movs	r2, #0
 8007234:	6062      	str	r2, [r4, #4]
 8007236:	6922      	ldr	r2, [r4, #16]
 8007238:	04d9      	lsls	r1, r3, #19
 800723a:	6022      	str	r2, [r4, #0]
 800723c:	d504      	bpl.n	8007248 <__sflush_r+0x78>
 800723e:	1c42      	adds	r2, r0, #1
 8007240:	d101      	bne.n	8007246 <__sflush_r+0x76>
 8007242:	682b      	ldr	r3, [r5, #0]
 8007244:	b903      	cbnz	r3, 8007248 <__sflush_r+0x78>
 8007246:	6560      	str	r0, [r4, #84]	; 0x54
 8007248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800724a:	602f      	str	r7, [r5, #0]
 800724c:	2900      	cmp	r1, #0
 800724e:	d0cb      	beq.n	80071e8 <__sflush_r+0x18>
 8007250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007254:	4299      	cmp	r1, r3
 8007256:	d002      	beq.n	800725e <__sflush_r+0x8e>
 8007258:	4628      	mov	r0, r5
 800725a:	f7ff faad 	bl	80067b8 <_free_r>
 800725e:	2000      	movs	r0, #0
 8007260:	6360      	str	r0, [r4, #52]	; 0x34
 8007262:	e7c2      	b.n	80071ea <__sflush_r+0x1a>
 8007264:	6a21      	ldr	r1, [r4, #32]
 8007266:	2301      	movs	r3, #1
 8007268:	4628      	mov	r0, r5
 800726a:	47b0      	blx	r6
 800726c:	1c41      	adds	r1, r0, #1
 800726e:	d1c7      	bne.n	8007200 <__sflush_r+0x30>
 8007270:	682b      	ldr	r3, [r5, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d0c4      	beq.n	8007200 <__sflush_r+0x30>
 8007276:	2b1d      	cmp	r3, #29
 8007278:	d001      	beq.n	800727e <__sflush_r+0xae>
 800727a:	2b16      	cmp	r3, #22
 800727c:	d101      	bne.n	8007282 <__sflush_r+0xb2>
 800727e:	602f      	str	r7, [r5, #0]
 8007280:	e7b2      	b.n	80071e8 <__sflush_r+0x18>
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	e7ae      	b.n	80071ea <__sflush_r+0x1a>
 800728c:	690f      	ldr	r7, [r1, #16]
 800728e:	2f00      	cmp	r7, #0
 8007290:	d0aa      	beq.n	80071e8 <__sflush_r+0x18>
 8007292:	0793      	lsls	r3, r2, #30
 8007294:	bf18      	it	ne
 8007296:	2300      	movne	r3, #0
 8007298:	680e      	ldr	r6, [r1, #0]
 800729a:	bf08      	it	eq
 800729c:	694b      	ldreq	r3, [r1, #20]
 800729e:	1bf6      	subs	r6, r6, r7
 80072a0:	600f      	str	r7, [r1, #0]
 80072a2:	608b      	str	r3, [r1, #8]
 80072a4:	2e00      	cmp	r6, #0
 80072a6:	dd9f      	ble.n	80071e8 <__sflush_r+0x18>
 80072a8:	4633      	mov	r3, r6
 80072aa:	463a      	mov	r2, r7
 80072ac:	4628      	mov	r0, r5
 80072ae:	6a21      	ldr	r1, [r4, #32]
 80072b0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80072b4:	47e0      	blx	ip
 80072b6:	2800      	cmp	r0, #0
 80072b8:	dc06      	bgt.n	80072c8 <__sflush_r+0xf8>
 80072ba:	89a3      	ldrh	r3, [r4, #12]
 80072bc:	f04f 30ff 	mov.w	r0, #4294967295
 80072c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80072c4:	81a3      	strh	r3, [r4, #12]
 80072c6:	e790      	b.n	80071ea <__sflush_r+0x1a>
 80072c8:	4407      	add	r7, r0
 80072ca:	1a36      	subs	r6, r6, r0
 80072cc:	e7ea      	b.n	80072a4 <__sflush_r+0xd4>
 80072ce:	bf00      	nop
 80072d0:	20400001 	.word	0x20400001

080072d4 <_fflush_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	690b      	ldr	r3, [r1, #16]
 80072d8:	4605      	mov	r5, r0
 80072da:	460c      	mov	r4, r1
 80072dc:	b913      	cbnz	r3, 80072e4 <_fflush_r+0x10>
 80072de:	2500      	movs	r5, #0
 80072e0:	4628      	mov	r0, r5
 80072e2:	bd38      	pop	{r3, r4, r5, pc}
 80072e4:	b118      	cbz	r0, 80072ee <_fflush_r+0x1a>
 80072e6:	6983      	ldr	r3, [r0, #24]
 80072e8:	b90b      	cbnz	r3, 80072ee <_fflush_r+0x1a>
 80072ea:	f000 f887 	bl	80073fc <__sinit>
 80072ee:	4b14      	ldr	r3, [pc, #80]	; (8007340 <_fflush_r+0x6c>)
 80072f0:	429c      	cmp	r4, r3
 80072f2:	d11b      	bne.n	800732c <_fflush_r+0x58>
 80072f4:	686c      	ldr	r4, [r5, #4]
 80072f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d0ef      	beq.n	80072de <_fflush_r+0xa>
 80072fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007300:	07d0      	lsls	r0, r2, #31
 8007302:	d404      	bmi.n	800730e <_fflush_r+0x3a>
 8007304:	0599      	lsls	r1, r3, #22
 8007306:	d402      	bmi.n	800730e <_fflush_r+0x3a>
 8007308:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800730a:	f000 f915 	bl	8007538 <__retarget_lock_acquire_recursive>
 800730e:	4628      	mov	r0, r5
 8007310:	4621      	mov	r1, r4
 8007312:	f7ff ff5d 	bl	80071d0 <__sflush_r>
 8007316:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007318:	4605      	mov	r5, r0
 800731a:	07da      	lsls	r2, r3, #31
 800731c:	d4e0      	bmi.n	80072e0 <_fflush_r+0xc>
 800731e:	89a3      	ldrh	r3, [r4, #12]
 8007320:	059b      	lsls	r3, r3, #22
 8007322:	d4dd      	bmi.n	80072e0 <_fflush_r+0xc>
 8007324:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007326:	f000 f908 	bl	800753a <__retarget_lock_release_recursive>
 800732a:	e7d9      	b.n	80072e0 <_fflush_r+0xc>
 800732c:	4b05      	ldr	r3, [pc, #20]	; (8007344 <_fflush_r+0x70>)
 800732e:	429c      	cmp	r4, r3
 8007330:	d101      	bne.n	8007336 <_fflush_r+0x62>
 8007332:	68ac      	ldr	r4, [r5, #8]
 8007334:	e7df      	b.n	80072f6 <_fflush_r+0x22>
 8007336:	4b04      	ldr	r3, [pc, #16]	; (8007348 <_fflush_r+0x74>)
 8007338:	429c      	cmp	r4, r3
 800733a:	bf08      	it	eq
 800733c:	68ec      	ldreq	r4, [r5, #12]
 800733e:	e7da      	b.n	80072f6 <_fflush_r+0x22>
 8007340:	08007c2c 	.word	0x08007c2c
 8007344:	08007c4c 	.word	0x08007c4c
 8007348:	08007c0c 	.word	0x08007c0c

0800734c <std>:
 800734c:	2300      	movs	r3, #0
 800734e:	b510      	push	{r4, lr}
 8007350:	4604      	mov	r4, r0
 8007352:	e9c0 3300 	strd	r3, r3, [r0]
 8007356:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800735a:	6083      	str	r3, [r0, #8]
 800735c:	8181      	strh	r1, [r0, #12]
 800735e:	6643      	str	r3, [r0, #100]	; 0x64
 8007360:	81c2      	strh	r2, [r0, #14]
 8007362:	6183      	str	r3, [r0, #24]
 8007364:	4619      	mov	r1, r3
 8007366:	2208      	movs	r2, #8
 8007368:	305c      	adds	r0, #92	; 0x5c
 800736a:	f7fd fb63 	bl	8004a34 <memset>
 800736e:	4b05      	ldr	r3, [pc, #20]	; (8007384 <std+0x38>)
 8007370:	6224      	str	r4, [r4, #32]
 8007372:	6263      	str	r3, [r4, #36]	; 0x24
 8007374:	4b04      	ldr	r3, [pc, #16]	; (8007388 <std+0x3c>)
 8007376:	62a3      	str	r3, [r4, #40]	; 0x28
 8007378:	4b04      	ldr	r3, [pc, #16]	; (800738c <std+0x40>)
 800737a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800737c:	4b04      	ldr	r3, [pc, #16]	; (8007390 <std+0x44>)
 800737e:	6323      	str	r3, [r4, #48]	; 0x30
 8007380:	bd10      	pop	{r4, pc}
 8007382:	bf00      	nop
 8007384:	080076a1 	.word	0x080076a1
 8007388:	080076c3 	.word	0x080076c3
 800738c:	080076fb 	.word	0x080076fb
 8007390:	0800771f 	.word	0x0800771f

08007394 <_cleanup_r>:
 8007394:	4901      	ldr	r1, [pc, #4]	; (800739c <_cleanup_r+0x8>)
 8007396:	f000 b8af 	b.w	80074f8 <_fwalk_reent>
 800739a:	bf00      	nop
 800739c:	080072d5 	.word	0x080072d5

080073a0 <__sfmoreglue>:
 80073a0:	2268      	movs	r2, #104	; 0x68
 80073a2:	b570      	push	{r4, r5, r6, lr}
 80073a4:	1e4d      	subs	r5, r1, #1
 80073a6:	4355      	muls	r5, r2
 80073a8:	460e      	mov	r6, r1
 80073aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80073ae:	f7ff fa6b 	bl	8006888 <_malloc_r>
 80073b2:	4604      	mov	r4, r0
 80073b4:	b140      	cbz	r0, 80073c8 <__sfmoreglue+0x28>
 80073b6:	2100      	movs	r1, #0
 80073b8:	e9c0 1600 	strd	r1, r6, [r0]
 80073bc:	300c      	adds	r0, #12
 80073be:	60a0      	str	r0, [r4, #8]
 80073c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80073c4:	f7fd fb36 	bl	8004a34 <memset>
 80073c8:	4620      	mov	r0, r4
 80073ca:	bd70      	pop	{r4, r5, r6, pc}

080073cc <__sfp_lock_acquire>:
 80073cc:	4801      	ldr	r0, [pc, #4]	; (80073d4 <__sfp_lock_acquire+0x8>)
 80073ce:	f000 b8b3 	b.w	8007538 <__retarget_lock_acquire_recursive>
 80073d2:	bf00      	nop
 80073d4:	20000331 	.word	0x20000331

080073d8 <__sfp_lock_release>:
 80073d8:	4801      	ldr	r0, [pc, #4]	; (80073e0 <__sfp_lock_release+0x8>)
 80073da:	f000 b8ae 	b.w	800753a <__retarget_lock_release_recursive>
 80073de:	bf00      	nop
 80073e0:	20000331 	.word	0x20000331

080073e4 <__sinit_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	; (80073ec <__sinit_lock_acquire+0x8>)
 80073e6:	f000 b8a7 	b.w	8007538 <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000332 	.word	0x20000332

080073f0 <__sinit_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	; (80073f8 <__sinit_lock_release+0x8>)
 80073f2:	f000 b8a2 	b.w	800753a <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000332 	.word	0x20000332

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
 8007400:	f7ff fff0 	bl	80073e4 <__sinit_lock_acquire>
 8007404:	69a3      	ldr	r3, [r4, #24]
 8007406:	b11b      	cbz	r3, 8007410 <__sinit+0x14>
 8007408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740c:	f7ff bff0 	b.w	80073f0 <__sinit_lock_release>
 8007410:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007414:	6523      	str	r3, [r4, #80]	; 0x50
 8007416:	4b13      	ldr	r3, [pc, #76]	; (8007464 <__sinit+0x68>)
 8007418:	4a13      	ldr	r2, [pc, #76]	; (8007468 <__sinit+0x6c>)
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	62a2      	str	r2, [r4, #40]	; 0x28
 800741e:	42a3      	cmp	r3, r4
 8007420:	bf08      	it	eq
 8007422:	2301      	moveq	r3, #1
 8007424:	4620      	mov	r0, r4
 8007426:	bf08      	it	eq
 8007428:	61a3      	streq	r3, [r4, #24]
 800742a:	f000 f81f 	bl	800746c <__sfp>
 800742e:	6060      	str	r0, [r4, #4]
 8007430:	4620      	mov	r0, r4
 8007432:	f000 f81b 	bl	800746c <__sfp>
 8007436:	60a0      	str	r0, [r4, #8]
 8007438:	4620      	mov	r0, r4
 800743a:	f000 f817 	bl	800746c <__sfp>
 800743e:	2200      	movs	r2, #0
 8007440:	2104      	movs	r1, #4
 8007442:	60e0      	str	r0, [r4, #12]
 8007444:	6860      	ldr	r0, [r4, #4]
 8007446:	f7ff ff81 	bl	800734c <std>
 800744a:	2201      	movs	r2, #1
 800744c:	2109      	movs	r1, #9
 800744e:	68a0      	ldr	r0, [r4, #8]
 8007450:	f7ff ff7c 	bl	800734c <std>
 8007454:	2202      	movs	r2, #2
 8007456:	2112      	movs	r1, #18
 8007458:	68e0      	ldr	r0, [r4, #12]
 800745a:	f7ff ff77 	bl	800734c <std>
 800745e:	2301      	movs	r3, #1
 8007460:	61a3      	str	r3, [r4, #24]
 8007462:	e7d1      	b.n	8007408 <__sinit+0xc>
 8007464:	08007890 	.word	0x08007890
 8007468:	08007395 	.word	0x08007395

0800746c <__sfp>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	4607      	mov	r7, r0
 8007470:	f7ff ffac 	bl	80073cc <__sfp_lock_acquire>
 8007474:	4b1e      	ldr	r3, [pc, #120]	; (80074f0 <__sfp+0x84>)
 8007476:	681e      	ldr	r6, [r3, #0]
 8007478:	69b3      	ldr	r3, [r6, #24]
 800747a:	b913      	cbnz	r3, 8007482 <__sfp+0x16>
 800747c:	4630      	mov	r0, r6
 800747e:	f7ff ffbd 	bl	80073fc <__sinit>
 8007482:	3648      	adds	r6, #72	; 0x48
 8007484:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007488:	3b01      	subs	r3, #1
 800748a:	d503      	bpl.n	8007494 <__sfp+0x28>
 800748c:	6833      	ldr	r3, [r6, #0]
 800748e:	b30b      	cbz	r3, 80074d4 <__sfp+0x68>
 8007490:	6836      	ldr	r6, [r6, #0]
 8007492:	e7f7      	b.n	8007484 <__sfp+0x18>
 8007494:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007498:	b9d5      	cbnz	r5, 80074d0 <__sfp+0x64>
 800749a:	4b16      	ldr	r3, [pc, #88]	; (80074f4 <__sfp+0x88>)
 800749c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80074a0:	60e3      	str	r3, [r4, #12]
 80074a2:	6665      	str	r5, [r4, #100]	; 0x64
 80074a4:	f000 f847 	bl	8007536 <__retarget_lock_init_recursive>
 80074a8:	f7ff ff96 	bl	80073d8 <__sfp_lock_release>
 80074ac:	2208      	movs	r2, #8
 80074ae:	4629      	mov	r1, r5
 80074b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80074b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80074b8:	6025      	str	r5, [r4, #0]
 80074ba:	61a5      	str	r5, [r4, #24]
 80074bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80074c0:	f7fd fab8 	bl	8004a34 <memset>
 80074c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80074c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80074cc:	4620      	mov	r0, r4
 80074ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074d0:	3468      	adds	r4, #104	; 0x68
 80074d2:	e7d9      	b.n	8007488 <__sfp+0x1c>
 80074d4:	2104      	movs	r1, #4
 80074d6:	4638      	mov	r0, r7
 80074d8:	f7ff ff62 	bl	80073a0 <__sfmoreglue>
 80074dc:	4604      	mov	r4, r0
 80074de:	6030      	str	r0, [r6, #0]
 80074e0:	2800      	cmp	r0, #0
 80074e2:	d1d5      	bne.n	8007490 <__sfp+0x24>
 80074e4:	f7ff ff78 	bl	80073d8 <__sfp_lock_release>
 80074e8:	230c      	movs	r3, #12
 80074ea:	603b      	str	r3, [r7, #0]
 80074ec:	e7ee      	b.n	80074cc <__sfp+0x60>
 80074ee:	bf00      	nop
 80074f0:	08007890 	.word	0x08007890
 80074f4:	ffff0001 	.word	0xffff0001

080074f8 <_fwalk_reent>:
 80074f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074fc:	4606      	mov	r6, r0
 80074fe:	4688      	mov	r8, r1
 8007500:	2700      	movs	r7, #0
 8007502:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007506:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800750a:	f1b9 0901 	subs.w	r9, r9, #1
 800750e:	d505      	bpl.n	800751c <_fwalk_reent+0x24>
 8007510:	6824      	ldr	r4, [r4, #0]
 8007512:	2c00      	cmp	r4, #0
 8007514:	d1f7      	bne.n	8007506 <_fwalk_reent+0xe>
 8007516:	4638      	mov	r0, r7
 8007518:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800751c:	89ab      	ldrh	r3, [r5, #12]
 800751e:	2b01      	cmp	r3, #1
 8007520:	d907      	bls.n	8007532 <_fwalk_reent+0x3a>
 8007522:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007526:	3301      	adds	r3, #1
 8007528:	d003      	beq.n	8007532 <_fwalk_reent+0x3a>
 800752a:	4629      	mov	r1, r5
 800752c:	4630      	mov	r0, r6
 800752e:	47c0      	blx	r8
 8007530:	4307      	orrs	r7, r0
 8007532:	3568      	adds	r5, #104	; 0x68
 8007534:	e7e9      	b.n	800750a <_fwalk_reent+0x12>

08007536 <__retarget_lock_init_recursive>:
 8007536:	4770      	bx	lr

08007538 <__retarget_lock_acquire_recursive>:
 8007538:	4770      	bx	lr

0800753a <__retarget_lock_release_recursive>:
 800753a:	4770      	bx	lr

0800753c <__swhatbuf_r>:
 800753c:	b570      	push	{r4, r5, r6, lr}
 800753e:	460e      	mov	r6, r1
 8007540:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007544:	4614      	mov	r4, r2
 8007546:	2900      	cmp	r1, #0
 8007548:	461d      	mov	r5, r3
 800754a:	b096      	sub	sp, #88	; 0x58
 800754c:	da08      	bge.n	8007560 <__swhatbuf_r+0x24>
 800754e:	2200      	movs	r2, #0
 8007550:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	061a      	lsls	r2, r3, #24
 8007558:	d410      	bmi.n	800757c <__swhatbuf_r+0x40>
 800755a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800755e:	e00e      	b.n	800757e <__swhatbuf_r+0x42>
 8007560:	466a      	mov	r2, sp
 8007562:	f000 f903 	bl	800776c <_fstat_r>
 8007566:	2800      	cmp	r0, #0
 8007568:	dbf1      	blt.n	800754e <__swhatbuf_r+0x12>
 800756a:	9a01      	ldr	r2, [sp, #4]
 800756c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007570:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007574:	425a      	negs	r2, r3
 8007576:	415a      	adcs	r2, r3
 8007578:	602a      	str	r2, [r5, #0]
 800757a:	e7ee      	b.n	800755a <__swhatbuf_r+0x1e>
 800757c:	2340      	movs	r3, #64	; 0x40
 800757e:	2000      	movs	r0, #0
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	b016      	add	sp, #88	; 0x58
 8007584:	bd70      	pop	{r4, r5, r6, pc}
	...

08007588 <__smakebuf_r>:
 8007588:	898b      	ldrh	r3, [r1, #12]
 800758a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800758c:	079d      	lsls	r5, r3, #30
 800758e:	4606      	mov	r6, r0
 8007590:	460c      	mov	r4, r1
 8007592:	d507      	bpl.n	80075a4 <__smakebuf_r+0x1c>
 8007594:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007598:	6023      	str	r3, [r4, #0]
 800759a:	6123      	str	r3, [r4, #16]
 800759c:	2301      	movs	r3, #1
 800759e:	6163      	str	r3, [r4, #20]
 80075a0:	b002      	add	sp, #8
 80075a2:	bd70      	pop	{r4, r5, r6, pc}
 80075a4:	466a      	mov	r2, sp
 80075a6:	ab01      	add	r3, sp, #4
 80075a8:	f7ff ffc8 	bl	800753c <__swhatbuf_r>
 80075ac:	9900      	ldr	r1, [sp, #0]
 80075ae:	4605      	mov	r5, r0
 80075b0:	4630      	mov	r0, r6
 80075b2:	f7ff f969 	bl	8006888 <_malloc_r>
 80075b6:	b948      	cbnz	r0, 80075cc <__smakebuf_r+0x44>
 80075b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075bc:	059a      	lsls	r2, r3, #22
 80075be:	d4ef      	bmi.n	80075a0 <__smakebuf_r+0x18>
 80075c0:	f023 0303 	bic.w	r3, r3, #3
 80075c4:	f043 0302 	orr.w	r3, r3, #2
 80075c8:	81a3      	strh	r3, [r4, #12]
 80075ca:	e7e3      	b.n	8007594 <__smakebuf_r+0xc>
 80075cc:	4b0d      	ldr	r3, [pc, #52]	; (8007604 <__smakebuf_r+0x7c>)
 80075ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80075d0:	89a3      	ldrh	r3, [r4, #12]
 80075d2:	6020      	str	r0, [r4, #0]
 80075d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80075d8:	81a3      	strh	r3, [r4, #12]
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	6120      	str	r0, [r4, #16]
 80075de:	6163      	str	r3, [r4, #20]
 80075e0:	9b01      	ldr	r3, [sp, #4]
 80075e2:	b15b      	cbz	r3, 80075fc <__smakebuf_r+0x74>
 80075e4:	4630      	mov	r0, r6
 80075e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ea:	f000 f8d1 	bl	8007790 <_isatty_r>
 80075ee:	b128      	cbz	r0, 80075fc <__smakebuf_r+0x74>
 80075f0:	89a3      	ldrh	r3, [r4, #12]
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	f043 0301 	orr.w	r3, r3, #1
 80075fa:	81a3      	strh	r3, [r4, #12]
 80075fc:	89a0      	ldrh	r0, [r4, #12]
 80075fe:	4305      	orrs	r5, r0
 8007600:	81a5      	strh	r5, [r4, #12]
 8007602:	e7cd      	b.n	80075a0 <__smakebuf_r+0x18>
 8007604:	08007395 	.word	0x08007395

08007608 <_malloc_usable_size_r>:
 8007608:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800760c:	1f18      	subs	r0, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	bfbc      	itt	lt
 8007612:	580b      	ldrlt	r3, [r1, r0]
 8007614:	18c0      	addlt	r0, r0, r3
 8007616:	4770      	bx	lr

08007618 <_raise_r>:
 8007618:	291f      	cmp	r1, #31
 800761a:	b538      	push	{r3, r4, r5, lr}
 800761c:	4604      	mov	r4, r0
 800761e:	460d      	mov	r5, r1
 8007620:	d904      	bls.n	800762c <_raise_r+0x14>
 8007622:	2316      	movs	r3, #22
 8007624:	6003      	str	r3, [r0, #0]
 8007626:	f04f 30ff 	mov.w	r0, #4294967295
 800762a:	bd38      	pop	{r3, r4, r5, pc}
 800762c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800762e:	b112      	cbz	r2, 8007636 <_raise_r+0x1e>
 8007630:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007634:	b94b      	cbnz	r3, 800764a <_raise_r+0x32>
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f830 	bl	800769c <_getpid_r>
 800763c:	462a      	mov	r2, r5
 800763e:	4601      	mov	r1, r0
 8007640:	4620      	mov	r0, r4
 8007642:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007646:	f000 b817 	b.w	8007678 <_kill_r>
 800764a:	2b01      	cmp	r3, #1
 800764c:	d00a      	beq.n	8007664 <_raise_r+0x4c>
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	d103      	bne.n	800765a <_raise_r+0x42>
 8007652:	2316      	movs	r3, #22
 8007654:	6003      	str	r3, [r0, #0]
 8007656:	2001      	movs	r0, #1
 8007658:	e7e7      	b.n	800762a <_raise_r+0x12>
 800765a:	2400      	movs	r4, #0
 800765c:	4628      	mov	r0, r5
 800765e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007662:	4798      	blx	r3
 8007664:	2000      	movs	r0, #0
 8007666:	e7e0      	b.n	800762a <_raise_r+0x12>

08007668 <raise>:
 8007668:	4b02      	ldr	r3, [pc, #8]	; (8007674 <raise+0xc>)
 800766a:	4601      	mov	r1, r0
 800766c:	6818      	ldr	r0, [r3, #0]
 800766e:	f7ff bfd3 	b.w	8007618 <_raise_r>
 8007672:	bf00      	nop
 8007674:	20000010 	.word	0x20000010

08007678 <_kill_r>:
 8007678:	b538      	push	{r3, r4, r5, lr}
 800767a:	2300      	movs	r3, #0
 800767c:	4d06      	ldr	r5, [pc, #24]	; (8007698 <_kill_r+0x20>)
 800767e:	4604      	mov	r4, r0
 8007680:	4608      	mov	r0, r1
 8007682:	4611      	mov	r1, r2
 8007684:	602b      	str	r3, [r5, #0]
 8007686:	f7fa fa28 	bl	8001ada <_kill>
 800768a:	1c43      	adds	r3, r0, #1
 800768c:	d102      	bne.n	8007694 <_kill_r+0x1c>
 800768e:	682b      	ldr	r3, [r5, #0]
 8007690:	b103      	cbz	r3, 8007694 <_kill_r+0x1c>
 8007692:	6023      	str	r3, [r4, #0]
 8007694:	bd38      	pop	{r3, r4, r5, pc}
 8007696:	bf00      	nop
 8007698:	2000032c 	.word	0x2000032c

0800769c <_getpid_r>:
 800769c:	f7fa ba16 	b.w	8001acc <_getpid>

080076a0 <__sread>:
 80076a0:	b510      	push	{r4, lr}
 80076a2:	460c      	mov	r4, r1
 80076a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a8:	f000 f894 	bl	80077d4 <_read_r>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	bfab      	itete	ge
 80076b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076b2:	89a3      	ldrhlt	r3, [r4, #12]
 80076b4:	181b      	addge	r3, r3, r0
 80076b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076ba:	bfac      	ite	ge
 80076bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80076be:	81a3      	strhlt	r3, [r4, #12]
 80076c0:	bd10      	pop	{r4, pc}

080076c2 <__swrite>:
 80076c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c6:	461f      	mov	r7, r3
 80076c8:	898b      	ldrh	r3, [r1, #12]
 80076ca:	4605      	mov	r5, r0
 80076cc:	05db      	lsls	r3, r3, #23
 80076ce:	460c      	mov	r4, r1
 80076d0:	4616      	mov	r6, r2
 80076d2:	d505      	bpl.n	80076e0 <__swrite+0x1e>
 80076d4:	2302      	movs	r3, #2
 80076d6:	2200      	movs	r2, #0
 80076d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076dc:	f000 f868 	bl	80077b0 <_lseek_r>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	4632      	mov	r2, r6
 80076e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	4628      	mov	r0, r5
 80076ec:	463b      	mov	r3, r7
 80076ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f6:	f000 b817 	b.w	8007728 <_write_r>

080076fa <__sseek>:
 80076fa:	b510      	push	{r4, lr}
 80076fc:	460c      	mov	r4, r1
 80076fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007702:	f000 f855 	bl	80077b0 <_lseek_r>
 8007706:	1c43      	adds	r3, r0, #1
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	bf15      	itete	ne
 800770c:	6560      	strne	r0, [r4, #84]	; 0x54
 800770e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007712:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007716:	81a3      	strheq	r3, [r4, #12]
 8007718:	bf18      	it	ne
 800771a:	81a3      	strhne	r3, [r4, #12]
 800771c:	bd10      	pop	{r4, pc}

0800771e <__sclose>:
 800771e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007722:	f000 b813 	b.w	800774c <_close_r>
	...

08007728 <_write_r>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	4604      	mov	r4, r0
 800772c:	4608      	mov	r0, r1
 800772e:	4611      	mov	r1, r2
 8007730:	2200      	movs	r2, #0
 8007732:	4d05      	ldr	r5, [pc, #20]	; (8007748 <_write_r+0x20>)
 8007734:	602a      	str	r2, [r5, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f7fa fa06 	bl	8001b48 <_write>
 800773c:	1c43      	adds	r3, r0, #1
 800773e:	d102      	bne.n	8007746 <_write_r+0x1e>
 8007740:	682b      	ldr	r3, [r5, #0]
 8007742:	b103      	cbz	r3, 8007746 <_write_r+0x1e>
 8007744:	6023      	str	r3, [r4, #0]
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	2000032c 	.word	0x2000032c

0800774c <_close_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	2300      	movs	r3, #0
 8007750:	4d05      	ldr	r5, [pc, #20]	; (8007768 <_close_r+0x1c>)
 8007752:	4604      	mov	r4, r0
 8007754:	4608      	mov	r0, r1
 8007756:	602b      	str	r3, [r5, #0]
 8007758:	f7fa fa12 	bl	8001b80 <_close>
 800775c:	1c43      	adds	r3, r0, #1
 800775e:	d102      	bne.n	8007766 <_close_r+0x1a>
 8007760:	682b      	ldr	r3, [r5, #0]
 8007762:	b103      	cbz	r3, 8007766 <_close_r+0x1a>
 8007764:	6023      	str	r3, [r4, #0]
 8007766:	bd38      	pop	{r3, r4, r5, pc}
 8007768:	2000032c 	.word	0x2000032c

0800776c <_fstat_r>:
 800776c:	b538      	push	{r3, r4, r5, lr}
 800776e:	2300      	movs	r3, #0
 8007770:	4d06      	ldr	r5, [pc, #24]	; (800778c <_fstat_r+0x20>)
 8007772:	4604      	mov	r4, r0
 8007774:	4608      	mov	r0, r1
 8007776:	4611      	mov	r1, r2
 8007778:	602b      	str	r3, [r5, #0]
 800777a:	f7fa fa0c 	bl	8001b96 <_fstat>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d102      	bne.n	8007788 <_fstat_r+0x1c>
 8007782:	682b      	ldr	r3, [r5, #0]
 8007784:	b103      	cbz	r3, 8007788 <_fstat_r+0x1c>
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	bd38      	pop	{r3, r4, r5, pc}
 800778a:	bf00      	nop
 800778c:	2000032c 	.word	0x2000032c

08007790 <_isatty_r>:
 8007790:	b538      	push	{r3, r4, r5, lr}
 8007792:	2300      	movs	r3, #0
 8007794:	4d05      	ldr	r5, [pc, #20]	; (80077ac <_isatty_r+0x1c>)
 8007796:	4604      	mov	r4, r0
 8007798:	4608      	mov	r0, r1
 800779a:	602b      	str	r3, [r5, #0]
 800779c:	f7fa fa0a 	bl	8001bb4 <_isatty>
 80077a0:	1c43      	adds	r3, r0, #1
 80077a2:	d102      	bne.n	80077aa <_isatty_r+0x1a>
 80077a4:	682b      	ldr	r3, [r5, #0]
 80077a6:	b103      	cbz	r3, 80077aa <_isatty_r+0x1a>
 80077a8:	6023      	str	r3, [r4, #0]
 80077aa:	bd38      	pop	{r3, r4, r5, pc}
 80077ac:	2000032c 	.word	0x2000032c

080077b0 <_lseek_r>:
 80077b0:	b538      	push	{r3, r4, r5, lr}
 80077b2:	4604      	mov	r4, r0
 80077b4:	4608      	mov	r0, r1
 80077b6:	4611      	mov	r1, r2
 80077b8:	2200      	movs	r2, #0
 80077ba:	4d05      	ldr	r5, [pc, #20]	; (80077d0 <_lseek_r+0x20>)
 80077bc:	602a      	str	r2, [r5, #0]
 80077be:	461a      	mov	r2, r3
 80077c0:	f7fa fa02 	bl	8001bc8 <_lseek>
 80077c4:	1c43      	adds	r3, r0, #1
 80077c6:	d102      	bne.n	80077ce <_lseek_r+0x1e>
 80077c8:	682b      	ldr	r3, [r5, #0]
 80077ca:	b103      	cbz	r3, 80077ce <_lseek_r+0x1e>
 80077cc:	6023      	str	r3, [r4, #0]
 80077ce:	bd38      	pop	{r3, r4, r5, pc}
 80077d0:	2000032c 	.word	0x2000032c

080077d4 <_read_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4604      	mov	r4, r0
 80077d8:	4608      	mov	r0, r1
 80077da:	4611      	mov	r1, r2
 80077dc:	2200      	movs	r2, #0
 80077de:	4d05      	ldr	r5, [pc, #20]	; (80077f4 <_read_r+0x20>)
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7fa f993 	bl	8001b0e <_read>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_read_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_read_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	2000032c 	.word	0x2000032c

080077f8 <_init>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr

08007804 <_fini>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr
